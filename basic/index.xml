<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript basics on COMP312 labs</title>
    <link>http://philiplei.github.io/basic/</link>
    <description>Recent content in JavaScript basics on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 May 2016 10:14:43 +0800</lastBuildDate>
    
	<atom:link href="http://philiplei.github.io/basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2-1 Basic data types and control</title>
      <link>http://philiplei.github.io/basic/2-1/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-1/</guid>
      <description>This lab goes through the basic data types (Number and String) and control structures of the JavaScript programming language.
Number Two basic data types in JavaScript are Number and String. There are no separate types for integers and doubles. You define a variable x with var x. You don&amp;rsquo;t need to specify data type. (In ES6, you can also declare variables with let x and constants with const x.)</description>
    </item>
    
    <item>
      <title>2-2 Arrays and functions</title>
      <link>http://philiplei.github.io/basic/2-2/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-2/</guid>
      <description>This lab goes through the basics of the JavaScript arrays and functions.
Array An array keeps values in a sequence. Arrays can change size in run-time. You retrieve an element from an array by position. Use the operator [] to locate an element at the given index.
var a = [ 1, 3, 5, 7, 9 ]; console.log(`The second odd number is ${a[1]}.`); var empty = [ ]; // empty array empty[1] // undefined  The length property refers to the number of elements inside the array.</description>
    </item>
    
    <item>
      <title>2-3 Objects and JSON data</title>
      <link>http://philiplei.github.io/basic/2-3/</link>
      <pubDate>Thu, 26 May 2016 19:13:37 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-3/</guid>
      <description>This lab covers the basics of objects (as data structure). It also covers part of JSON.
Objects In JavaScript, an object is a collection of properties. Each property is a pair of name and value. You can access each property with the dot notation.
// define an object with 3 properties var peter = { firstName: &amp;quot;Peter&amp;quot;, lastName: &amp;quot;Chan&amp;quot;, age: 19 }; console.log(peter.lastName) // &amp;quot;Chan&amp;quot; peter.age ++; console.log(`${peter.firstName} is now ${peter.</description>
    </item>
    
    <item>
      <title>2-4 Callbacks and arrow functions</title>
      <link>http://philiplei.github.io/basic/2-4/</link>
      <pubDate>Thu, 26 May 2016 19:13:42 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-4/</guid>
      <description>Functions as first-class values Functions in JavaScript are often described as first-class values. (In fact, functions are objects, with their own properties and methods.) This means that, in many cases, if you can do something on numbers or strings, you can also do the same on functions. In particular, you can save a function in a variable, pass a function to another function, or return a function from a function.</description>
    </item>
    
    <item>
      <title>2-5 Defining class</title>
      <link>http://philiplei.github.io/basic/2-5/</link>
      <pubDate>Fri, 27 May 2016 17:05:08 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-5/</guid>
      <description>Object literals Many values in JavaScript are objects. In lab 2-3, we created an object as a group of properties. Each property has a name and a value. We list the properties in { }. Such objects have already some built-in methods. For example, point.toString() returns a string representation of the object, although the default implementation is not useful.
var point = { x: 2, y: 3 }; console.log(point.toString());  You can define a more useful version of .</description>
    </item>
    
    <item>
      <title>2-6 Regular expression</title>
      <link>http://philiplei.github.io/basic/2-6/</link>
      <pubDate>Mon, 12 Sep 2016 17:05:11 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-6/</guid>
      <description>Regexp object A regular expression (regexp) defines pattern used to search, replace and extract information from strings. It is a small language that many common programming languages have support for it.
A common usage of regexp is to check whether user input is correct. The following example checks whether the user input is an email address in IPM.
var s = prompt (&amp;quot;Your IPM student email address please&amp;quot;); // define a regular expression var re = /p\d{7}@ipm\.</description>
    </item>
    
  </channel>
</rss>