<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on COMP312 labs</title>
    <link>http://philiplei.github.io/basic/</link>
    <description>Recent content in Basics on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 May 2016 10:14:43 +0800</lastBuildDate>
    <atom:link href="http://philiplei.github.io/basic/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript basics</title>
      <link>http://philiplei.github.io/basic/</link>
      <pubDate>Thu, 26 May 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/</guid>
      <description>

&lt;h2 id=&#34;javascript-basics:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;JavaScript Basics&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;lab&lt;/strong&gt; goes through the basics of the JavaScript programming language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2-1. Basic data types and control structures

&lt;ul&gt;
&lt;li&gt;numbers, strings, conversion, selection and looping&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-2. Arrays and functions

&lt;ul&gt;
&lt;li&gt;array basics. function statement&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-3. Objects and JSON data format

&lt;ul&gt;
&lt;li&gt;model data by mixing arrays and objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-4. Callbacks and arrow functions

&lt;ul&gt;
&lt;li&gt;functions as values, callback, timer, arrow function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-5. Some built-in class: Collections and iterable objects

&lt;ul&gt;
&lt;li&gt;Object literal&lt;/li&gt;
&lt;li&gt;built-in classes: Array, Date, Map&lt;/li&gt;
&lt;li&gt;define class&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-6. Regular expression&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Others: exception, JSON, promise, closure&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2-1 Basic data types and control</title>
      <link>http://philiplei.github.io/basic/2-1/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-1/</guid>
      <description>

&lt;p&gt;This lab goes through the basic data types (Number and String) and control structures of the JavaScript programming language.&lt;/p&gt;

&lt;h2 id=&#34;number:855bd0b6902ba912a5e7d4153423beed&#34;&gt;Number&lt;/h2&gt;

&lt;p&gt;Two basic data types in JavaScript are &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&#34;&gt;Number&lt;/a&gt; and String.
There are no separate types for integers and doubles. (You define a variable &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;var x&lt;/code&gt;. In ES6, you can also declare variables with &lt;code&gt;let x&lt;/code&gt; and constants with &lt;code&gt;const x&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 1;
var b = 2e3;  /* 2 * (10*10*10) */
var c;  /* c is undefined */
c = a * 1.5 + b;
console.log(c);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the basic arithmetic operators (+, -, *, /, %) &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators&#34;&gt;(ref)&lt;/a&gt;, the Math built-in object &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math&#34;&gt;(ref)&lt;/a&gt; provides some useful functions (e.g. &lt;code&gt;Math.random()&lt;/code&gt;, &lt;code&gt;Math.floor()&lt;/code&gt;, &lt;code&gt;Math.ceil()&lt;/code&gt;, &lt;code&gt;Math.round()&lt;/code&gt;, &lt;code&gt;Math.pow()&lt;/code&gt;, &lt;code&gt;Math.sqrt()&lt;/code&gt; and trigonometric functions.)&lt;/p&gt;

&lt;p&gt;(Btw, the trailing semicolons of statements may be omitted if there is only 1 statement on a line.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var r = 10
var area = Math.PI * r * r
// same as Math.PI * Math.pow(r,2)

// a number from 1,2,3,4,5 and 6
// Math.random() returns a number between 0 and 1
var dice = Math.floor(Math.random()*6)+1

var x = Math.sin(Math.PI/2)  // 1
var y = Math.sqrt(-1) // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string:855bd0b6902ba912a5e7d4153423beed&#34;&gt;String&lt;/h2&gt;

&lt;p&gt;Strings can be delimited with single quote or double quote. Join two strings
with &lt;code&gt;+&lt;/code&gt;. Use the property &lt;code&gt;.length&lt;/code&gt; to check number of characters in a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var user = &amp;quot;peterchan&amp;quot;;
var domain = &#39;ymail.com&#39;;
var addr = user + &amp;quot;@&amp;quot; + domain;
var n = &amp;quot;seven&amp;quot;.length;  // 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String literals use backslash &lt;code&gt;\&lt;/code&gt; to escape character, e.g. &lt;code&gt;\&amp;quot;&lt;/code&gt;, &lt;code&gt;\&#39;&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// no need to escape, but if you may
var s1 = &#39;A string with &amp;quot;double quoted text&amp;quot;.&#39;
// escape the backlash character
var s2 = &#39;c:\\inetpub\\index.html&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String literals can also use methods defined in the String class &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&#34;&gt;(ref)&lt;/a&gt;. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var text = &#39;Mississippi&#39;;
var p = text.indexOf(&#39;ss&#39;); // location of &#39;ss&#39;
var mesg = &amp;quot;All the best&amp;quot;;
p = mesg.slice(0,3); // &#39;All&#39;
p = mesg.slice(4); // &#39;the best&#39;
p = mesg.slice(-4); // &#39;best&#39;
p = mesg.slice(-4,-2); // &#39;be&#39;

var A = &amp;quot;202.175.3.3&amp;quot;.split(&#39;.&#39;);
// an array [&#39;202&#39;, &#39;175&#39;, &#39;3&#39;, &#39;3&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conversion:855bd0b6902ba912a5e7d4153423beed&#34;&gt;Conversion&lt;/h2&gt;

&lt;p&gt;User input are usually returned as string. Before calculation, use &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;parseFloat()&lt;/code&gt; to convert the string into an integer / floating point number.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = &amp;quot;3.14&amp;quot;;
// unexpected result of string concatenation
console.log(s+1);
var pi = parseFloat(s);
console.log(pi+1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are various methods to change a number into a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var n = 12;
var s1 = n.toString();  // &amp;quot;12&amp;quot;
var s2 = &#39;&#39; + n; // automatic conversion in string concatenation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new features in ES6 is &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&#34;&gt;template string&lt;/a&gt;.
Template strings support interpolation. They evaluate JavaScript expressions embedded in &lt;code&gt;${}&lt;/code&gt; and insert the result into the string. Notice the back ticks used to delimit a template string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var user = &amp;quot;Peter&amp;quot;;
var age = 18;
var s = `${user}&#39;s age is ${age}`;
console.log(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A longer example to illustrate number-string conversion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = window.prompt(&#39;Enter radius of the circle&#39;);
var r = parseFloat(s);
console.log(`Area = ${Math.PI * r * r}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;comparison:855bd0b6902ba912a5e7d4153423beed&#34;&gt;Comparison&lt;/h2&gt;

&lt;p&gt;You can compare numbers and strings using the operators &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.
Comparison results are either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, which are the only two values in &lt;code&gt;boolean&lt;/code&gt; data type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;quot;apple&amp;quot; == &amp;quot;Apple&amp;quot; // false
&amp;quot;apple&amp;quot; &amp;lt; &#39;banana&#39; // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first four operators may convert the data if they are of different data type. It is especially confusing if you compare numbers with strings. JavaScript converts strings into numbers before comparison. In general, it is better to do the conversion by yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;quot;1&amp;quot; == 1.0 // true
3 == &#39;3.0&#39; // true
&#39;3&#39; == &#39;3.0&#39; // false!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some authors recommend the usage of &lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; in comparison. The operator &lt;code&gt;===&lt;/code&gt; &lt;strong&gt;does not convert&lt;/strong&gt; values before comparison. Similarly, &lt;code&gt;!==&lt;/code&gt; checks whether two values are not equal without automatic type conversion.&lt;/p&gt;

&lt;p&gt;Similar to Java, you can use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; to combine comparison tests.&lt;/p&gt;

&lt;h2 id=&#34;control-structure:855bd0b6902ba912a5e7d4153423beed&#34;&gt;Control structure&lt;/h2&gt;

&lt;p&gt;The control structure if, for and while are similar to those in Java. Please read the online reference of &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else&#34;&gt;if&amp;hellip;else&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for&#34;&gt;for&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while&#34;&gt;while&lt;/a&gt; and
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch&#34;&gt;switch&lt;/a&gt; for detail.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;if&lt;/code&gt; to solve quadratic equations &lt;img src=&#34;http://philiplei.github.io/chap2/quadratic.png&#34; height=&#39;60&#39;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 1, b = -3, c = 2;  // roots are 1 and 2
// var a = 1, b = 0, c = 1;  // roots are i and -i

var det = b * b - 4 * a * c;
var root1, root2;
if (det&amp;gt;=0) {
  // these two are Number
  root1 = (-b - Math.sqrt(det)) / (2*a);
  root2 = (-b + Math.sqrt(det)) / (2*a);
} else {
  // these two are String.. sorry, no complex number support
  root1 = `${-b/2/a} - ${Math.sqrt(-det)/2/a}i`;
  root2 = `${-b/2/a} + ${Math.sqrt(-det)/2/a}i`;
}
console.log(`${a} x^2 + ${b} x + ${c} = 0`);
console.log(`The roots are ${root1} and ${root2}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples on loops.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// calculate 1+2+3+...+10;
var sum = 0;
for (var k=1; k&amp;lt;=10; k++) {
  sum += k;
}
console.log(`The sum of 1+2+...+10 = ${sum}.`);

// calculate 1*1+2*2+...+n*n, where n*n&amp;lt;100;
var i = 1; var sum = 0;
while (i*i&amp;lt;100) {
  sum += i*i;
  i++;
}
console.log(`The sum of squares &amp;lt; 100 is ${sum}.`)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-note-on-loose-typing:855bd0b6902ba912a5e7d4153423beed&#34;&gt;A note on loose typing&lt;/h2&gt;

&lt;p&gt;You might have noticed that when you define a variable with &lt;code&gt;var x&lt;/code&gt;, you don&amp;rsquo;t need to specify a data type. A JavaScript variable is not tied to a specific data type in declaration, and can hold values of different data types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var x = 10;
x++;  // x is a Number
x = x.toString(2);  // binary representation
console.log(x); // x is now a String
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise:855bd0b6902ba912a5e7d4153423beed&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a program to calculate the sum of even positive numbers up to 30.
&lt;i&gt;(The answer should be 240)&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following program asks the user a number &lt;code&gt;n&lt;/code&gt;, and print a &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt; squares to console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = window.prompt(&#39;Enter size of the square&#39;);
/* convert the input string into a number */
var n = parseInt(s);
/* build a line with n stars */
var line = &#39;&#39;;
for (var i=0; i&amp;lt;n; i++) { line = line + &#39;* &#39;; }
/* build a square with n lines */
var sqr = &#39;&#39;;
for (i=0; i&amp;lt;n; i++) { sqr = sqr + line + &#39;\n&#39;;}
console.log(sqr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify the program to print an empty square.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * * * *
*       *
*       *
*       *
* * * * *
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>2-2 Arrays and functions</title>
      <link>http://philiplei.github.io/basic/2-2/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-2/</guid>
      <description>

&lt;p&gt;This lab goes through the basics of the JavaScript arrays and functions.&lt;/p&gt;

&lt;h2 id=&#34;array:751e016222acc825af018628bf936c15&#34;&gt;Array&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&#34;&gt;array&lt;/a&gt; keeps values in a sequence. Arrays can change size in run-time. You retrieve an element from an array by position. Use the operator &lt;code&gt;[]&lt;/code&gt; to locate an element at the given index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [ 1, 3, 5, 7, 9 ];
console.log(`The second odd number is ${a[1]}.`);

var empty = [ ];  // empty array
empty[1] // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;length&lt;/code&gt; property refers to the number of elements inside the array.
A common method to iterate an array is to use &lt;code&gt;for&lt;/code&gt; loop. You can read and write elements inside the loop using &lt;code&gt;[ ]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [ 2, 3, 5, 7, 11 ] ;  // small primes
for (var i=0; i&amp;lt;p.length; i++) {
  console.log(p[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6 has a new control structure &lt;code&gt;for of&lt;/code&gt; to iterate arrays and other iterable objects.
You can use it to &lt;strong&gt;read&lt;/strong&gt; the entries of an array one by one.
This control structure is convenient when you only need to access the content of an array, but not the position.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [ 2, 3, 5, 7, 11 ] ;  // small primes
for (var x of p) {
  console.log(x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you need read-only access to the entries and their position, use the method &lt;code&gt;.entries()&lt;/code&gt; of Array. The method is an iterable list of tuples &lt;code&gt;[index, value]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var num = [ &#39;zero&#39;, &#39;um&#39;, &#39;dois&#39;, &#39;tres&#39; ];
for (var [idx, s] of num.entries()) {
  console.log(`In Portuguese, ${s} means ${idx}.`)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-array-methods:751e016222acc825af018628bf936c15&#34;&gt;Basic array methods&lt;/h2&gt;

&lt;p&gt;Arrays are objects in JavaScript and have some built-in methods. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&#34;&gt;online reference&lt;/a&gt; for a list of all methods.
The following shows some common methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var A = [2,4];
A.push(6)  // A becomes [2,4,6]
A.pop(); // returns 6. A becomes [2,4]
A.unshift(0); // A becomes [0,2,4]
A.shift(); // returns 0

var b = [202,175,3,3];
var s = b.join(&#39;.&#39;); // &amp;quot;202.175.3.3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays are useful to keep some values in order. The following example generates prime numbers less than 200. Is also demonstrates the usage of &lt;code&gt;continue&lt;/code&gt; and loop label to force the next iteration.
Please refer to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue&#34;&gt;online help&lt;/a&gt; for the detail usage of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [2, 3, 5, 7];
// give a label to the first for loop
loop1:
for (var k=9; k&amp;lt;200; k+=2) {
  loop2:
  for (var n of p) {
    // if k is divisible by a prime in p, continue onto k+2
    if (k % n == 0) continue loop1;
  }
  // after the above for loop, k is verified as prime
  p.push(k);
}
console.log(p);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions:751e016222acc825af018628bf936c15&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;There are two ways to define functions: the &lt;code&gt;function&lt;/code&gt; keyword and arrow functions. This lab covers the first. We use a function to group some statements that can be reused.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// draw a right angle triangle of height n
function draw (n) {
  var out = &amp;quot;&amp;quot;;
  for (var y=0; y&amp;lt;n; y++) {
    var s = &amp;quot;&amp;quot;;
    for (var i=0; i&amp;lt;n-y-1; i++) s += &amp;quot;. &amp;quot;;
    for (var i=0; i&amp;lt;=y; i++) s += &amp;quot;* &amp;quot;;
    out += s+&amp;quot;\n&amp;quot;;
  }
  console.log(out);
}

draw(5); // call the function to draw a triangle of height 5
draw(10); // draw again
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can return values to the calling code with &lt;code&gt;return&lt;/code&gt;. The &lt;code&gt;return&lt;/code&gt; statement also ends the execution of the functions immediately.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// this function compares the two parameters a and b, and returns the bigger one
function bigger (a,b) {
  if (a&amp;gt;b) {
    return a;
  } else {
    return b;
  }
}
console.log(&#39;The bigger one is &#39;, bigger(2,3));

// another way to write
function bigger2 (a,b) {
  if (a&amp;gt;b) { return a; }
  return b;
}

// yet another way to write
function bigger3 (a,b) { return a&amp;gt;b ? a : b; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next example defines a function that finds the largest number in an array, assuming that the array has at least 1 element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function max (num) {
  var x = num[0]; // assume the 0th element is the largest
  // compare x with each remaining element
  for (var k=1; k&amp;lt;num.length; k++) {
    if (num[k]&amp;gt;x) x = num[k];
  }
  return x;
}

max([2,3,5,8,7,1,4,6]); // return 8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-note-on-variable-scope:751e016222acc825af018628bf936c15&#34;&gt;A note on variable scope&lt;/h2&gt;

&lt;p&gt;In JavaScript, variables have function scope. That means that variables defined within a function are only visible inside the function. They are sometimes called &lt;dfn&gt;local variables&lt;/dfn&gt;. Function parameters also work like local variables. A new copy of these variables is created when the function executes, and removed when no code has access to them anymore. For simple case like the above example, the local variables are removed when the function returns.&lt;/p&gt;

&lt;p&gt;On the other hand, variables defined outside any functions are &lt;dfn&gt;global variables&lt;/dfn&gt;, and are visible inside any functions. It is generally recommended to use global variables as little as possible.&lt;/p&gt;

&lt;p&gt;In addition, you can define a function inside another function. Such nesting functions create nesting variable scopes.&lt;/p&gt;

&lt;!--
function sum(A) {
  var a = 0;
  for (var k of A) a+=k;
  return a;
}

function odd(n) {
  var ans = [];
  for (var k=1; k&lt;=n; k+=2) ans.push(k);
  return ans;
}
--&gt;

&lt;h2 id=&#34;exercise:751e016222acc825af018628bf936c15&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a &lt;strong&gt;function&lt;/strong&gt; &lt;code&gt;sum(num)&lt;/code&gt; to calculate the sum of elements in an array &lt;code&gt;num&lt;/code&gt;.
Use the following code to test your function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var x = [1,2,3,4,5];
var ans = sum(x);
console.log(&#39;Correct? &#39;, ans==15);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a function &lt;code&gt;odd(n)&lt;/code&gt; to generate an array of odd numbers less than or equal to &lt;code&gt;n&lt;/code&gt;.
Test your function with the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = odd(1);
console.log(a); // should print [1]
console.log(odd(9)); // should print [1,3,5,7,9]
console.log(sum(odd(10*2-1))); // should print 100
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a function &lt;code&gt;search(num, n)&lt;/code&gt; to search for an number &lt;code&gt;n&lt;/code&gt; in the array &lt;code&gt;num&lt;/code&gt;. Return the   position of the element if it is found. If it is not found, return -1. Test your function with the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var x = [6, 8, 3, -2];
console.log(search(x, 3)); // should print 2;
console.log(search(x, 1)); // should print -1;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sample answers are available at &lt;a href=&#34;http://philiplei.github.io/chap2/p201.js&#34;&gt;p201.js&lt;/a&gt;, &lt;a href=&#34;http://philiplei.github.io/chap2/p202.js&#34;&gt;p202.js&lt;/a&gt; and &lt;a href=&#34;http://philiplei.github.io/chap2/p203.js&#34;&gt;p203.js&lt;/a&gt; respectively.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2-3 Objects and JSON data</title>
      <link>http://philiplei.github.io/basic/2-3/</link>
      <pubDate>Thu, 26 May 2016 19:13:37 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-3/</guid>
      <description>

&lt;p&gt;This lab covers the basics of objects (as data structure). It also covers part of JSON.&lt;/p&gt;

&lt;h2 id=&#34;objects:51a54ca2b6504050813f27f36d3dbb0e&#34;&gt;Objects&lt;/h2&gt;

&lt;p&gt;In JavaScript, an &lt;dfn&gt;object&lt;/dfn&gt; is a collection of properties. Each property
is a pair of name and value. You can access each property with the dot notation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// define an object with 3 properties
var peter = {
  firstName: &amp;quot;Peter&amp;quot;,
  lastName: &amp;quot;Chan&amp;quot;,
  age: 19
};
console.log(peter.lastName)  // &amp;quot;Chan&amp;quot;
peter.age ++;
console.log(`${peter.firstName} is now ${peter.age} years old.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use assignment to change value of an existing property, or add a new property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var point = { };  // empty objects
point.x = 10; // add property
point.y = 8;
dir(point); // show structure, only avail in Chrome console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can accept objects, and return objects. In the following, objects with the two properties &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; represent points on a plane.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function distance (p1, p2) {
  // the function Math.hypot() can also be used here
  var sum_sqr = Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y-p2.y, 2);
  return Math.sqrt(sum_sqr);
}

function midpoint (p1, p2) {
  return {
    x: (p1.x+p2.x) / 2,
    y: (p1.y+p2.y) / 2
  }
}

var p1 = { x: 0, y: 0 }, p2 = { x: 3, y: 4 };
console.log(`Distance = ${distance(p1,p2)}`);
var mid = midpoint(p1, p2);
dir(mid);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;complicated-data:51a54ca2b6504050813f27f36d3dbb0e&#34;&gt;Complicated data&lt;/h2&gt;

&lt;p&gt;A property can take another object as value. This put an object inside another object.
Use nesting objects to represent a hierarchy of properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var flight = {
  airline: &amp;quot;Oceanic&amp;quot;,
  number: 815,
  departure: {
     IATA: &amp;quot;SYD&amp;quot;,
     time: &amp;quot;2004-09-22 14:55&amp;quot;,
     city: &amp;quot;Sydney&amp;quot;
  },
  arrival: {
     IATA: &amp;quot;LAX&amp;quot;,
     time: &amp;quot;2004-09-23 10:42&amp;quot;,
     city: &amp;quot;Los Angeles&amp;quot;
  }
};

console.log(
   &#39;This flight goes from &#39;,
   flight.departure.city,
   &#39; to &#39;,
   flight.arrival.city
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By mixing arrays and objects, you can use JavaScript data structure to represent some complicated data. This forms the basis of the JSON data format.&lt;/p&gt;

&lt;p&gt;In the following example, the object &lt;code&gt;timetab&lt;/code&gt; represents the lecture timetable for &lt;sup&gt;2016&lt;/sup&gt;&amp;frasl;&lt;sub&gt;17&lt;/sub&gt;, semester 1. The property &lt;code&gt;courses&lt;/code&gt; has array value, and contains an object for each course.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var timetab = {
  acadYear: &amp;quot;2016/17&amp;quot;,
  semester: 1,
  courses: [
    {
      code: &#39;comp211&#39;, title: &#39;Database design&#39;, year: 2,
      lectures: [
        { dow: 2, start: 1130, end: 1300, room: &#39;A203&#39; },
        { dow: 4, start: 1000, end: 1130, room: &#39;A318&#39; }
      ]
    },
    {
      code: &#39;comp212&#39;, title: &#39;Programming II&#39;, year: 2,
      lectures: [
        { dow: 4, start: 1430, end: 1600, room: &#39;A317&#39; },
        { dow: 3, start: 1600, end: 1730, room: &#39;A210&#39; }
      ]
    },
    {
      code: &#39;comp214&#39;, title: &#39;Computer networks&#39;, year: 2,
      lectures: [
        { dow: 5, start: 1000, end: 1300, room: &#39;A206&#39; }
      ]
    }
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-note-on-object-notation:51a54ca2b6504050813f27f36d3dbb0e&#34;&gt;A note on object notation&lt;/h2&gt;

&lt;p&gt;In addition to the dot notation, you can also use array notation to access a property in objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var person = { name: &#39;Peter&#39; };
// same as person.age = 20;
person[&#39;age&#39;] = 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The array notation is necessary if you only know the property names in run-time, or the property names contains non-ASCII characters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var cn2en = {
  &#39;春&#39;: &#39;spring&#39;, &#39;夏&#39;: &#39;summer&#39;,
  &#39;秋&#39;: &#39;autumn&#39;, &#39;冬&#39; : &#39;winter&#39;
};
cn2en[&#39;春&#39;]  // &#39;spring&#39;
// the following has syntax error
//cn2en.春
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The JavaScript language also has a &lt;code&gt;for .. in&lt;/code&gt; control structure to enumerate the properties of an object. We skip its discussion because it is tricky to use.&lt;/p&gt;

&lt;h2 id=&#34;exercise:51a54ca2b6504050813f27f36d3dbb0e&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Use the time table data structure above to complete this exercise. Refer to the sample answers for sample output: &lt;a href=&#34;http://philiplei.github.io/chap2/p204.js&#34;&gt;p204.js&lt;/a&gt;, &lt;a href=&#34;http://philiplei.github.io/chap2/p205.js&#34;&gt;p205.js&lt;/a&gt; and &lt;a href=&#34;http://philiplei.github.io/chap2/p206.js&#34;&gt;p206.js&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a program to show the number of lectures of each course. The output should include course code, course title, and number of lectures per week.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program to print the content of the time table.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program to list the lectures on Thursday &lt;code&gt;dow==4&lt;/code&gt;. The output should include course code, start and end time, and room.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>2-4 Callbacks and arrow functions</title>
      <link>http://philiplei.github.io/basic/2-4/</link>
      <pubDate>Thu, 26 May 2016 19:13:42 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-4/</guid>
      <description>

&lt;h2 id=&#34;functions-as-first-class-values:8f8679018181f9c68b8f50f2e680210f&#34;&gt;Functions as first-class values&lt;/h2&gt;

&lt;p&gt;Functions in JavaScript are often described as first-class values. (In fact, functions are objects, with their own properties and methods.) This means that, in many cases, if you can do something on numbers or strings, you can also do the same on functions. In particular,
you can save a function in a variable, pass a function to another function, or return a function from a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function add (a,b) { return a+b; }
var f = add;
f(1,2); // returns 3;
add(1,2); // same
// dir(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing a function to another function is possible. This is an example of &lt;dfn&gt;callback&lt;/dfn&gt;, and can change the behavior of another function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// use a function op(x,y) to combine 3 values
function combine (op, a, b, c) {
  var t = op(a,b);
  var ans = op(t,c);
  return ans;
}

// define an anonymous function, and save it in the variable &#39;add&#39;
var add = function(a,b) { return a+b; }
combine(add, 6, 7, 8); // returns 21

var mul = function(a,b) { return a*b; }
combine(mul, 6, 7, 8); // returns 336
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map-and-filter:8f8679018181f9c68b8f50f2e680210f&#34;&gt;Map and filter&lt;/h2&gt;

&lt;p&gt;A common case in processing a large amount of data in arrays is to iterate the elements and perform some processing or filtering on each element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = [];
// round the numbers to 2 decimal places
for (var n of a) {
  var n2 = Math.round(n*100) / 100;
  b.push(n2);
}
// print a and b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// an array of objects, each one is a rectangle with given width and height
var c = [ { w: 4, h: 5 }, { w: 2, h: 3 } ];
var d = [];
// calculate the area of the rectangles
for (var k=0; k&amp;lt;c.length; k++) {
  var area = c[k].w * c[k].h;
  d.push(area);
}
// print c and d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a common scenario in programming. Therefore, the JavaScript Array objects provide built-in methods to iterate their content. One of the simplest is &lt;code&gt;.map()&lt;/code&gt;, which accepts a function as parameter. The function takes 1 input, perform some processing, and returns the result. &lt;code&gt;.map()&lt;/code&gt; collects these results into an output array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function round2(n) { return Math.round(n*100) / 100; }

var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(round2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;round2&lt;/code&gt; is another example of &lt;dfn&gt;callback&lt;/dfn&gt; function. This callback function is not called directly by your code. Instead, after definition, you pass the callback function to someone else&amp;rsquo;s code, and their code will call back your function later.&lt;/p&gt;

&lt;p&gt;If this function is not used anywhere else, you can define it in the parameter list of &lt;code&gt;.map()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(function round2(n) {
   return Math.round(n*100) / 100;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can even omit the function name. This defines an &lt;dfn&gt;anonymous function&lt;/dfn&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(function(n) {
   return Math.round(n*100) / 100;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to look at this is that a callback function can customize / modify the functionality of an existing function. For example, to calculate areas of rectangles in an array, we can write another callback function and pass it to &lt;code&gt;.map()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// an array of objects, each one is a rectangle with given width and height
var c = [ { w: 4, h: 5 }, { w: 2, h: 3 } ];
var d = c.map(function (r) {
  return r.w * r.h;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to &lt;code&gt;.map()&lt;/code&gt;, another popular iteration function in Array is &lt;code&gt;.filter()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var e = [&#39;joy&#39;, &#39;sadness&#39;, &#39;anger&#39;, &#39;disgust&#39;, &#39;fear&#39;];
var f = [];
for (var s of e) {
  if (s.length&amp;lt;5) f.push(s);
}
// print e and f

// same as the for loop above
f = e.filter(function(s) { return (s.length&amp;lt;5); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting:8f8679018181f9c68b8f50f2e680210f&#34;&gt;Sorting&lt;/h2&gt;

&lt;p&gt;JavaScript arrays have a built-in &lt;code&gt;sort&lt;/code&gt; method. It can sort numbers and strings, but it does not know how to sort other objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [5, 4, 1, 2, 3];
a.sort();  // a becomes [1,2,3,4,5]
var b = [&#39;apple&#39;, &#39;orange&#39;, &#39;banana&#39;];
b.sort(); // b becomes [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;]

var p = [
  { name: &#39;Peter&#39;, age: 10 }, { name: &#39;Mary&#39;, age: 9 },
  { name: &#39;John&#39;, age: 11 } ];
p.sort(); // sort by name? by age?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can teach &lt;code&gt;.sort()&lt;/code&gt; how to compare two objects with a callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [
  { name: &#39;Peter&#39;, age: 10 }, { name: &#39;Mary&#39;, age: 9 },
  { name: &#39;John&#39;, age: 11 } ];

// compare two persons by age
function cmp (p1, p2) {
  if (p1.age&amp;lt;p2.age) return -1;  // p1 should be put before p2
  if (p1.age==p2.age) return 0;  // order not important
  return 1;                      // p1 should be put after p2
}

// sort by age
p.sort(cmp);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timer:8f8679018181f9c68b8f50f2e680210f&#34;&gt;Timer&lt;/h2&gt;

&lt;p&gt;Both browsers and Node.js support timers. Timers allow schedule of execution of a function in the future. There are two kinds of timers: one time (&lt;code&gt;setTimeout()&lt;/code&gt;), and periodic (&lt;code&gt;setInterval()&lt;/code&gt;). In either case, you pass the function to execute as a callback. Refer to the &lt;a href=&#34;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers&#34;&gt;online reference&lt;/a&gt; for detail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// say &#39;hello&#39; every 3 seconds
var id = setInterval(function() { console.log(&#39;hello&#39;);}, 3000);

// cancel the timer
//clearInterval(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is a countdown example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var n = 10;
function tick() {
  console.log(&#39;count down &#39;, n);
  n--;
  // if not down to 0, schedule myself to run 1s later
  if (n&amp;gt;0) { setTimeout(tick, 1000); }
}
// tick, the first time!
tick();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;arrow-functions:8f8679018181f9c68b8f50f2e680210f&#34;&gt;Arrow functions&lt;/h2&gt;

&lt;p&gt;Anonymous functions are very common in JavaScript programming because of the asynchronous nature of client-side or server-side programming. (E.g. register a callback to handle mouse click). Therefore, ES6 defines a more concise syntax called &lt;dfn&gt;arrow functions&lt;/dfn&gt; to define anonymous function. Usually, arrow functions are defined and passed directly to another function.&lt;/p&gt;

&lt;p&gt;Compare the two ways to write functions below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var f1 = (a,b) =&amp;gt; { return a+b; };
var f2 = function (a,b) { return a+b; }

setTimeout(function() { console.log(&#39;hello&#39;);}, 2000);
setTimeout( () =&amp;gt; { console.log(&#39;hello&#39;);}, 2000 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although we&amp;rsquo;ll mainly use arrow functions in the same way as functions defined with &lt;code&gt;function&lt;/code&gt; keyword, there are in fact some technical differences. One important difference is about the &lt;code&gt;this&lt;/code&gt; pointer. Please refer to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;online reference&lt;/a&gt; for detail.&lt;/p&gt;

&lt;p&gt;Array functions also provide some shorthand notation when the function body only returns an expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var f1 = (a,b) =&amp;gt; a+b;  // same as below
var f2 = (a,b) =&amp;gt; { return a+b; }

var f3 = a =&amp;gt; a+1; // same as below
var f4 = (a) =&amp;gt; { return a+1; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are more examples to demonstrate the usage of arrow functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(n =&amp;gt; Math.round(n*100) / 100);

var c = [3, 5, 2, 1];
c.sort((a,b)=&amp;gt;b-a); // sort in descending order

var e = [&#39;joy&#39;, &#39;sadness&#39;, &#39;anger&#39;, &#39;disgust&#39;, &#39;fear&#39;];
f = e.filter(s =&amp;gt; s.length&amp;lt;5);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;excersie:8f8679018181f9c68b8f50f2e680210f&#34;&gt;Excersie&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Given an array &lt;code&gt;var N = [ 32, 53, 42, 25, 48, 10 ]&lt;/code&gt;, write a program to do the following. You should use callback functions. &lt;a href=&#34;http://philiplei.github.io/chap2/p211.js&#34;&gt;(sample answer)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obtain an array of hexadecimal representation of the numbers in &lt;code&gt;N&lt;/code&gt;. (Hints: use &lt;code&gt;n.toString(16)&lt;/code&gt; to convert a number &lt;code&gt;n&lt;/code&gt; to hexadecimal)&lt;/li&gt;
&lt;li&gt;Obtain an array of the numbers in &lt;code&gt;N&lt;/code&gt; between 20 and 40 inclusively&lt;/li&gt;
&lt;li&gt;Count how many of the numbers  in &lt;code&gt;N&lt;/code&gt; are odd&lt;/li&gt;
&lt;li&gt;Calculate the sum of the numbers in &lt;code&gt;N&lt;/code&gt;. Try to use &lt;code&gt;.reduce()&lt;/code&gt; in Array. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&#34;&gt;(online reference)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The variable &lt;code&gt;comp312&lt;/code&gt; is an array that contains records of student marks in the comp312 class. Each student record has three fields: name, test and exam. Write programs to do the following. Use an Array iteration method (i.e. &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.filter()&lt;/code&gt;, &lt;code&gt;.reduce()&lt;/code&gt;, etc) at least once in each case. &lt;a href=&#34;http://philiplei.github.io/chap2/p212.js&#34;&gt;(sample answer)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var comp312 = [
  { name: &#39;Peter&#39;, test: 80, exam: 70 },
  { name: &#39;John&#39;, test: 60, exam: 65 },
  { name: &#39;Mary&#39;, test: 90, exam: 85 },
  { name: &#39;Christine&#39;, test: 70, exam: 76 }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a list of student names in the comp312 class&lt;/li&gt;
&lt;li&gt;Get a list of student record with test mark &amp;gt;= 75&lt;/li&gt;
&lt;li&gt;Get a list of student name whose test mark is greater than exam mark&lt;/li&gt;
&lt;li&gt;Assume final mark = 0.6 * test + 0.4 * exam. Make an array with records showing the final mark and name for each student.&lt;/li&gt;
&lt;li&gt;Sort the list in descending order of exam mark&lt;/li&gt;
&lt;li&gt;Show the student record with the highest exam mark&lt;/li&gt;
&lt;li&gt;Calculate the average test mark&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>2-5 Defining class</title>
      <link>http://philiplei.github.io/basic/2-5/</link>
      <pubDate>Fri, 27 May 2016 17:05:08 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-5/</guid>
      <description>

&lt;h2 id=&#34;object-literals:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Object literals&lt;/h2&gt;

&lt;p&gt;Many values in JavaScript are objects. In lab 2-3, we created an object as a group of properties. Each property has a name and a value. We list the properties in &lt;code&gt;{ }&lt;/code&gt;. Such objects have already some built-in methods. For example, &lt;code&gt;point.toString()&lt;/code&gt; returns a string representation of the object, although the default implementation is not useful.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var point = { x: 2, y: 3 };
console.log(point.toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can define a more useful version of &lt;code&gt;.toString()&lt;/code&gt; by adding a method, which is just a property with function value. In a method, &lt;code&gt;this&lt;/code&gt; refers to the object used to invoke the method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var point = {
  x: 2,
  y: 3,
  toString: function() { return `(${this.x},${this.y})` }
};
console.log(point.toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-built-in-class:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Some built-in class&lt;/h2&gt;

&lt;p&gt;On the other hand, the JavaScript language defines several built-in class, each with its own &lt;dfn&gt;constructor function&lt;/dfn&gt; to create objects of the class.  Objects thus created usually have built-in methods as defined in the class.&lt;/p&gt;

&lt;p&gt;In OOP sense, a &lt;dfn&gt;class&lt;/dfn&gt; defines a template for similar objects, and provides (at least) one constructor object to build new objects belonging to the class.&lt;/p&gt;

&lt;h3 id=&#34;array:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Array&lt;/h3&gt;

&lt;p&gt;JavaScript arrays are JavaScript objects. Typically, you construct an array with the syntax &lt;code&gt;[1,2,3]&lt;/code&gt;.
The array object has many methods, and you can invoke them with the dot notation. Refer to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_instances&#34;&gt;online ref&lt;/a&gt; for a list of methods of array objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// array literal uses the constructor of Array class
var a = [2,3,4];
a.unshift(1);
a.push(5);
var b = a.map(x=&amp;gt;x*2-1);
console.log(b.join(&#39;,&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you can also use the general constructor function syntax. In most cases, you must call the constructor function with the keyword &lt;code&gt;new&lt;/code&gt;. A new object is then created and returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// same as var b = [2,4,6,8,10]
var b = new Array(2,4,6,8,10);
for (var x of b) {
  console.log(x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;map:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Map&lt;/h3&gt;

&lt;p&gt;ES6 defines a new kind of collections called &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map&#34;&gt;Map&lt;/a&gt;. A map stores key/value pairs.
(In previous version of JavaScript, objects are often used as map.) You create a Map by submitting a list of key/value pairs to the constructor. Each pair is written as an array of two elements, namely key and value. You retrieve an element from a map using a key with the method &lt;code&gt;.get(key)&lt;/code&gt;. You add / replace an element in the map with the method &lt;code&gt;.set(key,value)&lt;/code&gt;. You can also delete an element from a map with &lt;code&gt;.delete(key)&lt;/code&gt;, and check the number of elements with the property &lt;code&gt;.size&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// creates a new Map with two key/value pairs
var m = new Map([ [&#39;one&#39;, 1], [&#39;two&#39;, 2] ]);
// use .get to retrieve an element
console.log(&#39;one =&amp;gt; &#39;, m.get(&#39;one&#39;));
// use .set to add / replace an element
m.set(&#39;three&#39;, 3);
// now, m is Map {&amp;quot;one&amp;quot; =&amp;gt; 1, &amp;quot;two&amp;quot; =&amp;gt; 2, &amp;quot;three&amp;quot; =&amp;gt; 3}
console.log(&amp;quot;Does the map contains the key &#39;four&#39;? &amp;quot;, m.has(&#39;four&#39;));
console.log(&#39;No, so .get returns &#39;, m.get(&#39;four&#39;));  // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A map is iterable, and the &lt;code&gt;for ...of&lt;/code&gt; loop returns a key/value pair in each step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var m = new Map([ [&#39;one&#39;, 1], [&#39;two&#39;, 2], [&#39;three&#39;, 3] ]);
for (var [k,v] of m) {
  console.log(`k = ${k}  v = ${v}`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;date:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Date&lt;/h3&gt;

&lt;p&gt;Another common built-in class is &lt;code&gt;Date&lt;/code&gt;, which represents a single moment in time. &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date&#34;&gt;(online reference)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// call a constructor to create a Date object,
// which equals to this moment
var now = new Date();
// create a Date object for the Macau SAR establishment day
var sare = new Date(&amp;quot;1999-12-20&amp;quot;);
// create a Date object for the coming X&#39;mas
var xmas = new Date(2016,11,25); // month: 0-11. Confusing!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// a Date object has some methods
var now = new Date();
var dow = now.getDay(); // 0-6, where 0 means Sunday
console.log(now.toLocaleString());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-class:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Defining class&lt;/h2&gt;

&lt;p&gt;ES6 has a new syntax to define class. It is similar to the syntax in Java.
A class is a template to create similar objects, with a constructor function (which builds new object of the class) and methods (which access properties of the object using &lt;code&gt;this&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the constructor, &lt;code&gt;this&lt;/code&gt; refers to the new object being created. You should initialize all properties inside the constructor.  Notice that in JavaScript, you don&amp;rsquo;t need to define the properties (as you define attributes in a Java class).&lt;/p&gt;

&lt;p&gt;In a method, &lt;code&gt;this&lt;/code&gt; refers to the object that invokes the method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;class Point {
  // create a Point object with the given x-, y- coordinates
  constructor (x,y) {
    // this refers to the new object being built
    this.x = x; this.y = y;
  }
  // a method to convert the point into a string
  toString () {
    // this refers to the object that invokes the method
    return `(${this.x},${this.y})`;
  }
};

var p1 = new Point(3,4);
console.log(&#39;p1 is &#39;, p1.toString());
// as as below. JavaScript calls the method toString when needed
// console.log(&#39;p1 is &#39;, p1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object created by a constructor is similar to object literal in common usage. (But there are some difference about &lt;code&gt;prototype&lt;/code&gt; in implementation detail we&amp;rsquo;ll not cover.)
Use a class when you need to create many objects using a common template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// assume you&#39;ve run the code listing above
dir(p1);

var p2 = { x: 2, y: 5 };
p2.toString = function() { return `(${this.x},${this.y})` }
dir(p2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All properties in JavaScript objects are public. So you can access the properties in a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function distanceBetween (p1,p2) {
  return Math.hypot(p1.x-p2.x, p1.y-p2.y);
}
function midpoint (p1, p2) {
  var midx = (p1.x+p2.x)/2;
  var midy = (p1.y+p2.y)/2;
  return new Point(midx, midy);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise:7ca16074685f2bdef80cf45ba4944844&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define a class &lt;code&gt;Circle&lt;/code&gt; that can be used in the following ways. Hints: the class contains a constructor, a method &lt;code&gt;area&lt;/code&gt; to calculate the area of the circle, a method &lt;code&gt;toString&lt;/code&gt; to convert the object into string, and a method &lt;code&gt;move(x,y)&lt;/code&gt; to move the center of the circle to the given location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var c = new Circle(1,2,10);
var a = c.area();
console.log(`The area is ${a}.`);
// this calls c.toString()
console.log(`c is ${c}`);
// c is a circle at (1,2) of radius 10
c.move(-1,0);
console.log(`c is ${c}`);
// c is a circle at (-1,0) of radius 10
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Define a function &lt;code&gt;contains(c1,c2)&lt;/code&gt; that takes two Circle objects as parameters and determine whether the first circle contains the second completely. Test your work with the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var c1 = new Circle(0, 0, 10);
var c2 = new Circle(3, 4, 4);
var c3 = new Circle(3, 4, 8);
console.log(&#39;c1 contains c2? &#39;, contains(c1,c2) );  // true
console.log(&#39;c1 contains c3? &#39;, contains(c1,c3) );  // false
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&#34;http://philiplei.github.io/chap2/p221.js&#34;&gt;sample answer&lt;/a&gt; is available.&lt;/p&gt;

&lt;!--
You can also iterate on the keys or values of a map. `m.keys()` and `m.values()`
return an iterable collection that contains the keys and values. And you can also use the spread operator `...` to insert the content of these collections into an array.

```JavaScript
var m = new Map([ [&#39;one&#39;, 1], [&#39;two&#39;, 2], [&#39;three&#39;, 3] ]);
for (var k of m.keys()) {
  console.log(`k = ${k}`);
}

console.log(&#39;The keys are &#39;, [...m.keys()]);
console.log(&#39;The values are &#39;, [...m.values()]);
console.log(&#39;The elements are &#39;, [...m]);
```


Example.

```JavaScript
var para = `JavaScript is a high-level, dynamic, untyped, and interpreted programming language. It has been standardized in the ECMAScript language specification. Alongside HTML and CSS, it is one of the three core technologies of World Wide Web content production; the majority of websites employ it and it is supported by all modern Web browsers without plug-ins. JavaScript is prototype-based with first-class functions, making it a multi-paradigm language, supporting object-oriented, imperative, and functional programming styles. It has an API for working with text, arrays, dates and regular expressions, but does not include any I/O, such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded.`;
// use space and punctuation marks to split the string into words
var words = para.split(/[ ,\.;\-]/);
// remove empty string
words = words.filter(w =&gt; w!==&#34;&#34;);
// change all words into lower case
words = words.map(w =&gt; w.toLowerCase()); // 116 words in the paragraph

// count number of times a word appear in the paragraph
var wordCount = new Map();
for (var w of words) {
  if (wordCount.has(w)) {
    wordCount.set(w, wordCount.get(w)+1);
  } else {
    wordCount.set(w, 1);
  }
}

// print which words appear more than once
for (var [k,v] of wordCount) {
  if (v==1) continue;
  console.log(`${k}: ${v}`);
}
```
--&gt;
</description>
    </item>
    
    <item>
      <title>2-6 Reg expression</title>
      <link>http://philiplei.github.io/basic/2-6/</link>
      <pubDate>Fri, 27 May 2016 17:05:11 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-6/</guid>
      <description>

&lt;h2 id=&#34;defining-a-regular-expression:79614a28dc841bf68e19c4136ca2bf1d&#34;&gt;defining a regular expression&lt;/h2&gt;

&lt;p&gt;First, please go through the slides for the syntax of regular expression.&lt;/p&gt;

&lt;h2 id=&#34;using-a-regexp:79614a28dc841bf68e19c4136ca2bf1d&#34;&gt;using a regexp&lt;/h2&gt;

&lt;p&gt;Use the method &lt;code&gt;regexp.test(string)&lt;/code&gt; to check whether the given string matches a regular expression. The following example checks whether the input consists of exactly 8 digits only.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = prompt (&amp;quot;Your tel please&amp;quot;);
// a pattern to match Macau tel numbers (8 digits)
var re = /^\d{8}$/;
if (re.test(s)) {
   alert(&amp;quot;Thanks.&amp;quot;);
} else {
   alert(&amp;quot;This is not a tel no.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The match method returns substrings in the string that match the regexp. If the regexp has the global flag (g), the method returns an array of all matches. Otherwise, it only returns the first match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// find all prices in the string
var s = &amp;quot;$60 + $70 = $130&amp;quot;;
var A = s.match(/\$\d+/g);
// A is [&amp;quot;$60&amp;quot;, &amp;quot;$70&amp;quot;, &amp;quot;$130&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;string.split(regexp)&lt;/code&gt; method splits the string into an array of substring. The parts were separated by delimiters matched by the regexp.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = &amp;quot;1+2*3-4&amp;quot;;
var nums = s.split(/[+\-*/]/);
// nums is [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>