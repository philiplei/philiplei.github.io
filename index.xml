<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>COMP312 labs</title>
    <link>http://philiplei.github.io/</link>
    <description>Recent content on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Oct 2016 08:23:00 +0800</lastBuildDate>
    
	<atom:link href="http://philiplei.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5-1 Designing a Web API</title>
      <link>http://philiplei.github.io/webapi/5-1/</link>
      <pubDate>Wed, 26 Oct 2016 08:23:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/5-1/</guid>
      <description>In an Ajax web app, the application server implements a Web API that provides service to the front-end JavaScript code.
A Web API is a defined set of HTTP request messages along with a definition of the structure of response messages, usually expressed in an XML or JSON format (from Wikipedia).
RPC-style Web API A common design style of Web API is RPC-style (Remote Procedure Call). A RPC-style Web API allocates one URL for each function or operation.</description>
    </item>
    
    <item>
      <title>4-1 Node.js primer</title>
      <link>http://philiplei.github.io/server/4-1/</link>
      <pubDate>Thu, 30 Jun 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-1/</guid>
      <description>This lab goes through the basics of the Node.js platform.
Quick start Node.js (https://nodejs.org) is a platform built on Chrome&amp;rsquo;s JavaScript runtime V8 for easily building fast, scalable network applications. Node.js supports the same basic JavaScript programming language as web browsers. As the first example, let&amp;rsquo;s run the following program p101.js in both browser and Node. (Follow instruction to install Node.)
// p101.js // return the largest number in an array // assume at least 1 entry, and all entries are numbers function largest (A) { var big=A[0]; for (var i=1; i&amp;lt;A.</description>
    </item>
    
    <item>
      <title>3-1 Quick start</title>
      <link>http://philiplei.github.io/client/3-1/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-1/</guid>
      <description>document tree and JavaScript libraries When a web browser loads an HTML page from a web server, it converts the HTML code into a tree formed data structure known as document tree. All user interactions in the client-side of a web app are done through this DOM tree.
The Document Object Model standard (online ref) defines a programming interface to access the document tree. Each HTML element is represented by a node in the tree.</description>
    </item>
    
    <item>
      <title>2-1 Basic data types and control</title>
      <link>http://philiplei.github.io/basic/2-1/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-1/</guid>
      <description>This lab goes through the basic data types (Number and String) and control structures of the JavaScript programming language.
Number Two basic data types in JavaScript are Number and String. There are no separate types for integers and doubles. (You define a variable x with var x. In ES6, you can also declare variables with let x and constants with const x.)
var a = 1; var b = 2e3; /* 2 * (10*10*10) */ var c; /* c is undefined */ c = a * 1.</description>
    </item>
    
    <item>
      <title>5-2 Implementing a Web API</title>
      <link>http://philiplei.github.io/webapi/5-2/</link>
      <pubDate>Wed, 26 Oct 2016 13:43:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/5-2/</guid>
      <description>In this lab, we&amp;rsquo;ll discuss implementation of the Web API in last section using Express framework.
Endpoints with GET method This section discusses the implementation of two endpoints of the Web API. Both are read-only and use GET method. They return the result in JSON data format.
   method URL function     GET /getTodo List all tasks   GET /searchTodo Search tasks that are due before the given date.</description>
    </item>
    
    <item>
      <title>4-2 NPM modules</title>
      <link>http://philiplei.github.io/server/4-2/</link>
      <pubDate>Mon, 25 Jul 2016 10:05:01 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-2/</guid>
      <description>In this lab, we will
 install module with npm install demonstrate how send HTTP requests using the request modules. cover the concept of a Node app and dependency management in package.json  Installing Modules Node.js has a built-in module called http and https for making HTTP clients and servers. They are efficient implementation of the HTTP protocol. However, the modules are low-level and not convenient to use. Therefore, the Node community has developed several modules for writing HTTP clients and servers.</description>
    </item>
    
    <item>
      <title>3-2 Select and change</title>
      <link>http://philiplei.github.io/client/3-2/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-2/</guid>
      <description>This lab shows how to select elements in the document tree using the $() jQuery function. You may then invoke methods on the resultant collection of elements.
Select by CSS selectors This part uses the example file p302.html.
The jQuery library provides a powerful function to select elements from the document tree using CSS selectors. This function is sometimes known as the jQuery function $(). When provided with a CSS selectors, it returns a collection of HTML elements that are matched by the CSS selector.</description>
    </item>
    
    <item>
      <title>2-2 Arrays and functions</title>
      <link>http://philiplei.github.io/basic/2-2/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-2/</guid>
      <description>This lab goes through the basics of the JavaScript arrays and functions.
Array An array keeps values in a sequence. Arrays can change size in run-time. You retrieve an element from an array by position. Use the operator [] to locate an element at the given index.
var a = [ 1, 3, 5, 7, 9 ]; console.log(`The second odd number is ${a[1]}.`); var empty = [ ]; // empty array empty[1] // undefined  The length property refers to the number of elements inside the array.</description>
    </item>
    
    <item>
      <title>5-3 Consuming a Web API</title>
      <link>http://philiplei.github.io/webapi/5-3/</link>
      <pubDate>Thu, 27 Oct 2016 08:43:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/5-3/</guid>
      <description>In this lab, we&amp;rsquo;ll write client-side JavaScript to consume a Web API. We&amp;rsquo;ll use jQuery library to send GET and POST requests to the Web API.
Endpoints with GET method There are two endpoints with GET method in our sample app.
   method URL function     GET /getTodo List all tasks   GET /searchTodo Search tasks that are due before the given date.    In jQuery, the basic method to send Ajax call with GET method is $.</description>
    </item>
    
    <item>
      <title>4-3 Web app routing</title>
      <link>http://philiplei.github.io/server/4-3/</link>
      <pubDate>Wed, 27 Jul 2016 10:29:04 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-3/</guid>
      <description>Express.js (official website) is a web framework to simplify development of Web applications. It supports:
 Routing – different request processing based on URL patterns Middleware – chainable processing of requests and responses Template – generate HTML output from variables  This lab covers how to define routes to capture HTTP requests for a web app / service endpoints. In addition, we&amp;rsquo;ll discuss how to generate simple HTTP responses.</description>
    </item>
    
    <item>
      <title>3-3 Creating new content</title>
      <link>http://philiplei.github.io/client/3-3/</link>
      <pubDate>Tue, 31 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-3/</guid>
      <description>This lab covers how to create new content into the document tree using $() jQuery functions and methods.
Create new HTML content You can create new HTML content by passing HTML code to the jQuery function $(htmlCode). The newly created elements are detached from the current document tree, and not displayed. To show the content, you have to attach the elements to the document tree. Run the following code in p311.</description>
    </item>
    
    <item>
      <title>2-3 Objects and JSON data</title>
      <link>http://philiplei.github.io/basic/2-3/</link>
      <pubDate>Thu, 26 May 2016 19:13:37 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-3/</guid>
      <description>This lab covers the basics of objects (as data structure). It also covers part of JSON.
Objects In JavaScript, an object is a collection of properties. Each property is a pair of name and value. You can access each property with the dot notation.
// define an object with 3 properties var peter = { firstName: &amp;quot;Peter&amp;quot;, lastName: &amp;quot;Chan&amp;quot;, age: 19 }; console.log(peter.lastName) // &amp;quot;Chan&amp;quot; peter.age ++; console.log(`${peter.firstName} is now ${peter.</description>
    </item>
    
    <item>
      <title>4-4 Web app middlewares</title>
      <link>http://philiplei.github.io/server/4-4/</link>
      <pubDate>Tue, 09 Aug 2016 15:10:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-4/</guid>
      <description>This lab demonstrates how to use middleware in general. It introduces a few common middleware, and also covers a middleware that handles form submit using GET and POST.
Middlewares In the previous lab, we saw that an Express app is essentially a sequence of routes. When a request arrives at an Express app, the app tries to find a match of the path in the order of routes in the sequence.</description>
    </item>
    
    <item>
      <title>3-4 Handling events</title>
      <link>http://philiplei.github.io/client/3-4/</link>
      <pubDate>Wed, 08 Jun 2016 15:46:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-4/</guid>
      <description>This lab covers how to handle events with event handlers using the jQuery library.
Basic event handling The basic function to register event handler is $().on(events, handler) (online reference) This method attaches the event handler (a function) to handle the events (e.g &amp;lsquo;click&amp;rsquo;, &amp;lsquo;mousemove&amp;rsquo;) to each element in the jQuery collection. There are different ways to attach event handlers, as shown below.
$(&#39;button#btn1&#39;).on(&#39;click&#39;, function(event) { // do something when the button with id=btn1 is clicked }); // rewrite using arrow function $(&#39;button#btn1&#39;).</description>
    </item>
    
    <item>
      <title>2-4 Callbacks and arrow functions</title>
      <link>http://philiplei.github.io/basic/2-4/</link>
      <pubDate>Thu, 26 May 2016 19:13:42 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-4/</guid>
      <description>Functions as first-class values Functions in JavaScript are often described as first-class values. (In fact, functions are objects, with their own properties and methods.) This means that, in many cases, if you can do something on numbers or strings, you can also do the same on functions. In particular, you can save a function in a variable, pass a function to another function, or return a function from a function.</description>
    </item>
    
    <item>
      <title>4-5 Templates and file modules</title>
      <link>http://philiplei.github.io/server/4-5/</link>
      <pubDate>Wed, 10 Aug 2016 16:21:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-5/</guid>
      <description>This lab demonstrates how to use templates in Express app. In addition, it shows how to break a JavaScript program into modules by using &amp;lsquo;file modules&amp;rsquo;.
Template engine In previous lab, we embedded HTML template inside JavaScript code to render data. This approach becomes impractical when the HTML code or the data become more complicated. A better approach is to use some template system to render data in the server side.</description>
    </item>
    
    <item>
      <title>3-5 Form controls</title>
      <link>http://philiplei.github.io/client/3-5/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-5/</guid>
      <description>This lab covers jQuery methods and events related to form control.
Text input The basic control for entering text is text input boxes. Use the method $().val() to get / set the value of a text input box.
&amp;lt;input type=&#39;text&#39; name=&#39;email&#39; value=&#39;initial value&#39;/&amp;gt; &amp;lt;script&amp;gt; // use attribute &#39;name&#39; to select the input control // use .val() to read the text value var s = $(&#39;input[name=&amp;quot;email&amp;quot;]&#39;).val(); // change the text value of the text input box $(&#39;input[name=&amp;quot;email&amp;quot;]&#39;).</description>
    </item>
    
    <item>
      <title>2-5 Defining class</title>
      <link>http://philiplei.github.io/basic/2-5/</link>
      <pubDate>Fri, 27 May 2016 17:05:08 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-5/</guid>
      <description>Object literals Many values in JavaScript are objects. In lab 2-3, we created an object as a group of properties. Each property has a name and a value. We list the properties in { }. Such objects have already some built-in methods. For example, point.toString() returns a string representation of the object, although the default implementation is not useful.
var point = { x: 2, y: 3 }; console.log(point.toString());  You can define a more useful version of .</description>
    </item>
    
    <item>
      <title>2-6 Regular expression</title>
      <link>http://philiplei.github.io/basic/2-6/</link>
      <pubDate>Mon, 12 Sep 2016 17:05:11 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-6/</guid>
      <description>Regexp object A regular expression (regexp) defines pattern used to search, replace and extract information from strings. It is a small language that many common programming languages have support for it.
A common usage of regexp is to check whether user input is correct. The following example checks whether the user input is an email address in IPM.
var s = prompt (&amp;quot;Your IPM student email address please&amp;quot;); // define a regular expression var re = /p\d{7}@ipm\.</description>
    </item>
    
    <item>
      <title>4-6 Database access</title>
      <link>http://philiplei.github.io/server/4-6/</link>
      <pubDate>Wed, 10 Aug 2016 09:14:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-6/</guid>
      <description>This lab demonstrates how to use a file-based database sqlite.
SQLite SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine (from https://www.sqlite.org/). The whole database is stored in a file, and an application can open this database directly without connecting to any server.
A popular module to access SQLite in Node is sqlite3. Install this module and update package.json with the command npm install sqlite3 --save.</description>
    </item>
    
    <item>
      <title>3-6 Templates</title>
      <link>http://philiplei.github.io/client/3-6/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-6/</guid>
      <description>When you need to display complicated JSON data in HTML with some repetitive parts, it is often more convenient to use a template library. This lab demonstrates how to use a template library called Handlebars (online reference)
Basic operation There are many HTML template systems. While their syntax can be quite different, the basic operation remains similar. It can be described as &amp;ldquo;template + context (data object) =&amp;gt; html code&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>4-7 A sample web app</title>
      <link>http://philiplei.github.io/server/4-7/</link>
      <pubDate>Thu, 20 Oct 2016 08:25:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-7/</guid>
      <description>We&amp;rsquo;ll end this chapter with the implementation of a classic web app. The app folder is /chap4-7. Copy it to a local folder, and install dependencies with the command npm install. Then run the app with the command node app.js.
The app has the following views. These views contain buttons or links to initiate actions through controllers. E.g. the view GET /list.html has a link to delete the todos.
 GET /list.</description>
    </item>
    
    <item>
      <title>3-7 Charts</title>
      <link>http://philiplei.github.io/client/3-7/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-7/</guid>
      <description>This lab is about a JavaScript charting library called Chart.js. You can use charts to visualize complicated data. In addition, this library also demonstrates a common design pattern in JavaScript: using JSON data to provide complex options.
Basic operation We call the constructor of class Chart to create a chart. The constructor accepts two parameters: the first is a &amp;lt;canvas&amp;gt; element, and the second is a JSON data object (a JavaScript object) which has at least three properties: chart type, data to be plotted, and options.</description>
    </item>
    
    <item>
      <title>3-8 Script execution in browsers</title>
      <link>http://philiplei.github.io/client/3-8/</link>
      <pubDate>Fri, 24 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-8/</guid>
      <description>In all previous example in this chapter, we put &amp;lt;script&amp;gt; elements near the end of an HTML document. The reason is that the document tree is (almost) complete when these &amp;lt;script&amp;gt; executes. Now, we&amp;rsquo;ll explain the rationale for this scheme and discuss the JavaScript execution in browsers.
&amp;lt;!doctype html&amp;gt; ... &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;content for building document tree&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt; &amp;lt;!-- load external script library --&amp;gt; &amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // embedded script &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;  Page load Page loading refers to the steps that a browser performs to load the various components of a web page.</description>
    </item>
    
    <item>
      <title>Ajax and Web API</title>
      <link>http://philiplei.github.io/webapi/</link>
      <pubDate>Wed, 26 Oct 2016 08:36:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/</guid>
      <description> Ajax and Web API This chapter goes through the design, implementation and consumption of a Web API. We conclude this chapter with an Ajax web app.
 5-1. Desigining a Web API  URL as operation, GET vs. POST input parameters as urlencoded or JSON output payload as urlencoded or JSON RPC-style  5-2. Implementing a Web API  Implement using Express  5-3. A client that consumes the Web API  Implement using jQuery   </description>
    </item>
    
    <item>
      <title>Server-side programming</title>
      <link>http://philiplei.github.io/server/</link>
      <pubDate>Thu, 30 Jun 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/</guid>
      <description>Server-side programming This chapter goes through the basics of the JavaScript programming on the server side using Node.js.
 4-1. Node primer  compare node.js and browser env install, run *.js require module event loop. timer built-in modules file I/O. fs.readFile, fs.writeFile. callback: (err, result) =&amp;gt; { } how to manage control flow. sequential.  4-2. NPM modules  npm install module request sending GET and POST. options object pattern Node app.</description>
    </item>
    
    <item>
      <title>Client-side programming</title>
      <link>http://philiplei.github.io/client/</link>
      <pubDate>Mon, 30 May 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/</guid>
      <description>Client-side programming This chapter goes through the basics of the JavaScript programming inside the Web browser environment.
 3-1 Quick start  document tree, first jQuery example select $(), change content .html(), .val(), event  3-2 select and change  select nodes in DOM tree. $(selector). jQuery collection read / change content .html() .text() .attr() .css() .addClass() fine tune jQuery collection (.eq(), .slice())  3-3 create new content  add new HTML content $(&#39;&amp;lt;html code&amp;gt;&#39;) add new / move existing.</description>
    </item>
    
    <item>
      <title>JavaScript basics</title>
      <link>http://philiplei.github.io/basic/</link>
      <pubDate>Thu, 26 May 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/</guid>
      <description>JavaScript Basics This chapter goes through the basics of the JavaScript programming language.
 2-1. Basic data types and control structures  numbers, strings, conversion, selection and looping  2-2. Arrays and functions  array basics. function statement  2-3. Objects and JSON data format  model data by mixing arrays and objects  2-4. Callbacks and arrow functions  functions as values, callback, timer, arrow function  2-5. Some built-in class: Collections and iterable objects  Object literal built-in classes: Array, Date, Map define class  2-6.</description>
    </item>
    
  </channel>
</rss>