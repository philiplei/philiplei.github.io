<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>COMP312 labs</title>
    <link>http://philiplei.github.io/</link>
    <description>Recent content on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2016 10:14:43 +0800</lastBuildDate>
    <atom:link href="http://philiplei.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Server-side programming</title>
      <link>http://philiplei.github.io/server/</link>
      <pubDate>Thu, 30 Jun 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/</guid>
      <description>

&lt;h2 id=&#34;server-side-programming&#34;&gt;Server-side programming&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;lab&lt;/strong&gt; goes through the basics of the JavaScript programming on the server side using Node.js.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4-1. Node primer

&lt;ul&gt;
&lt;li&gt;compare node.js and browser env&lt;/li&gt;
&lt;li&gt;install, run *.js&lt;/li&gt;
&lt;li&gt;require module&lt;/li&gt;
&lt;li&gt;event loop. timer&lt;/li&gt;
&lt;li&gt;built-in modules&lt;/li&gt;
&lt;li&gt;file I/O. fs.readFile, fs.writeFile. callback: (err, result) =&amp;gt; { }&lt;/li&gt;
&lt;li&gt;how to manage control flow. sequential.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-2. Events

&lt;ul&gt;
&lt;li&gt;once-off event. timer.&lt;/li&gt;
&lt;li&gt;event emitter. server.on(event, handler).&lt;/li&gt;
&lt;li&gt;npm install. line-reader. obj.on(&amp;lsquo;error&amp;rsquo;, cb)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-3. Web client

&lt;ul&gt;
&lt;li&gt;module request&lt;/li&gt;
&lt;li&gt;sending GET and POST.&lt;/li&gt;
&lt;li&gt;options object pattern&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-4. Routing in web app

&lt;ul&gt;
&lt;li&gt;Node app. package.json. npm install. npm install module &amp;ndash;save&lt;/li&gt;
&lt;li&gt;defining routes, generating response&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-5. Middleware in web app

&lt;ul&gt;
&lt;li&gt;middlewares&lt;/li&gt;
&lt;li&gt;serving static web assets&lt;/li&gt;
&lt;li&gt;process form submit with GET and POST&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-6. Template in web app

&lt;ul&gt;
&lt;li&gt;handlebars&lt;/li&gt;
&lt;li&gt;template files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-7. Database access

&lt;ul&gt;
&lt;li&gt;sqlite. SELECT, INSERT, UPDATE, DELETE&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4-8. classic web app&lt;/li&gt;
&lt;li&gt;4-8. async: flow control?&lt;/li&gt;
&lt;li&gt;advanced

&lt;ul&gt;
&lt;li&gt;promise?&lt;/li&gt;
&lt;li&gt;stream?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;app example with several routes, res.sendFile, &lt;code&gt;res.send(\&lt;/code&gt;&lt;html&gt;multiline&lt;/html&gt;`)`,
res.send json, res.status code.&lt;/li&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;li&gt;app example to check req.url, method, route.method. headers? query, post body&lt;/li&gt;
&lt;li&gt;template. use timetable JSON data&lt;/li&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A condensed view of this chap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execution model on Node: asynchronous, event loop&lt;/li&gt;
&lt;li&gt;module. NPM community. (writing module)&lt;/li&gt;
&lt;li&gt;writing web client&lt;/li&gt;
&lt;li&gt;writing web app: express, route, middleware, template, req -&amp;gt; res&lt;/li&gt;
&lt;li&gt;milestone: classic web app&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Client-side programming</title>
      <link>http://philiplei.github.io/client/</link>
      <pubDate>Mon, 30 May 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/</guid>
      <description>

&lt;h2 id=&#34;client-side-programming&#34;&gt;Client-side programming&lt;/h2&gt;

&lt;p&gt;This chapter goes through the basics of the JavaScript programming inside the Web browser environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3-1 quick start

&lt;ul&gt;
&lt;li&gt;document tree, first jQuery example&lt;/li&gt;
&lt;li&gt;select $(), change content .html(), .val(), event&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-2 select and change

&lt;ul&gt;
&lt;li&gt;select nodes in DOM tree. $(selector). jQuery collection&lt;/li&gt;
&lt;li&gt;read / change content .html() .text() .attr()  .css() .addClass()&lt;/li&gt;
&lt;li&gt;fine tune jQuery collection (.eq(), .slice())&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-3 create new content

&lt;ul&gt;
&lt;li&gt;add new HTML content  &lt;code&gt;$(&#39;&amp;lt;html code&amp;gt;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add new / move existing.  .append(), .before(), .after(), .clone()&lt;/li&gt;
&lt;li&gt;content prune and paste&lt;/li&gt;
&lt;li&gt;show JSON in HTML&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-4 handle events

&lt;ul&gt;
&lt;li&gt;mouse event: click, mousemove, mouseenter, mouseleave&lt;/li&gt;
&lt;li&gt;.on(&amp;lsquo;click&amp;rsquo;, (event)=&amp;gt; { })&lt;/li&gt;
&lt;li&gt;.data(), pass data to event handler when registering&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-5 form

&lt;ul&gt;
&lt;li&gt;text input, selection. get/set with .val()&lt;/li&gt;
&lt;li&gt;events: change, focusin, focusout&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-6 template

&lt;ul&gt;
&lt;li&gt;handlebars&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-7 Charts

&lt;ul&gt;
&lt;li&gt;charts.js&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-8 advanced concepts

&lt;ul&gt;
&lt;li&gt;event loop&lt;/li&gt;
&lt;li&gt;page loading&lt;/li&gt;
&lt;li&gt;js closure&lt;/li&gt;
&lt;li&gt;bubbling&lt;/li&gt;
&lt;li&gt;default action&lt;/li&gt;
&lt;li&gt;event delegation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript basics</title>
      <link>http://philiplei.github.io/basic/</link>
      <pubDate>Thu, 26 May 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/</guid>
      <description>

&lt;h2 id=&#34;javascript-basics&#34;&gt;JavaScript Basics&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;lab&lt;/strong&gt; goes through the basics of the JavaScript programming language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2-1. Basic data types and control structures

&lt;ul&gt;
&lt;li&gt;numbers, strings, conversion, selection and looping&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-2. Arrays and functions

&lt;ul&gt;
&lt;li&gt;array basics. function statement&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-3. Objects and JSON data format

&lt;ul&gt;
&lt;li&gt;model data by mixing arrays and objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-4. Callbacks and arrow functions

&lt;ul&gt;
&lt;li&gt;functions as values, callback, timer, arrow function&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-5. Some built-in class: Collections and iterable objects

&lt;ul&gt;
&lt;li&gt;Object literal&lt;/li&gt;
&lt;li&gt;built-in classes: Array, Date, Map&lt;/li&gt;
&lt;li&gt;define class&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2-6. Regular expression&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Others: exception, JSON, promise, closure&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4-1 Node.js primer</title>
      <link>http://philiplei.github.io/server/4-1/</link>
      <pubDate>Thu, 30 Jun 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-1/</guid>
      <description>

&lt;p&gt;This lab goes through the basics of the Node.js platform.&lt;/p&gt;

&lt;h2 id=&#34;quick-start&#34;&gt;Quick start&lt;/h2&gt;

&lt;p&gt;Node.js &lt;a href=&#34;https://nodejs.org&#34;&gt;(https://nodejs.org)&lt;/a&gt; is a platform built on Chrome&amp;rsquo;s JavaScript runtime for easily building fast, scalable network applications. Node.js supports the same basic JavaScript programming language as web browsers. Both Node.js and Google Chrome use the V8 JavaScript engine.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s run the following program in both browser and Node. (Follow instruction to install Node.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p101.js

// return the largest number in an array
// assume at least 1 entry, and all entries are numbers
function largest (A) {
  var big=A[0];
  for (var i=1; i&amp;lt;A.length; i++) {
    if (big&amp;lt;A[i]) big=A[i];
  }
  return big;
}

var N = [ 3, 7, 6, 8, 2, 5 ];

console.log(&#39;The largest is %d&#39;, largest(N));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The JavaScript engine provides some common features in both Node and browsers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript language features: control flow, variables, defining class, functions, regular expression, etc&lt;/li&gt;
&lt;li&gt;Some global objects and functions:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;timers: &lt;code&gt;setInterval()&lt;/code&gt;, &lt;code&gt;setTimeout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;date: &lt;code&gt;var today = new Date()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JSON processing: &lt;code&gt;JSON.parse()&lt;/code&gt;, &lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But Node misses some features specific to the browser platform, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM tree

&lt;ul&gt;
&lt;li&gt;usually we don&amp;rsquo;t use jQuery&amp;rsquo;s &lt;code&gt;$( )&lt;/code&gt; in Node&lt;/li&gt;
&lt;li&gt;and no interface and mouse or keyboard events&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AJAX

&lt;ul&gt;
&lt;li&gt;but there are other objects for network operations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;and other APIs in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Reference/API&#34;&gt;Web API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;event-loop-in-node&#34;&gt;Event loop in Node&lt;/h2&gt;

&lt;p&gt;Similar to JavaScript runtime in browser, Node includes an &lt;strong&gt;event loop&lt;/strong&gt; that handles events.
The event loop continues until all events are handled and there are no future events. Some common cases that trigger events are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;timer: when time is up, call a functions&lt;/li&gt;
&lt;li&gt;file I/O, network I/O, etc: When some data is ready to read, or some I/O operations finish, trigger an event and call an event handler&lt;/li&gt;
&lt;li&gt;some objects can generate events&lt;/li&gt;
&lt;li&gt;system events, e.g. Ctrl-C interrupt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trace the execution of the following program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p102.js

var N = 10; // countdown from 10
var timer;  // id of the timer

function tick() {
  if (N&amp;lt;=0) {
    console.log(&amp;quot;Time&#39;s up!&amp;quot;);
    clearInterval(timer);
  } else {
    console.log(N); N--;
  }
}

// this starts the timer
timer = setInterval(tick, 1000);

// event loop runs here ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At any time, Node runs at most 1 event handler. If there are no pending events, the event loop blocks and wait for any future events.  If Node determines that there are no more future events, it quits.&lt;/p&gt;

&lt;h2 id=&#34;modules&#34;&gt;Modules&lt;/h2&gt;

&lt;p&gt;An important feature of Node is &lt;strong&gt;modules&lt;/strong&gt;, which allows you to import new functionalities to the Node platform. The Node platform comes with some built-in modules (which are installed together with Node).  See the &lt;a href=&#34;https://nodejs.org/en/docs/&#34;&gt;online reference&lt;/a&gt; for a list of the built-in modules.&lt;/p&gt;

&lt;p&gt;To use a module, import it with &lt;code&gt;require()&lt;/code&gt;. This function returns an object that represent the module in your program. You can assign this to a variable of any convenient name.&lt;/p&gt;

&lt;p&gt;(You can use the REPL tool &lt;a href=&#34;http://mancy-re.pl/&#34;&gt;Mancy&lt;/a&gt; for experiment in this part.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var url = require(&#39;url&#39;);
var a = url.parse(&#39;http://example.com/path/file.js?a=2#hash1&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(You can also download modules from the Web and install in the Node platform. We&amp;rsquo;ll come to that later in this chapter.)&lt;/p&gt;

&lt;p&gt;The following example demonstrates how to use another built-in module &lt;code&gt;os&lt;/code&gt; and the built-in class &lt;code&gt;Date&lt;/code&gt; to monitor the amount of free memory. &lt;a href=&#34;https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_freemem&#34;&gt;(online reference)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p103.js
// show amount of free memory every second
var os = require(&#39;os&#39;);

function tick() {
  var now = new Date();
  var time = now.toTimeString().substring(0,8);
  var fm = os.freemem() / 1024;
  console.log(`${time} - ${fm}k`);
}

console.log(&#39;Start monitoring free memory. Ctrl-C to quit.&#39;)
setInterval(tick, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;evented-i-o&#34;&gt;Evented I/O&lt;/h2&gt;

&lt;p&gt;Node.js has only 1 thread to run JavaScript code. If this thread blocks to wait for I/O completion, the whole Node process is blocked and cannot process other events. Consider the following example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var fs = require(&#39;fs&#39;);
// this function blocks.
// if other event fires while Node is waiting
// for the file read operation to finish,
// the event loop CANNOT run the event handlers.
var data = fs.readFileSync(&#39;intro.txt&#39;, &#39;utf8&#39; );
console.log(&#39;File content: &#39;, data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fs.readFileSync()&lt;/code&gt; and &lt;code&gt;fs.writeFileSync()&lt;/code&gt; are two of the few synchronous I/O functions in Node. They blocks the single thread of Node while waiting for the input / output to finish.&lt;/p&gt;

&lt;p&gt;In other platforms like Java, one usually needs to create multiple &lt;strong&gt;threads&lt;/strong&gt; to handle several I/O operations at the same time (e.g. a web server handling multiple clients). Node uses &lt;strong&gt;evented I/O&lt;/strong&gt; to allow more than one I/O at the same time.  At the time you start an I/O operation, you also need to provide a &lt;strong&gt;callback&lt;/strong&gt; function.  After I/O is done, the event loop will call the callback function and pass either an error, or the result of the I/O.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var fs = require(&#39;fs&#39;);

fs.readFile(&#39;intro.txt&#39;, &#39;utf8&#39;, (err, data)=&amp;gt;{
  // if there is error, handle it, or throw it to quit
  if (err) throw err;
  // no error, the I/O result is &#39;data&#39;
  console.log(&#39;File content: &#39;, data);
} );

// at this point, file read is still in progress
// ...

// event loop waits for I/O to finish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the third parameter is the callback function. &lt;code&gt;fs.readFile&lt;/code&gt; returns immediately without blocking. However, the I/O result is not available yet.  Here is a summary of simple asynchronous file I/O operations in the module &lt;code&gt;fs&lt;/code&gt;. Refer to the &lt;a href=&#34;https://nodejs.org/dist/latest-v6.x/docs/api/fs.html&#34;&gt;online reference of module fs&lt;/a&gt; for detail.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.readFile(filename, options, callback)&lt;/code&gt; - read content from the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.writeFile(filename, content, options, callback)&lt;/code&gt; - write the given content to the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs.appendFile(filename, content, options, callback)&lt;/code&gt; - append the given content to the end of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sequential-i-o-operations&#34;&gt;Sequential I/O operations&lt;/h2&gt;

&lt;p&gt;Consider the following longer example.  We&amp;rsquo;d like to replace the word &amp;lsquo;MPI&amp;rsquo; by &amp;lsquo;IPM&amp;rsquo; in the input file &amp;lsquo;intro.txt&amp;rsquo;. The first version uses synchronous I/O. (Notice that this is just for illustration. In most Node application, you should use asynchronous I/O to allow better performance.) In this program, while Node is waiting for I/O completion, it &lt;strong&gt;cannot&lt;/strong&gt; process any other events.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p104.js
// synchronous version of read file, process and write file.
var fs = require(&#39;fs&#39;);

var data = fs.readFileSync(&#39;intro.txt&#39;, &#39;utf8&#39; );
var newdata = data.replace(/MPI/g, &#39;IPM&#39;);
fs.writeFileSync(&#39;change.txt&#39;, newdata, &#39;utf8&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The preferred method to write the same program is to use asynchronous I/O. To ensure that &lt;code&gt;writeFile&lt;/code&gt; is done &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;readFile&lt;/code&gt; returns data, call &lt;code&gt;writeFile&lt;/code&gt; in the callback for &lt;code&gt;readFile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p105.js
// asynchronous version of read file, process, and write file
var fs = require(&#39;fs&#39;);

fs.readFile(&#39;intro.txt&#39;, &#39;utf8&#39;, (err, data)=&amp;gt;{
  if (err) throw err;
  // at this moment, file read is done
  var newdata = data.replace(/MPI/g, &#39;IPM&#39;);
  // we can start file write now
  fs.writeFile(&#39;change.txt&#39;, newdata, &#39;utf8&#39;, (err)=&amp;gt;{
    if (err) throw err;
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, doing some I/O operations in sequence would involve nesting callback functions. The result is sometimes known as &lt;strong&gt;callback hell&lt;/strong&gt; in the Node community.  You can sometimes reduce callback nesting by moving the callback to top level functions.  The following rewrite of the above program demonstrates this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p105.js rewrite: move callback to top level functions
var fs = require(&#39;fs&#39;);

function writeDone (err) {
  if (err) throw err;
}

function readDone (err, data) {
  if (err) throw err;
  var newdata = data.replace(/MPI/g, &#39;IPM&#39;);
  fs.writeFile(&#39;change.txt&#39;, newdata, &#39;utf8&#39;, writeDone);
}

fs.readFile(&#39;intro.txt&#39;, &#39;utf8&#39;, readDone);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a program to combine two text file &amp;lsquo;in1.txt&amp;rsquo; and &amp;lsquo;in2.txt&amp;rsquo; to an output text file &amp;lsquo;out.txt&amp;rsquo;.
Use asynchronous I/O functions &lt;code&gt;fs.readFile()&lt;/code&gt; and &lt;code&gt;fs.writeFile()&lt;/code&gt;. (solution: &lt;a href=&#34;http://philiplei.github.io/chap4-1/p106.js&#34;&gt;p106.js&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program to monitor the amount of available memory to a log file &amp;lsquo;freemem.txt&amp;rsquo;. Hints: use &lt;code&gt;fs.appendFile()&lt;/code&gt; to append log message to the txt file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;example: read a json, do sth, write output&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-1 Quick start</title>
      <link>http://philiplei.github.io/client/3-1/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-1/</guid>
      <description>

&lt;h2 id=&#34;document-tree-and-javascript-libraries&#34;&gt;document tree and JavaScript libraries&lt;/h2&gt;

&lt;p&gt;When a web browser loads an HTML page from a web server, it converts the HTML code into a tree structured data structure known as &lt;dfn&gt;document tree&lt;/dfn&gt;. All user interaction in the client-side of a web app is done through this DOM tree.&lt;/p&gt;

&lt;p&gt;The Document Object Model [(online ref)][moz-dom] standard defines a programming interface to access the document tree. Each HTML element is represented by a node in the tree. DOM defines the properties, methods and events for these nodes, and the nodes are accessible to JavaScript as objects. In summary, DOM defines how JavaScript code can access and manipulate nodes in a document tree, and all dynamic effects in web pages are realized through document tree manipulation. Demo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;document tree as tree of elements&lt;/li&gt;
&lt;li&gt;node as JavaScript objects: properties and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, using DOM directly takes a lot of efforts. (DOM is complex and verbose.) Developers usually use some higher level JavaScript library to do client-side programming (e.g. &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;Facebook React&lt;/a&gt;, &lt;a href=&#34;https://angular.io/&#34;&gt;Google AngularJS&lt;/a&gt;)  In this chapter, we&amp;rsquo;ll use a popular library called &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A short description of the jQuery library from the &lt;a href=&#34;http://jquery.com/&#34;&gt;official site&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;first-example&#34;&gt;First example&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&#34;http://philiplei.github.io/chap3/p301.html&#34;&gt;example&lt;/a&gt; shows several features in client-side web app programming.
In this app, the user enters two numbers in text input boxes, presses a button to calculate the sum, and displays the result in the web page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;First example&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;This example adds two numbers.&amp;lt;/p&amp;gt;
  &amp;lt;!-- define user interface with HTML --&amp;gt;
  &amp;lt;p&amp;gt;a: &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;numA&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;b: &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;numB&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;button type=&#39;button&#39; id=&amp;quot;btnAdd&amp;quot;&amp;gt;Calculate!&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;a+b = &amp;lt;span id=&amp;quot;ans&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;!-- load the jQuery library --&amp;gt;
  &amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    // register event handler for &#39;click&#39; on the button
    $(&#39;#btnAdd&#39;).on(&#39;click&#39;, e =&amp;gt; {
      // read value in input boxes and convert to number
      var a = $(&#39;#numA&#39;).val();
      a = parseInt(a);
      var b = $(&#39;#numB&#39;).val();
      b = parseInt(b);
      // calculate sum and show answer in the &amp;lt;span&amp;gt; element
      $(&#39;#ans&#39;).html(a+b);
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the example shows, there are several common steps in the client-side web app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select elements in DOM tree. jQuery provides the function &lt;code&gt;$(CSS selector)&lt;/code&gt; to select elements with CSS selectors.&lt;/li&gt;
&lt;li&gt;read content of elements. The above example uses the method &lt;code&gt;$().val()&lt;/code&gt; to read input in text box.&lt;/li&gt;
&lt;li&gt;change content of elements. The example uses the method &lt;code&gt;$().html()&lt;/code&gt; to set the element content&lt;/li&gt;
&lt;li&gt;handle events. You can register event handlers for certain event with the method &lt;code&gt;.on(event, callback)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-note-on-loading-javascript-code&#34;&gt;A note on loading JavaScript code&lt;/h2&gt;

&lt;p&gt;In most of our examples, we put JavaScript code near the end of the HTML document. We typically put them before the end tag &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;. This makes sure that the DOM tree is complete when the JavaScript code runs.&lt;/p&gt;

&lt;p&gt;We use the following HTML code to load jQuery library from our local web site (same location as the HTML code). In a more complicated web app, it is better to put JavaScript libraries in their own folder. You can also load the jQuery library from one of the public CDN.  Refer to these pages for detail: &lt;a href=&#34;https://code.jquery.com/&#34;&gt;jQuery CDN&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/speed/libraries/&#34;&gt;Google Hosted Library&lt;/a&gt; and &lt;a href=&#34;https://cdnjs.com/libraries/jquery/&#34;&gt;cdnjs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After loading the jQuery library, we can load our own code. You can save the code in a separate &lt;code&gt;js&lt;/code&gt; file and load with a syntax similar to above. Alternatively, you can &lt;strong&gt;embed&lt;/strong&gt; the code within a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, as in our example.&lt;/p&gt;

&lt;p&gt;We embed JavaScript code in many of our example for sake of simplicity. However, in production code, it is generally recommended to remove JavaScript code from HTML file and move them to external JavaScript file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2-1 Basic data types and control</title>
      <link>http://philiplei.github.io/basic/2-1/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-1/</guid>
      <description>

&lt;p&gt;This lab goes through the basic data types (Number and String) and control structures of the JavaScript programming language.&lt;/p&gt;

&lt;h2 id=&#34;number&#34;&gt;Number&lt;/h2&gt;

&lt;p&gt;Two basic data types in JavaScript are &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&#34;&gt;Number&lt;/a&gt; and String.
There are no separate types for integers and doubles. (You define a variable &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;var x&lt;/code&gt;. In ES6, you can also declare variables with &lt;code&gt;let x&lt;/code&gt; and constants with &lt;code&gt;const x&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 1;
var b = 2e3;  /* 2 * (10*10*10) */
var c;  /* c is undefined */
c = a * 1.5 + b;
console.log(c);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the basic arithmetic operators (+, -, *, /, %) &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators&#34;&gt;(ref)&lt;/a&gt;, the Math built-in object &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math&#34;&gt;(ref)&lt;/a&gt; provides some useful functions (e.g. &lt;code&gt;Math.random()&lt;/code&gt;, &lt;code&gt;Math.floor()&lt;/code&gt;, &lt;code&gt;Math.ceil()&lt;/code&gt;, &lt;code&gt;Math.round()&lt;/code&gt;, &lt;code&gt;Math.pow()&lt;/code&gt;, &lt;code&gt;Math.sqrt()&lt;/code&gt; and trigonometric functions.)&lt;/p&gt;

&lt;p&gt;(Btw, the trailing semicolons of statements may be omitted if there is only 1 statement on a line.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var r = 10
var area = Math.PI * r * r
// same as Math.PI * Math.pow(r,2)

// a number from 1,2,3,4,5 and 6
// Math.random() returns a number between 0 and 1
var dice = Math.floor(Math.random()*6)+1

var x = Math.sin(Math.PI/2)  // 1
var y = Math.sqrt(-1) // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;

&lt;p&gt;Strings can be delimited with single quote or double quote. Join two strings
with &lt;code&gt;+&lt;/code&gt;. Use the property &lt;code&gt;.length&lt;/code&gt; to check number of characters in a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var user = &amp;quot;peterchan&amp;quot;;
var domain = &#39;ymail.com&#39;;
var addr = user + &amp;quot;@&amp;quot; + domain;
var n = &amp;quot;seven&amp;quot;.length;  // 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String literals use backslash &lt;code&gt;\&lt;/code&gt; to escape character, e.g. &lt;code&gt;\&amp;quot;&lt;/code&gt;, &lt;code&gt;\&#39;&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// no need to escape, but if you may
var s1 = &#39;A string with &amp;quot;double quoted text&amp;quot;.&#39;
// escape the backlash character
var s2 = &#39;c:\\inetpub\\index.html&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String literals can also use methods defined in the String class &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&#34;&gt;(ref)&lt;/a&gt;. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var text = &#39;Mississippi&#39;;
var p = text.indexOf(&#39;ss&#39;); // location of &#39;ss&#39;
var mesg = &amp;quot;All the best&amp;quot;;
p = mesg.slice(0,3); // &#39;All&#39;
p = mesg.slice(4); // &#39;the best&#39;
p = mesg.slice(-4); // &#39;best&#39;
p = mesg.slice(-4,-2); // &#39;be&#39;

var A = &amp;quot;202.175.3.3&amp;quot;.split(&#39;.&#39;);
// an array [&#39;202&#39;, &#39;175&#39;, &#39;3&#39;, &#39;3&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conversion&#34;&gt;Conversion&lt;/h2&gt;

&lt;p&gt;User input are usually returned as string. Before calculation, use &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;parseFloat()&lt;/code&gt; to convert the string into an integer / floating point number.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = &amp;quot;3.14&amp;quot;;
// unexpected result of string concatenation
console.log(s+1);
var pi = parseFloat(s);
console.log(pi+1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are various methods to change a number into a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var n = 12;
var s1 = n.toString();  // &amp;quot;12&amp;quot;
var s2 = &#39;&#39; + n; // automatic conversion in string concatenation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new features in ES6 is &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&#34;&gt;template string&lt;/a&gt;.
Template strings support interpolation. They evaluate JavaScript expressions embedded in &lt;code&gt;${}&lt;/code&gt; and insert the result into the string. Notice the back ticks used to delimit a template string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var user = &amp;quot;Peter&amp;quot;;
var age = 18;
var s = `${user}&#39;s age is ${age}`;
console.log(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A longer example to illustrate number-string conversion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = window.prompt(&#39;Enter radius of the circle&#39;);
var r = parseFloat(s);
console.log(`Area = ${Math.PI * r * r}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;

&lt;p&gt;You can compare numbers and strings using the operators &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.
Comparison results are either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, which are the only two values in &lt;code&gt;boolean&lt;/code&gt; data type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;quot;apple&amp;quot; == &amp;quot;Apple&amp;quot; // false
&amp;quot;apple&amp;quot; &amp;lt; &#39;banana&#39; // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first four operators may convert the data if they are of different data type. It is especially confusing if you compare numbers with strings. JavaScript converts strings into numbers before comparison. In general, it is better to do the conversion by yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;quot;1&amp;quot; == 1.0 // true
3 == &#39;3.0&#39; // true
&#39;3&#39; == &#39;3.0&#39; // false!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some authors recommend the usage of &lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; in comparison. The operator &lt;code&gt;===&lt;/code&gt; &lt;strong&gt;does not convert&lt;/strong&gt; values before comparison. Similarly, &lt;code&gt;!==&lt;/code&gt; checks whether two values are not equal without automatic type conversion.&lt;/p&gt;

&lt;p&gt;Similar to Java, you can use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; to combine comparison tests.&lt;/p&gt;

&lt;h2 id=&#34;control-structure&#34;&gt;Control structure&lt;/h2&gt;

&lt;p&gt;The control structure if, for and while are similar to those in Java. Please read the online reference of &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else&#34;&gt;if&amp;hellip;else&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for&#34;&gt;for&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while&#34;&gt;while&lt;/a&gt; and
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch&#34;&gt;switch&lt;/a&gt; for detail.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;if&lt;/code&gt; to solve quadratic equations &lt;img src=&#34;http://philiplei.github.io/chap2/quadratic.png&#34; height=&#39;60&#39;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = 1, b = -3, c = 2;  // roots are 1 and 2
// var a = 1, b = 0, c = 1;  // roots are i and -i

var det = b * b - 4 * a * c;
var root1, root2;
if (det&amp;gt;=0) {
  // these two are Number
  root1 = (-b - Math.sqrt(det)) / (2*a);
  root2 = (-b + Math.sqrt(det)) / (2*a);
} else {
  // these two are String.. sorry, no complex number support
  root1 = `${-b/2/a} - ${Math.sqrt(-det)/2/a}i`;
  root2 = `${-b/2/a} + ${Math.sqrt(-det)/2/a}i`;
}
console.log(`${a} x^2 + ${b} x + ${c} = 0`);
console.log(`The roots are ${root1} and ${root2}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examples on loops.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// calculate 1+2+3+...+10;
var sum = 0;
for (var k=1; k&amp;lt;=10; k++) {
  sum += k;
}
console.log(`The sum of 1+2+...+10 = ${sum}.`);

// calculate 1*1+2*2+...+n*n, where n*n&amp;lt;100;
var i = 1; var sum = 0;
while (i*i&amp;lt;100) {
  sum += i*i;
  i++;
}
console.log(`The sum of squares &amp;lt; 100 is ${sum}.`)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-note-on-loose-typing&#34;&gt;A note on loose typing&lt;/h2&gt;

&lt;p&gt;You might have noticed that when you define a variable with &lt;code&gt;var x&lt;/code&gt;, you don&amp;rsquo;t need to specify a data type. A JavaScript variable is not tied to a specific data type in declaration, and can hold values of different data types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var x = 10;
x++;  // x is a Number
x = x.toString(2);  // binary representation
console.log(x); // x is now a String
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a program to calculate the sum of even positive numbers up to 30.
&lt;i&gt;(The answer should be 240)&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following program asks the user a number &lt;code&gt;n&lt;/code&gt;, and print a &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt; squares to console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var s = window.prompt(&#39;Enter size of the square&#39;);
/* convert the input string into a number */
var n = parseInt(s);
/* build a line with n stars */
var line = &#39;&#39;;
for (var i=0; i&amp;lt;n; i++) { line = line + &#39;* &#39;; }
/* build a square with n lines */
var sqr = &#39;&#39;;
for (i=0; i&amp;lt;n; i++) { sqr = sqr + line + &#39;\n&#39;;}
console.log(sqr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify the program to print an empty square.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * * * *
*       *
*       *
*       *
* * * * *
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>4-2 Events</title>
      <link>http://philiplei.github.io/server/4-2/</link>
      <pubDate>Fri, 22 Jul 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-2/</guid>
      <description>

&lt;p&gt;This lab goes through events and event emitters in Node.js.&lt;/p&gt;

&lt;h2 id=&#34;once-off-anonymous-events&#34;&gt;Once-off anonymous events&lt;/h2&gt;

&lt;p&gt;In Node, many asynchronous I/O operations has a callback parameter. These operations generate an once-off event when the I/O completes (with data or error). The event is appended to the event queue and the event loop periodically extracts the event in the front of queue and executes the registered event handler (the callback).&lt;/p&gt;

&lt;p&gt;You can register 1 and only 1 callback for these once-off events.&lt;/p&gt;

&lt;p&gt;Usually, the first parameter of the callback is an error object. Since the callback is run by the event loop (and not by any other functions), throwing an error inside the callback will quit the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;fs.readFile(&#39;in.txt&#39;, &#39;utf8&#39;, (error, data) =&amp;gt; {
  if (error) throw error;
  // no error, can process the result data of the I/O operation
  // ...
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timer-events&#34;&gt;Timer events&lt;/h2&gt;

&lt;p&gt;JavaScript timers &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; also trigger anonymous events. &lt;code&gt;setTimeout()&lt;/code&gt; generates an once-off event. On the other hand, &lt;code&gt;setInterval()&lt;/code&gt; generates events repeatedly until you clear the timer by &lt;code&gt;clearInterval()&lt;/code&gt;.  The Node process does not quit when there is an active timer that may trigger events in the future. (Advanced: &lt;code&gt;timer.unref()&lt;/code&gt; affects this.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var n = 1;
var timer = setInterval(
  ()=&amp;gt;{
    console.log(`tick ${n++}`);
  },
  1000
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;event-emitters&#34;&gt;Event emitters&lt;/h2&gt;

&lt;p&gt;Objects that inherit from the class &lt;code&gt;EventEmitter&lt;/code&gt; &lt;a href=&#34;https://nodejs.org/dist/latest-v6.x/docs/api/events.html&#34;&gt;(online reference)&lt;/a&gt; can also trigger events. An event emitter is similar to DOM node in browsers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an object may generate several kinds of events, each identified with a name, e.g. &amp;lsquo;data&amp;rsquo;, &amp;lsquo;error&amp;rsquo;&lt;/li&gt;
&lt;li&gt;you can register a event handler with &lt;code&gt;obj.on(event, callback)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;you can register more than 1 event handler for an event. When the object triggers the event, the event loop will runs the event handler one by one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A common example of event emitters is a basic HTTP server written in Node. (See code below)
When the http server receives an HTTP request from web browsers, it triggers an event &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p201.js
var http = require(&#39;http&#39;);
var server = http.createServer();

server.on(&#39;request&#39;, (req, resp) =&amp;gt; {
  console.log(`request: url=${req.url}`);
  resp.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
  resp.write(&#39;Hello World \n&#39;);
  // you can resp.write() more ...
  resp.end();
});

server.listen(3000, () =&amp;gt; {
  console.log(&#39;Server running at http://localhost:3000/&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-modules&#34;&gt;Installing modules&lt;/h2&gt;

&lt;p&gt;Next, we use an external module to demonstrate more features of EventEmitter.&lt;/p&gt;

&lt;p&gt;Suppose we have a large text file that we want to process line by line. We don&amp;rsquo;t want to read the text file completely into memory buffer using a call to &lt;code&gt;fs.readFile()&lt;/code&gt;.  The built-in object &lt;code&gt;ReadableStream&lt;/code&gt; returned by &lt;code&gt;fs.createReadStream&lt;/code&gt; can stream the file content, but we still need to detect line breaks. Fortunately, the Node.js community has ready-to-use solution for this problem, published as &lt;strong&gt;modules&lt;/strong&gt; in &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;https://www.npmjs.com/&lt;/a&gt;.  For example, you can use the module &lt;a href=&#34;https://www.npmjs.com/package/linereader&#34;&gt;linereader&lt;/a&gt; to easily read a text file line-by-line.&lt;/p&gt;

&lt;p&gt;Before using the module, install it in command line with &lt;code&gt;npm install&lt;/code&gt;. Put your JavaScript program in a folder, and while in that folder, run the command &lt;code&gt;npm install linereader&lt;/code&gt;.  You&amp;rsquo;ll see that the command &lt;code&gt;npm&lt;/code&gt; installs the module in a local folder called &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After installation, you can use the module with &lt;code&gt;require(&#39;linereader&#39;)&lt;/code&gt;.  The source code of p201.js is listed below. The module exports a &lt;code&gt;class&lt;/code&gt;, which provides a constructor to create an object that reads a given file line-by-line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p203.js
// read a text file line by line
var LineReader = require(&#39;linereader&#39;);

var lr = new LineReader(&#39;./intro.txt&#39;);

lr.on(&#39;error&#39;, (err) =&amp;gt; {
  console.log(err);
  lr.close();
});

lr.on(&#39;line&#39;, (lineno, line) =&amp;gt; {
  console.log(`${lineno}  ${line}`);
});

lr.on(&#39;end&#39;, () =&amp;gt; {
  console.log(&amp;quot;== end ==&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object is an &lt;code&gt;EventEmitter&lt;/code&gt;. It generates three kinds of events.  For each line read, it generates a &lt;code&gt;line&lt;/code&gt; event. The event handler for this event has two parameters: line number, and the line content. At file end, the object generates the &lt;code&gt;end&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;The last kind of events generated by the line reader object is &lt;code&gt;error&lt;/code&gt;.
This special event reports error and demonstrates an important difference between event emitters and once-off events. The object triggers the &lt;code&gt;error&lt;/code&gt; event when its operation hits an error. If there is no event handler registered for &lt;code&gt;error&lt;/code&gt;, the object will throw an exception and the Node process quits.&lt;/p&gt;

&lt;p&gt;Now, try to generate an &lt;code&gt;error&lt;/code&gt; event by changing the file name to an non-existing file.&lt;/p&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;TODO TODO&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-2 Select and change</title>
      <link>http://philiplei.github.io/client/3-2/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-2/</guid>
      <description>

&lt;p&gt;This lab shows how to select elements in the document tree using the &lt;code&gt;$()&lt;/code&gt; jQuery function. You may then invoke methods on the resultant collection of elements.&lt;/p&gt;

&lt;h2 id=&#34;select-by-css-selectors&#34;&gt;Select by CSS selectors&lt;/h2&gt;

&lt;p&gt;This part uses the example file &lt;a href=&#34;http://philiplei.github.io/chap3/p302.html&#34;&gt;p302.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The jQuery library provides a powerful function to select elements from the document tree using CSS selectors. This function is sometimes known as the jQuery function &lt;code&gt;$()&lt;/code&gt;. When provided with a CSS selectors, it returns a collection of HTML elements that are matched by the CSS selector.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#mesg&#39;)&lt;/code&gt; selects the element with id = mesg&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;.big&#39;)&lt;/code&gt; selects all elements that belong to class &amp;lsquo;big&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;a&#39;)&lt;/code&gt; selects all elements of type &lt;code&gt;a&lt;/code&gt; (i.e. all hyperlinks)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;a[href^=&amp;quot;http&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements with &amp;lsquo;href&amp;rsquo; attribute that starts with &amp;ldquo;http&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;img[alt=&amp;quot;tiger&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with &amp;lsquo;alt&amp;rsquo; attribute that equals to &amp;ldquo;tiger&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;img[src$=&amp;quot;png&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with &amp;lsquo;src&amp;rsquo; attribute that ends with &amp;ldquo;png&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;img[src*=&amp;quot;tiger&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with &amp;lsquo;src&amp;rsquo; attribute that &lt;em&gt;contains&lt;/em&gt; &amp;ldquo;tiger&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;change-content-and-attributes&#34;&gt;Change content and attributes&lt;/h2&gt;

&lt;p&gt;The result of &lt;code&gt;$(selector)&lt;/code&gt; is a JavaScript object with many built-in methods. This is often called a jQuery collection. You typically use the methods to manipulate the HTML elements in a collection. The following retrieve or change the content of the selected elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).html()&lt;/code&gt; returns the HTML content of the first element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).html(value)&lt;/code&gt; sets the content of all the elements in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).text()&lt;/code&gt; concatenates and returns the text content of all the elements in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).text(value)&lt;/code&gt; sets the content of all the elements in the collection, and escapes the value with HTML entities, if required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the attributes (e.g. src of &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;), use the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).attr(attrName)&lt;/code&gt; retrieves the attribute value of the named attribute of the first element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).attr(attrName, value)&lt;/code&gt; sets the attribute value of the named attribute of all elements in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Write a JavaScript program to display the Chinese birth sign for a given year birth. Start your work with &lt;a href=&#34;http://philiplei.github.io/chap3/p303.html&#34;&gt;p303.html&lt;/a&gt;. Refer to &lt;a href=&#34;http://philiplei.github.io/chap3/p303-done.html&#34;&gt;sample answer&lt;/a&gt; for a sample run.&lt;/p&gt;

&lt;p&gt;To make the problem simpler, assume that the birth sign for a whole year is the same. For example, the birth sign for the year 2008 is rat. (In case you don&amp;rsquo;t know what birth sign is, please try &lt;a href=&#34;https://www.travelchinaguide.com/intro/social_customs/zodiac/&#34;&gt;this web site&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;select-by-structure&#34;&gt;Select by structure&lt;/h2&gt;

&lt;p&gt;When the HTML elements you want to select are embedded in other elements, you can use descendant selector, child selector and pseudo-class like &lt;code&gt;:nth-child(n)&lt;/code&gt;. Test the following collection in the example file &lt;a href=&#34;http://philiplei.github.io/chap3/p304.html&#34;&gt;p304.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&#39;table#marks td.fail&#39;)&lt;/code&gt; selects some table cells &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; inside a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; with id = &amp;lsquo;marks&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;ol &amp;gt; li:first-child&#39;)&lt;/code&gt; selects the first child of &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;ol  li:first-child&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; that is itself a first child. The element must be inside &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to do your own processing on the elements in a jQuery collection, iterate the collection with a &lt;code&gt;for .. of&lt;/code&gt; loop.  Notice that each element retrieved by &lt;code&gt;for .. of&lt;/code&gt; loop is a DOM element object. To use jQuery methods, convert the object into a jQuery collection with &lt;code&gt;$()&lt;/code&gt;.
Test the following in &lt;a href=&#34;http://philiplei.github.io/chap3/p304.html&#34;&gt;p304.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// this example adds 1 mark to exam of everybody!
// first, select all cells in the table body
var $cells = $(&#39;table#marks tbody td:nth-child(3)&#39;);
// for each HTML element in the jQuery collection ...
for (var c of $cells) {
  // use $() to make the DOM node into a jQuery collection
  // then, we can use .text() to read content
  var mark = $(c).text();
  mark = parseInt(mark);
  $(c).text(mark+1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;$().each()&lt;/code&gt; method  (see &lt;a href=&#34;http://api.jquery.com/each/&#34;&gt;online reference&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// same effect as above, rewritten using $().each()
// first, select all cells in the table body
var $cells = $(&#39;table#marks tbody td:nth-child(3)&#39;);
// for each HTML element in the jQuery collection ...
$cells.each( (idx, c) =&amp;gt; {
  // use $() to make the DOM node into a jQuery collection
  // then, we can use .text() to read content
  var mark = $(c).text();
  mark = parseInt(mark);
  $(c).text(mark+1);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes, you want to search for elements under a subtree of the DOM tree.  You can use &lt;code&gt;$().find(selector)&lt;/code&gt; to search for elements under the current matched set. For example, &lt;code&gt;$(&#39;div#a&#39;).find(&#39;img&#39;)&lt;/code&gt; will return all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; that are inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with id = a.  Notice that &lt;code&gt;$(&#39;div#a&#39;).find(&#39;img&#39;)&lt;/code&gt; gives the same jQuery collection as &lt;code&gt;$(&#39;div#a img&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$().find(selector)&lt;/code&gt; selects descendants under each element in the jQuery collection. The descendants must match the selector, if specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().children(selector)&lt;/code&gt; selects direct children under each element in the jQuery collection. The children must match the selector, if specified.&lt;/li&gt;
&lt;li&gt;Similarly, you can find the parents &lt;code&gt;$().parent()&lt;/code&gt; or siblings &lt;code&gt;$().next()&lt;/code&gt;, &lt;code&gt;$().prev()&lt;/code&gt;, &lt;code&gt;$().siblings()&lt;/code&gt; of elements in a jQuery collection.   See &lt;a href=&#34;https://api.jquery.com/category/traversing/tree-traversal/&#34;&gt;online reference&lt;/a&gt; for detail.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this example. We want to calculate the final mark for the students in &lt;code&gt;table#marks&lt;/code&gt;. Final mark = 40% x test mark + 60% x exam mark. Run this example in &lt;a href=&#34;http://philiplei.github.io/chap3/p304.html&#34;&gt;p304.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// for each row in the table body
for (var row of $(&#39;#marks tbody tr&#39;)) {
  // get the test mark from the 2nd cell
  var testmark = $(row).find(&#39;td:nth-child(2)&#39;).text();
  testmark = parseFloat(testmark);
  // get the exam mark from the 3rd cell
  var exammark = $(row).find(&#39;td:nth-child(3)&#39;).text();
  exammark = parseFloat(exammark);
  // calculate final mark and show it in the 4th cell
  var final = testmark * 0.4 + exammark * 0.6;
  $(row).find(&#39;td:nth-child(4)&#39;).text(Math.round(final));  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;select-by-position&#34;&gt;Select by position&lt;/h2&gt;

&lt;p&gt;You can select elements in a jQuery collection by position.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).eq(n)&lt;/code&gt; selects a single element at position &lt;code&gt;n&lt;/code&gt; from the jQuery collection. &lt;code&gt;n&lt;/code&gt; starts from 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).length&lt;/code&gt; returns the number of elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).slice(m,n)&lt;/code&gt; selects a range of elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercise-1&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add JavaScript code to &lt;a href=&#34;http://philiplei.github.io/chap3/p305.html&#34;&gt;p305.html&lt;/a&gt; to fill in the numbers in the multiplication table &lt;code&gt;table#multitable&lt;/code&gt; when the user clicks the button below the table. You can refer to the output of the &lt;a href=&#34;http://philiplei.github.io/chap3/p305-done.html&#34;&gt;sample answer&lt;/a&gt;. However, before attempting to solve the questions, don&amp;rsquo;t read the source code of the answer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is a tic tac toe game board in the file &lt;a href=&#34;http://philiplei.github.io/chap3/p306.html&#34;&gt;p306.html&lt;/a&gt;. Write a function &lt;code&gt;show(stones)&lt;/code&gt; to set the game board according to the parameter, which is an array of 9 elements. An element of 0 corresponds to a circle, an element of 1 corresponds to a cross, and an element of 9 corresponds to an empty cell. Refer to the &lt;a href=&#34;http://philiplei.github.io/chap3/p306-done.html&#34;&gt;sample answer&lt;/a&gt; for a sample run.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;change-css-styles&#34;&gt;Change CSS styles&lt;/h2&gt;

&lt;p&gt;There are two ways to change the CSS styles of elements. The first method is to add inline style with &lt;code&gt;$().css()&lt;/code&gt;. Try the examples in &lt;a href=&#34;http://philiplei.github.io/chap3/p307.html&#34;&gt;p307.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).css(property, value)&lt;/code&gt; sets the CSS property to the specified value for all elements in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you need to set many CSS properties, a more organized method is to write the style change as style rules in CSS style sheet. Assign the style rules to a class, and add the class to the element in runtime. This approach also makes it easy to &amp;lsquo;undo&amp;rsquo; the style change by removing the class from the element. Try the examples in &lt;a href=&#34;http://philiplei.github.io/chap3/p308.html&#34;&gt;p308.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).addClass(className)&lt;/code&gt; adds the specified class to the elements in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).removeClass(className)&lt;/code&gt; removes the specified class from the elements in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, define a style rule for the table content and apply the rule to the table element in JavaScript. You may use the following sample.  When you&amp;rsquo;re done, your answer should &lt;a href=&#34;http://philiplei.github.io/chap3/p308-done.html&#34;&gt;look like this&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.mystyle tr:nth-child(even) {
  background-color: rgba(50,90,200,0.9);
}
.mystyle tbody td:nth-child(1) { font-weight: bold; }
.mystyle td:nth-child(2) { width: 100px; }
.mystyle td { border: none !important; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(&#39;table#z&#39;).addClass(&#39;mystyle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise-2&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Add JavaScript code to &lt;a href=&#34;http://philiplei.github.io/chap3/p309.html&#34;&gt;p309.html&lt;/a&gt; to show student&amp;rsquo;s name and mark. Complete the function &lt;code&gt;show()&lt;/code&gt; according to the comment. You can refer to the output of the &lt;a href=&#34;http://philiplei.github.io/chap3/p309-done.html&#34;&gt;sample answer&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function show(name, mark) {
  // display the name in span#name
  // display the mark in span#mark
  // set the width of div#bar to the 2 * mark pixel
  // set its color to
  //    &#39;red&#39; if mark&amp;lt;50,
  //    &#39;yellow&#39; if it is between 50 and 80, and
  //    &#39;green&#39; if it is over 80.
  // your work ...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2-2 Arrays and functions</title>
      <link>http://philiplei.github.io/basic/2-2/</link>
      <pubDate>Thu, 26 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-2/</guid>
      <description>

&lt;p&gt;This lab goes through the basics of the JavaScript arrays and functions.&lt;/p&gt;

&lt;h2 id=&#34;array&#34;&gt;Array&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&#34;&gt;array&lt;/a&gt; keeps values in a sequence. Arrays can change size in run-time. You retrieve an element from an array by position. Use the operator &lt;code&gt;[]&lt;/code&gt; to locate an element at the given index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [ 1, 3, 5, 7, 9 ];
console.log(`The second odd number is ${a[1]}.`);

var empty = [ ];  // empty array
empty[1] // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;length&lt;/code&gt; property refers to the number of elements inside the array.
A common method to iterate an array is to use &lt;code&gt;for&lt;/code&gt; loop. You can read and write elements inside the loop using &lt;code&gt;[ ]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [ 2, 3, 5, 7, 11 ] ;  // small primes
for (var i=0; i&amp;lt;p.length; i++) {
  console.log(p[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6 has a new control structure &lt;code&gt;for of&lt;/code&gt; to iterate arrays and other iterable objects.
You can use it to &lt;strong&gt;read&lt;/strong&gt; the entries of an array one by one.
This control structure is convenient when you only need to access the content of an array, but not the position.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [ 2, 3, 5, 7, 11 ] ;  // small primes
for (var x of p) {
  console.log(x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you need read-only access to the entries and their position, use the method &lt;code&gt;.entries()&lt;/code&gt; of Array. The method is an iterable list of tuples &lt;code&gt;[index, value]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var num = [ &#39;zero&#39;, &#39;um&#39;, &#39;dois&#39;, &#39;tres&#39; ];
for (var [idx, s] of num.entries()) {
  console.log(`In Portuguese, ${s} means ${idx}.`)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-array-methods&#34;&gt;Basic array methods&lt;/h2&gt;

&lt;p&gt;Arrays are objects in JavaScript and have some built-in methods. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&#34;&gt;online reference&lt;/a&gt; for a list of all methods.
The following shows some common methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var A = [2,4];
A.push(6)  // A becomes [2,4,6]
A.pop(); // returns 6. A becomes [2,4]
A.unshift(0); // A becomes [0,2,4]
A.shift(); // returns 0

var b = [202,175,3,3];
var s = b.join(&#39;.&#39;); // &amp;quot;202.175.3.3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays are useful to keep some values in order. The following example generates prime numbers less than 200. Is also demonstrates the usage of &lt;code&gt;continue&lt;/code&gt; and loop label to force the next iteration.
Please refer to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue&#34;&gt;online help&lt;/a&gt; for the detail usage of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [2, 3, 5, 7];
// give a label to the first for loop
loop1:
for (var k=9; k&amp;lt;200; k+=2) {
  loop2:
  for (var n of p) {
    // if k is divisible by a prime in p, continue onto k+2
    if (k % n == 0) continue loop1;
  }
  // after the above for loop, k is verified as prime
  p.push(k);
}
console.log(p);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;There are two ways to define functions: the &lt;code&gt;function&lt;/code&gt; keyword and arrow functions. This lab covers the first. We use a function to group some statements that can be reused.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// draw a right angle triangle of height n
function draw (n) {
  var out = &amp;quot;&amp;quot;;
  for (var y=0; y&amp;lt;n; y++) {
    var s = &amp;quot;&amp;quot;;
    for (var i=0; i&amp;lt;n-y-1; i++) s += &amp;quot;. &amp;quot;;
    for (var i=0; i&amp;lt;=y; i++) s += &amp;quot;* &amp;quot;;
    out += s+&amp;quot;\n&amp;quot;;
  }
  console.log(out);
}

draw(5); // call the function to draw a triangle of height 5
draw(10); // draw again
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can return values to the calling code with &lt;code&gt;return&lt;/code&gt;. The &lt;code&gt;return&lt;/code&gt; statement also ends the execution of the functions immediately.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// this function compares the two parameters a and b, and returns the bigger one
function bigger (a,b) {
  if (a&amp;gt;b) {
    return a;
  } else {
    return b;
  }
}
console.log(&#39;The bigger one is &#39;, bigger(2,3));

// another way to write
function bigger2 (a,b) {
  if (a&amp;gt;b) { return a; }
  return b;
}

// yet another way to write
function bigger3 (a,b) { return a&amp;gt;b ? a : b; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next example defines a function that finds the largest number in an array, assuming that the array has at least 1 element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function max (num) {
  var x = num[0]; // assume the 0th element is the largest
  // compare x with each remaining element
  for (var k=1; k&amp;lt;num.length; k++) {
    if (num[k]&amp;gt;x) x = num[k];
  }
  return x;
}

max([2,3,5,8,7,1,4,6]); // return 8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-note-on-variable-scope&#34;&gt;A note on variable scope&lt;/h2&gt;

&lt;p&gt;In JavaScript, variables have function scope. That means that variables defined within a function are only visible inside the function. They are sometimes called &lt;dfn&gt;local variables&lt;/dfn&gt;. Function parameters also work like local variables. A new copy of these variables is created when the function executes, and removed when no code has access to them anymore. For simple case like the above example, the local variables are removed when the function returns.&lt;/p&gt;

&lt;p&gt;On the other hand, variables defined outside any functions are &lt;dfn&gt;global variables&lt;/dfn&gt;, and are visible inside any functions. It is generally recommended to use global variables as little as possible.&lt;/p&gt;

&lt;p&gt;In addition, you can define a function inside another function. Such nesting functions create nesting variable scopes.&lt;/p&gt;

&lt;!--
function sum(A) {
  var a = 0;
  for (var k of A) a+=k;
  return a;
}

function odd(n) {
  var ans = [];
  for (var k=1; k&lt;=n; k+=2) ans.push(k);
  return ans;
}
--&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a &lt;strong&gt;function&lt;/strong&gt; &lt;code&gt;sum(num)&lt;/code&gt; to calculate the sum of elements in an array &lt;code&gt;num&lt;/code&gt;.
Use the following code to test your function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var x = [1,2,3,4,5];
var ans = sum(x);
console.log(&#39;Correct? &#39;, ans==15);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a function &lt;code&gt;odd(n)&lt;/code&gt; to generate an array of odd numbers less than or equal to &lt;code&gt;n&lt;/code&gt;.
Test your function with the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = odd(1);
console.log(a); // should print [1]
console.log(odd(9)); // should print [1,3,5,7,9]
console.log(sum(odd(10*2-1))); // should print 100
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a function &lt;code&gt;search(num, n)&lt;/code&gt; to search for an number &lt;code&gt;n&lt;/code&gt; in the array &lt;code&gt;num&lt;/code&gt;. Return the   position of the element if it is found. If it is not found, return -1. Test your function with the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var x = [6, 8, 3, -2];
console.log(search(x, 3)); // should print 2;
console.log(search(x, 1)); // should print -1;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sample answers are available at &lt;a href=&#34;http://philiplei.github.io/chap2/p201.js&#34;&gt;p201.js&lt;/a&gt;, &lt;a href=&#34;http://philiplei.github.io/chap2/p202.js&#34;&gt;p202.js&lt;/a&gt; and &lt;a href=&#34;http://philiplei.github.io/chap2/p203.js&#34;&gt;p203.js&lt;/a&gt; respectively.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4-3 Web client</title>
      <link>http://philiplei.github.io/server/4-3/</link>
      <pubDate>Mon, 25 Jul 2016 10:05:01 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-3/</guid>
      <description>

&lt;p&gt;This lab demonstrate how send HTTP requests using the &lt;code&gt;request&lt;/code&gt; modules.&lt;/p&gt;

&lt;h2 id=&#34;module-request&#34;&gt;Module request&lt;/h2&gt;

&lt;p&gt;Node.js has a built-in module called &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt; for making HTTP clients and servers. They are efficient implementation of the HTTP protocol. However, the modules are low-level and not convenient to use. Therefore, the Node community has developed several modules for writing HTTP clients and servers. This lab is about the client-side of HTTP.&lt;/p&gt;

&lt;p&gt;A popular choice for HTTP clients is the &lt;code&gt;request&lt;/code&gt; module. &lt;a href=&#34;https://www.npmjs.com/package/request&#34;&gt;(online reference)&lt;/a&gt;.  Before using the module the first time in a project, install it with &lt;code&gt;npm install request&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;get-an-url&#34;&gt;GET an URL&lt;/h2&gt;

&lt;p&gt;The following example fetches the current weather report from &lt;a href=&#34;http://rss.smg.gov.mo/e_ActualWeather_rss.xml&#34;&gt;http://rss.smg.gov.mo/e_ActualWeather_rss.xml&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p301.js
var request = require(&#39;request&#39;);

var url = &#39;http://rss.smg.gov.mo/e_ActualWeather_rss.xml&#39;;
request.get(url, (err, res, body) =&amp;gt; {
  console.log(&#39;STATUS: &#39; + res.statusCode);
  console.log(&#39;HEADERS: &#39;);
  console.dir(res.headers);
  console.log(body);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The callback for &lt;code&gt;request.get&lt;/code&gt; takes three parameters. The first is the error object. The second is an object of class &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;a href=&#34;https://nodejs.org/api/http.html#http_class_http_incomingmessage&#34;&gt;(online reference)&lt;/a&gt;. It represent the HTTP response message. You can use it to check HTTP status code and headers. The last parameter is the message body of the HTTP response.   The next example downloads an image from IPM website and saves it.&lt;/p&gt;

&lt;h2 id=&#34;options-object-pattern&#34;&gt;Options object pattern&lt;/h2&gt;

&lt;p&gt;The JavaScript programming language does not support named parameters.  Some APIs make use of a pattern caled &lt;strong&gt;options object pattern&lt;/strong&gt; to pass named parameters to a function. For example, if you need to give more information about the HTTP request in addition to URL, you can group these information in an option object and pass it as the first parameter of &lt;code&gt;reqeust.get()&lt;/code&gt;. Refer to online reference for &lt;a href=&#34;https://www.npmjs.com/package/request#requestoptions-callback&#34;&gt;all available options&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p302.js
// - Download and save an image file from www.ipm.edu.mo

var fs = require(&#39;fs&#39;);
var request = require(&#39;request&#39;);

// options object pattern
// use a JS object to group named parameters
// encoding = null is required to get binary data
var options = {
  url: &#39;http://www.ipm.edu.mo/cntfiles/upload/images/common/campus/campusmap_btn_chi_un_img.jpg&#39;,
  encoding: null
};

request.get(options, (err, res, body) =&amp;gt; {
  if (err) throw err;
  if (res.statusCode!==200) {
    console.log(&#39;HTTP status not ok. code = &#39;, res.statusCode);
    return;
  }
  console.log(&#39;HTTP request is successful. Saving file...&#39;);
  fs.writeFile(&#39;campus.jpg&#39;, body, (err) =&amp;gt; {
    if (err) throw err;
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;post-request&#34;&gt;POST request&lt;/h2&gt;

&lt;p&gt;In the next example, we want to download the class time table from the IPM web app at
&lt;a href=&#34;https://wapps.ipm.edu.mo/siweb/time_prog.asp&#34;&gt;https://wapps.ipm.edu.mo/siweb/time_prog.asp&lt;/a&gt;.
The web app uses HTTPS (instead of plain HTTP) and the POST method to send query to the server.
The query data can be sent using the &lt;code&gt;form&lt;/code&gt; property in the &lt;code&gt;options&lt;/code&gt; object in &lt;code&gt;request.post&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// p303.js
// - saves the response of a POST request to the file timetab.html

var request = require(&#39;request&#39;);
var fs = require(&#39;fs&#39;);

var form = {
  p_escl_cod: 5, /* ... */
  p_year_sem: &#39;2015/2016-1&#39;,
  p_sp_year: 3,
  p_class_code: &#39;31121&#39;
};

var options = {
  url: &#39;https://wapps.ipm.edu.mo/siweb/time_prog.asp&#39;,
  form: form
};

request.post(options, (err, res, body) =&amp;gt; {
  if (err) throw err;
  console.log(&#39;HTTP status: &#39; + res.statusCode);
  // write the HTML response body to an HTML file
  fs.writeFile(&#39;timetab.html&#39;, body, &#39;utf8&#39;, (err)=&amp;gt; {} );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;TODO TODO&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-3 Creating new content</title>
      <link>http://philiplei.github.io/client/3-3/</link>
      <pubDate>Tue, 31 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-3/</guid>
      <description>

&lt;p&gt;This lab covers how to create new content into the document tree using &lt;code&gt;$()&lt;/code&gt; jQuery functions and methods.&lt;/p&gt;

&lt;h2 id=&#34;create-new-html-content&#34;&gt;Create new HTML content&lt;/h2&gt;

&lt;p&gt;You can create new HTML content by passing HTML code to the jQuery function &lt;code&gt;$(htmlCode)&lt;/code&gt;.  The newly created elements are detached from the current document tree, and not displayed.  To show the content, you have to attach the elements to the document tree.  Run the following code in &lt;a href=&#34;http://philiplei.github.io/chap3/p311.html&#34;&gt;p311.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = $(&#39;&amp;lt;p&amp;gt;A new paragraph &amp;lt;em&amp;gt;created&amp;lt;/em&amp;gt; by jQuery&amp;lt;/p&amp;gt;&#39;);
dir(p);
// append to the document body to show this element
$(&#39;body&#39;).append(p);
// now you can see it
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you supply HTML code to jQuery function, it returns a jQuery collection, just like the collection returned when you supply a CSS selector. Therefore, you can use the jQuery methods like &lt;code&gt;$().html()&lt;/code&gt; or &lt;code&gt;$().attr()&lt;/code&gt; to configure the newly created elements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var img = $(&#39;&amp;lt;img&amp;gt;&#39;).attr(&#39;src&#39;, &#39;ani/dragon.png&#39;);
$(&#39;body&#39;).append(img);

var link = $(&#39;&amp;lt;a&amp;gt;&#39;).html(&#39;Macao Poly&#39;).attr(&#39;href&#39;, &#39;http://www.ipm.edu.mo&#39;);
// this is the same as $(&#39;&amp;lt;a href=&amp;quot;http://www.ipm.edu.mo&amp;quot;&amp;gt;Macao Poly&amp;lt;/a&amp;gt;&#39;);
$(&#39;body&#39;).append(link);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, you can detach an element from the document tree with &lt;code&gt;$().detach()&lt;/code&gt; or &lt;code&gt;$().remove&lt;/code&gt;, and reinsert it later. To remove all content inside an element, use &lt;code&gt;$(selector).empty()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// move all images to the end of the document
var img = $(&#39;img&#39;).detach();
$(&#39;body&#39;).append(img);

// make the document body empty
$(&#39;body&#39;).empty();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;insert-content-to-document-tree&#34;&gt;Insert content to document tree&lt;/h2&gt;

&lt;p&gt;There are several methods you can use to insert new / existing content into the current document tree.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$().append(content)&lt;/code&gt; - adds the content at the end of each element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().prepend(content)&lt;/code&gt; - adds the content at the start of each element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().after(content)&lt;/code&gt; - adds the content after each element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().before(content)&lt;/code&gt; - adds the content before each element in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the source content is already attached to the current document, the content is removed first, and then attached at the target location.  If you want to keep the source content at the original position, clone the source content before inserting with &lt;code&gt;$().clone()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, go through the examples in &lt;a href=&#34;http://philiplei.github.io/chap3/p312.html&#34;&gt;p312.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The four insertion methods have a counterpart version that reverse the order of source and target.  (&lt;code&gt;$().appendTo()&lt;/code&gt;, &lt;code&gt;$().prependTo()&lt;/code&gt;, &lt;code&gt;$().insertBefore()&lt;/code&gt; and &lt;code&gt;$().insertAfter()&lt;/code&gt;) They are useful if you want to chain other methods on the source.  See &lt;a href=&#34;https://api.jquery.com/category/manipulation/dom-insertion-inside/&#34;&gt;online reference&lt;/a&gt; or more detail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(&#39;#rooster&#39;).after($(&#39;#tiger&#39;))
// is the same as ...
$(&#39;#tiger&#39;).insertAfter($(&#39;#rooster&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following creates new rows and inserts into the table. See the demo &lt;a href=&#34;http://philiplei.github.io/chap3/p313.html&#34;&gt;p313.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var $t = $(&#39;table tbody&#39;);
// clear the table body
$t.empty();
for (var k=16; k&amp;lt;32; k++) {
  // create a new row
  var $r = $(&#39;&amp;lt;tr&amp;gt;&#39;);
  // and append three cells to the row
  $(&#39;&amp;lt;td&amp;gt;&#39;).html(k).appendTo($r);
  $(&#39;&amp;lt;td&amp;gt;&#39;).html(k.toString(2)).appendTo($r);
  $(&#39;&amp;lt;td&amp;gt;&#39;).html(k.toString(16)).appendTo($r);
  // append the row to the table body
  $t.append($r);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;In this exercise, you have to populate an HTML table with JSON data in &lt;a href=&#34;http://philiplei.github.io/chap3/p314.html&#34;&gt;p314.html&lt;/a&gt;.  Refer to the &lt;a href=&#34;http://philiplei.github.io/chap3/p314-done.html&#34;&gt;sample answer&lt;/a&gt; for the required output format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2-3 Objects and JSON data</title>
      <link>http://philiplei.github.io/basic/2-3/</link>
      <pubDate>Thu, 26 May 2016 19:13:37 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-3/</guid>
      <description>

&lt;p&gt;This lab covers the basics of objects (as data structure). It also covers part of JSON.&lt;/p&gt;

&lt;h2 id=&#34;objects&#34;&gt;Objects&lt;/h2&gt;

&lt;p&gt;In JavaScript, an &lt;dfn&gt;object&lt;/dfn&gt; is a collection of properties. Each property
is a pair of name and value. You can access each property with the dot notation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// define an object with 3 properties
var peter = {
  firstName: &amp;quot;Peter&amp;quot;,
  lastName: &amp;quot;Chan&amp;quot;,
  age: 19
};
console.log(peter.lastName)  // &amp;quot;Chan&amp;quot;
peter.age ++;
console.log(`${peter.firstName} is now ${peter.age} years old.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use assignment to change value of an existing property, or add a new property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var point = { };  // empty objects
point.x = 10; // add property
point.y = 8;
dir(point); // show structure, only avail in Chrome console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can accept objects, and return objects. In the following, objects with the two properties &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; represent points on a plane.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function distance (p1, p2) {
  // the function Math.hypot() can also be used here
  var sum_sqr = Math.pow(p1.x-p2.x, 2) + Math.pow(p1.y-p2.y, 2);
  return Math.sqrt(sum_sqr);
}

function midpoint (p1, p2) {
  return {
    x: (p1.x+p2.x) / 2,
    y: (p1.y+p2.y) / 2
  }
}

var p1 = { x: 0, y: 0 }, p2 = { x: 3, y: 4 };
console.log(`Distance = ${distance(p1,p2)}`);
var mid = midpoint(p1, p2);
dir(mid);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;complicated-data&#34;&gt;Complicated data&lt;/h2&gt;

&lt;p&gt;A property can take another object as value. This put an object inside another object.
Use nesting objects to represent a hierarchy of properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var flight = {
  airline: &amp;quot;Oceanic&amp;quot;,
  number: 815,
  departure: {
     IATA: &amp;quot;SYD&amp;quot;,
     time: &amp;quot;2004-09-22 14:55&amp;quot;,
     city: &amp;quot;Sydney&amp;quot;
  },
  arrival: {
     IATA: &amp;quot;LAX&amp;quot;,
     time: &amp;quot;2004-09-23 10:42&amp;quot;,
     city: &amp;quot;Los Angeles&amp;quot;
  }
};

console.log(
   &#39;This flight goes from &#39;,
   flight.departure.city,
   &#39; to &#39;,
   flight.arrival.city
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By mixing arrays and objects, you can use JavaScript data structure to represent some complicated data. This forms the basis of the JSON data format.&lt;/p&gt;

&lt;p&gt;In the following example, the object &lt;code&gt;timetab&lt;/code&gt; represents the lecture timetable for &lt;sup&gt;2016&lt;/sup&gt;&amp;frasl;&lt;sub&gt;17&lt;/sub&gt;, semester 1. The property &lt;code&gt;courses&lt;/code&gt; has array value, and contains an object for each course.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var timetab = {
  acadYear: &amp;quot;2016/17&amp;quot;,
  semester: 1,
  courses: [
    {
      code: &#39;comp211&#39;, title: &#39;Database design&#39;, year: 2,
      lectures: [
        { dow: 2, start: 1130, end: 1300, room: &#39;A203&#39; },
        { dow: 4, start: 1000, end: 1130, room: &#39;A318&#39; }
      ]
    },
    {
      code: &#39;comp212&#39;, title: &#39;Programming II&#39;, year: 2,
      lectures: [
        { dow: 4, start: 1430, end: 1600, room: &#39;A317&#39; },
        { dow: 3, start: 1600, end: 1730, room: &#39;A210&#39; }
      ]
    },
    {
      code: &#39;comp214&#39;, title: &#39;Computer networks&#39;, year: 2,
      lectures: [
        { dow: 5, start: 1000, end: 1300, room: &#39;A206&#39; }
      ]
    }
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-note-on-object-notation&#34;&gt;A note on object notation&lt;/h2&gt;

&lt;p&gt;In addition to the dot notation, you can also use array notation to access a property in objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var person = { name: &#39;Peter&#39; };
// same as person.age = 20;
person[&#39;age&#39;] = 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The array notation is necessary if you only know the property names in run-time, or the property names contains non-ASCII characters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var cn2en = {
  &#39;春&#39;: &#39;spring&#39;, &#39;夏&#39;: &#39;summer&#39;,
  &#39;秋&#39;: &#39;autumn&#39;, &#39;冬&#39; : &#39;winter&#39;
};
cn2en[&#39;春&#39;]  // &#39;spring&#39;
// the following has syntax error
//cn2en.春
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The JavaScript language also has a &lt;code&gt;for .. in&lt;/code&gt; control structure to enumerate the properties of an object. We skip its discussion because it is tricky to use.&lt;/p&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Use the time table data structure above to complete this exercise. Refer to the sample answers for sample output: &lt;a href=&#34;http://philiplei.github.io/chap2/p204.js&#34;&gt;p204.js&lt;/a&gt;, &lt;a href=&#34;http://philiplei.github.io/chap2/p205.js&#34;&gt;p205.js&lt;/a&gt; and &lt;a href=&#34;http://philiplei.github.io/chap2/p206.js&#34;&gt;p206.js&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write a program to show the number of lectures of each course. The output should include course code, course title, and number of lectures per week.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program to print the content of the time table.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program to list the lectures on Thursday &lt;code&gt;dow==4&lt;/code&gt;. The output should include course code, start and end time, and room.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>4-4 Routing in web app</title>
      <link>http://philiplei.github.io/server/4-4/</link>
      <pubDate>Wed, 27 Jul 2016 10:29:04 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-4/</guid>
      <description>

&lt;p&gt;This lab first covers the concept of a Node app and dependency management in package.json. Next it starts the discussion on the web app framework Express.js.&lt;/p&gt;

&lt;h2 id=&#34;node-app-and-package-json&#34;&gt;Node app and package.json&lt;/h2&gt;

&lt;p&gt;In this lab, we&amp;rsquo;ll use the Express.js framework and some other modules to build
web app server. As an Node application makes use of more NPM modules, it becomes difficult to install the modules manually with the command &lt;code&gt;npm install module-name&lt;/code&gt;. Instead, you can describe the dependencies of a Node app in a JSON txt file called &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A Node app contains 1 or more JavaScript file (&lt;code&gt;*.js&lt;/code&gt;) together with modules and other assets (e.g. HTML files, images). All these file are put in a folder. A special file &lt;code&gt;package.json&lt;/code&gt; describes the app. It defines the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;, which identifies the app in the &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;www.npmjs.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;comp312-examples&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Examples for Express.js in comp312&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;express&amp;quot;: &amp;quot;^4.10&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The config file above indicates that our app depends on the &amp;lsquo;express&amp;rsquo; module. It requires a version &lt;em&gt;compatible&lt;/em&gt; with 4.10.  For more detail about the version specification, refer to the &lt;a href=&#34;https://docs.npmjs.com/misc/semver&#34;&gt;online document for Semvar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After listing all the required modules for the current app in &lt;code&gt;package.json&lt;/code&gt;, you can install all the dependencies with the command &lt;code&gt;npm install&lt;/code&gt;. If later, you need to add a dependency (e.g. &lt;code&gt;request&lt;/code&gt; module), run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install request --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command installs the latest version of specified module. In addition, it updates &lt;code&gt;package.json&lt;/code&gt; and adds the module to the dependencies.  Try the command and check the change in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;express-js&#34;&gt;Express.js&lt;/h2&gt;

&lt;p&gt;Express.js &lt;a href=&#34;http://expressjs.com/&#34;&gt;(website)&lt;/a&gt; is a web framework to simplify development of Web applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Middleware – chainable processing of requests and responses&lt;/li&gt;
&lt;li&gt;Routing – different request processing based on URL patterns&lt;/li&gt;
&lt;li&gt;Template – generate HTML output from variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic structure of an express app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var express = require(&#39;express&#39;);
// create an Express application, which will handle HTTP requests
var app = express();

// a route in the app, which handles GET request for the path &#39;/&#39;
app.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;hello world&#39;);
});

// more routes ...

// start listening at TCP port 3000
app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;routes&#34;&gt;Routes&lt;/h2&gt;

&lt;p&gt;When a web server receives an HTTP request, it has to decide how to handle the request, and return the result as an HTTP response.  Such decision usually depends on the HTTP method (either GET or POST in most cases) and the path in the URL (e.g. &amp;ldquo;/about.html&amp;rdquo;).   The combination of HTTP method and the URL path is usually referred to as an endpoint of the web service.&lt;/p&gt;

&lt;p&gt;In an Express app, we define a &lt;strong&gt;route&lt;/strong&gt; to describe how to process HTTP requests at an endpoint.
The general syntax is &lt;code&gt;app.get(path, callback)&lt;/code&gt; and &lt;code&gt;app.post(path, callback)&lt;/code&gt;. The callback can take 2 or more parameters.  Often, we only use the first two parameters called &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt;. &lt;code&gt;req&lt;/code&gt; refers to the incoming HTTP request, and &lt;code&gt;res&lt;/code&gt; can be used to build the HTTP response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// app is an Express app

app.get(&#39;/about.html&#39;, (req, res) =&amp;gt; {
  // When the Express app receives a GET request
  // for the path &#39;/about.html&#39;, it returns a text response
  res.send(&#39;This is a simple example of route&#39;)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some web apps include parameters in the URL path. For example, the URL &lt;code&gt;https://www.google.com/maps/place/Macao+Polytechnic+Institute/&lt;/code&gt; refers to the place &amp;lsquo;Macao Polytechnic Institute&amp;rsquo; in the web app Google Maps.  You can easily extract these parameters in Express routes.&lt;/p&gt;

&lt;p&gt;Consider the sample code below, which shows a web app to check lecture hours. When the app receives a GET request for the path &amp;lsquo;/lecture/comp312&amp;rsquo;, it returns a response of its lecture hours. The parameters are available in the object &lt;code&gt;req.params&lt;/code&gt;. (The full source is &lt;a href=&#34;http://philiplei.github.io/chap4-4/app1.js&#34;&gt;app1.js&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// retrieve the lecture time
app.get(&#39;/lecture/:code&#39;, (req, res) =&amp;gt; {
  // in a real app, we&#39;d query a database ...
  if (req.params.code==&#39;comp312&#39;) {
    res.send(&#39;Tue, Thu: 10:00-11:30am&#39;)
  } else if (req.params.code==&#39;comp311&#39;) {
    // ...
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above only describes the basics of routing in Express. Refer to the &lt;a href=&#34;http://expressjs.com/en/guide/routing.html&#34;&gt;online guide&lt;/a&gt; for more possibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The order of routes is significant!&lt;/strong&gt;  An Express app checks the routes in the order they are defined. When a route matches the HTTP methods and URL path, the Express app executes its callback function to handle the request.  The callback usually returns an HTTP response with &lt;code&gt;res.send()&lt;/code&gt; or similar methods. When a response is returned, the Express app will &lt;strong&gt;stop&lt;/strong&gt; checking the remaining routes.&lt;/p&gt;

&lt;h2 id=&#34;making-responses&#34;&gt;Making responses&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;res&lt;/code&gt; object in the route callback to build a response. &lt;a href=&#34;http://expressjs.com/en/4x/api.html#res&#34;&gt;(online reference)&lt;/a&gt; The &lt;code&gt;res&lt;/code&gt; object has several common methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;res.send(body)&lt;/code&gt; sends a response with the specified body. The body is usually a string, but it can also be JavaScript objects or others.  The method determines the suitable MIME type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.sendFile(path)&lt;/code&gt; returns a file as response.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.status(code)&lt;/code&gt; sets the HTTP response code. This function is chainable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.redirect(path)&lt;/code&gt; redirects to the given URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check the source code of &lt;a href=&#34;http://philiplei.github.io/chap4-4/app2.js&#34;&gt;app2.js&lt;/a&gt; for demonstration of how to build responses with these methods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-4 Handling events</title>
      <link>http://philiplei.github.io/client/3-4/</link>
      <pubDate>Wed, 08 Jun 2016 15:46:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-4/</guid>
      <description>

&lt;p&gt;This lab covers how to handle events with event handlers using the jQuery library.&lt;/p&gt;

&lt;h2 id=&#34;basic-event-handling&#34;&gt;Basic event handling&lt;/h2&gt;

&lt;p&gt;The basic function to register event handler is &lt;code&gt;$().on(events, handler)&lt;/code&gt; &lt;a href=&#34;https://api.jquery.com/on/&#34;&gt;(online reference)&lt;/a&gt; This method attaches the event handler (a function) to handle the events (e.g &amp;lsquo;click&amp;rsquo;, &amp;lsquo;mousemove&amp;rsquo;) to each element in the jQuery collection. There are different ways to attach event handlers, as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(&#39;button#btn1&#39;).on(&#39;click&#39;, function(event) {
  // do something when the button with id=btn1 is clicked
});

// rewrite using arrow function
$(&#39;button#btn1&#39;).on(&#39;click&#39;, (event) =&amp;gt; {
  // ...
});

// shorthand notation is available for common events
// .. but this is not recommended in this course
$(&#39;button#btn1&#39;).click( (event) =&amp;gt; {
  // ...
});

// your can also define a standalone function and later use it as event handler
function btn1_click (event) {
  // ...
}

$(&#39;button#btn1&#39;).on(&#39;click&#39;, btn1_click);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mouse-event-and-event-object&#34;&gt;Mouse event and event object&lt;/h2&gt;

&lt;p&gt;The browser triggers several mouse-related events when the user interacts with the HTML elements using the mouse. Some common mouse events are: &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;mouseenter&lt;/code&gt;, &lt;code&gt;mouseleave&lt;/code&gt; and &lt;code&gt;mousemove&lt;/code&gt;.
The first parameter of an event handler is an &lt;a href=&#34;http://api.jquery.com/category/events/event-object/&#34;&gt;Event object&lt;/a&gt;.
This object includes several useful properties and methods. One of them is the property &lt;code&gt;.target&lt;/code&gt;, which is the HTML element that triggers the event. The event type is given in the property &lt;code&gt;.type&lt;/code&gt;. The location of the mouse cursor is given in the properties &lt;code&gt;.pageX&lt;/code&gt; and &lt;code&gt;.pageY&lt;/code&gt;. The following code shows how to handle common mouse events. Check a live demo at &lt;a href=&#34;http://philiplei.github.io/chap3/p321.html&#34;&gt;p321.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// this event handler handles &#39;click&#39;
$(&#39;#box1&#39;).on(&#39;click&#39;, event =&amp;gt; {
  var x = event.pageX;
  var y = event.pageY;
  console.log(`click: #box1 at (${x}, ${y})`);
});

// this event handler handles both &#39;mouseenter&#39; and &#39;mouseleave&#39;
$(&#39;#box1&#39;).on(&#39;mouseenter mouseleave&#39;, event =&amp;gt; {
  var x = event.pageX;
  var y = event.pageY;
  var type = event.type;
  console.log(`${type}: #box1 at (${x}, ${y})`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases, we need to handle the same event type triggered at many elements. For example,
in &lt;a href=&#34;http://philiplei.github.io/chap3/p322.html&#34;&gt;p322.html&lt;/a&gt;, when the user clicks at one of the 12 images, it slowly fades out (to 0.1 opacity), and then slowly fades in (back to 1.0 opacity). (This example uses the jQuery method &lt;code&gt;$().fadeTo&lt;/code&gt; &lt;a href=&#34;http://api.jquery.com/fadeTo/&#34;&gt;(online reference)&lt;/a&gt; to do the animation.)
This animation is done with one event handler, which needs to find out which image is clicked via &lt;code&gt;event.target&lt;/code&gt;. Notice that in order to apply jQuery methods, we have to wrap the DOM element &lt;code&gt;event.target&lt;/code&gt; as a jQuery collection &lt;code&gt;$(event.target)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// register the same event handler function to the 12 images
$(&#39;#zodiac img&#39;).on(&#39;click&#39;, event =&amp;gt; {
  // use event.target to find out which image is clicked
  // do something on it, e.g. $(event.target).fadeOut();
  $(event.target).fadeTo(1000, 0.1,
    ()=&amp;gt;{$(event.target).fadeTo(3000, 1)});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;attach-data-to-dom-elements&#34;&gt;Attach data to DOM elements&lt;/h2&gt;

&lt;p&gt;Although we can distinguish which element triggers an event with &lt;code&gt;event.target&lt;/code&gt;, usually it is more convenient if we can pass some application specific information (e.g. record id) to the event handler.  There are several ways to do this.  The code below are extracted from a simple Tic-tac-toe example &lt;a href=&#34;http://philiplei.github.io/chap3/p323.html&#34;&gt;p323.html&lt;/a&gt; and uses the jQuery method &lt;code&gt;$().data(name, value)&lt;/code&gt; to attach any JavaScript data to a DOM element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- the tic tac toe game board is a 3x3 table --&amp;gt;
&amp;lt;table id=&#39;tic&#39; class=&#39;gameboard&#39;&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;script&amp;gt;
// attach pos=0, pos=1, .., pos=8 to the 9 table cells
for (var k=0; k&amp;lt;$(&#39;#tic td&#39;).length; k++) {
  $(&#39;#tic td&#39;).eq(k).data(&#39;pos&#39;, k);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the event handler for click on the table cells &lt;code&gt;#tic td&lt;/code&gt;, we use &lt;code&gt;$(event.target).data(&#39;pos&#39;)&lt;/code&gt; to retrieve the position (0-8) of the clicked cell, and update the game board data structure accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var board = [9,9,9,9,9,9,9,9,9];
// player &#39;circle&#39; plays first
var current = 0;

$(&#39;#tic td&#39;).on(&#39;click&#39;, (event)=&amp;gt;{
  // which position (0-8) is clicked?
  var pos = $(event.target).data(&#39;pos&#39;);
  // update the game board data structure
  board[pos] = current;
  // display a circle or cross
  var image = (current==0) ? &#39;url(circle.png)&#39; : &#39;url(cross.png)&#39;;
  $(event.target).css(&#39;background-image&#39;, image);
  // change player
  current = (current==0) ? 1 : 0;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pass-data-to-event-handler&#34;&gt;Pass data to event handler&lt;/h2&gt;

&lt;p&gt;Instead of attaching JavaScript data to DOM element, you can specify these JavaScript data when registering an event handler. When the event triggers, jQuery passes the specified data to the event handler as &lt;code&gt;event.data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This example (&lt;a href=&#34;http://philiplei.github.io/chap3/p324.html&#34;&gt;p324.html&lt;/a&gt;) specifies a row number while it registers an event handler for each row in an existing HTML table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var $rows = $(&#39;#marks tbody tr&#39;);
for (var i=0; i&amp;lt;$rows.length; i++) {
  $rows.eq(i).on(&#39;click&#39;, { rowNum: i }, (event) =&amp;gt; {
    var n = event.data.rowNum;
    console.log(`click row ${n}`);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following code snippet comes from the example (&lt;a href=&#34;http://philiplei.github.io/chap3/p325.html&#34;&gt;p325.html&lt;/a&gt;). This app populates an HTML table with some mark data for students in runtime, and attaches the event handler to a newly created table row for each student.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function populateMarkTable (marks) {
  $(&#39;#marks caption&#39;).text(`Marks for ${marks.courseCode}`);
  $(&#39;#marks tbody&#39;).empty();
  for (var k=0; k&amp;lt;marks.student.length; k++) {
    var stud=marks.student[k];
    // calculate course, exam and final for this student
    // ...
    var $r = $(&#39;&amp;lt;tr&amp;gt;&#39;);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(stud.name).appendTo($r);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(course).appendTo($r);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(exam).appendTo($r);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(final).appendTo($r);
    // pass a student record to the event handler
    // when the mouse is over this row
    $r.on(&#39;mouseenter&#39;, { stud: stud }, displayMarkDetail);
    $(&#39;#marks tbody&#39;).append($r);
  }
}

function displayMarkDetail (event) {
  // event.data.stud is the record of the student selected
  var stud = event.data.stud;
  var s = `The student ${stud.name} has got ${stud.hw.join(&#39;,&#39;)} in assignments, `;
  s += `${stud.test.join(&#39;,&#39;)} in tests, and ${stud.exam} in exam.`;
  $(&#39;p#detail&#39;).text(s);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2-4 Callbacks and arrow functions</title>
      <link>http://philiplei.github.io/basic/2-4/</link>
      <pubDate>Thu, 26 May 2016 19:13:42 +0800</pubDate>
      
      <guid>http://philiplei.github.io/basic/2-4/</guid>
      <description>

&lt;h2 id=&#34;functions-as-first-class-values&#34;&gt;Functions as first-class values&lt;/h2&gt;

&lt;p&gt;Functions in JavaScript are often described as first-class values. (In fact, functions are objects, with their own properties and methods.) This means that, in many cases, if you can do something on numbers or strings, you can also do the same on functions. In particular,
you can save a function in a variable, pass a function to another function, or return a function from a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function add (a,b) { return a+b; }
var f = add;
f(1,2); // returns 3;
add(1,2); // same
// dir(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing a function to another function is possible. This is an example of &lt;dfn&gt;callback&lt;/dfn&gt;, and can change the behavior of another function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// use a function op(x,y) to combine 3 values
function combine (op, a, b, c) {
  var t = op(a,b);
  var ans = op(t,c);
  return ans;
}

// define an anonymous function, and save it in the variable &#39;add&#39;
var add = function(a,b) { return a+b; }
combine(add, 6, 7, 8); // returns 21

var mul = function(a,b) { return a*b; }
combine(mul, 6, 7, 8); // returns 336
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map-and-filter&#34;&gt;Map and filter&lt;/h2&gt;

&lt;p&gt;A common case in processing a large amount of data in arrays is to iterate the elements and perform some processing or filtering on each element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = [];
// round the numbers to 2 decimal places
for (var n of a) {
  var n2 = Math.round(n*100) / 100;
  b.push(n2);
}
// print a and b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// an array of objects, each one is a rectangle with given width and height
var c = [ { w: 4, h: 5 }, { w: 2, h: 3 } ];
var d = [];
// calculate the area of the rectangles
for (var k=0; k&amp;lt;c.length; k++) {
  var area = c[k].w * c[k].h;
  d.push(area);
}
// print c and d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a common scenario in programming. Therefore, the JavaScript Array objects provide built-in methods to iterate their content. One of the simplest is &lt;code&gt;.map()&lt;/code&gt;, which accepts a function as parameter. The function takes 1 input, perform some processing, and returns the result. &lt;code&gt;.map()&lt;/code&gt; collects these results into an output array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function round2(n) { return Math.round(n*100) / 100; }

var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(round2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;round2&lt;/code&gt; is another example of &lt;dfn&gt;callback&lt;/dfn&gt; function. This callback function is not called directly by your code. Instead, after definition, you pass the callback function to someone else&amp;rsquo;s code, and their code will call back your function later.&lt;/p&gt;

&lt;p&gt;If this function is not used anywhere else, you can define it in the parameter list of &lt;code&gt;.map()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(function round2(n) {
   return Math.round(n*100) / 100;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can even omit the function name. This defines an &lt;dfn&gt;anonymous function&lt;/dfn&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(function(n) {
   return Math.round(n*100) / 100;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to look at this is that a callback function can customize / modify the functionality of an existing function. For example, to calculate areas of rectangles in an array, we can write another callback function and pass it to &lt;code&gt;.map()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// an array of objects, each one is a rectangle with given width and height
var c = [ { w: 4, h: 5 }, { w: 2, h: 3 } ];
var d = c.map(function (r) {
  return r.w * r.h;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to &lt;code&gt;.map()&lt;/code&gt;, another popular iteration function in Array is &lt;code&gt;.filter()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var e = [&#39;joy&#39;, &#39;sadness&#39;, &#39;anger&#39;, &#39;disgust&#39;, &#39;fear&#39;];
var f = [];
for (var s of e) {
  if (s.length&amp;lt;5) f.push(s);
}
// print e and f

// same as the for loop above
f = e.filter(function(s) { return (s.length&amp;lt;5); });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting&#34;&gt;Sorting&lt;/h2&gt;

&lt;p&gt;JavaScript arrays have a built-in &lt;code&gt;sort&lt;/code&gt; method. It can sort numbers and strings, but it does not know how to sort other objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [5, 4, 1, 2, 3];
a.sort();  // a becomes [1,2,3,4,5]
var b = [&#39;apple&#39;, &#39;orange&#39;, &#39;banana&#39;];
b.sort(); // b becomes [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;]

var p = [
  { name: &#39;Peter&#39;, age: 10 }, { name: &#39;Mary&#39;, age: 9 },
  { name: &#39;John&#39;, age: 11 } ];
p.sort(); // sort by name? by age?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can teach &lt;code&gt;.sort()&lt;/code&gt; how to compare two objects with a callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = [
  { name: &#39;Peter&#39;, age: 10 }, { name: &#39;Mary&#39;, age: 9 },
  { name: &#39;John&#39;, age: 11 } ];

// compare two persons by age
function cmp (p1, p2) {
  if (p1.age&amp;lt;p2.age) return -1;  // p1 should be put before p2
  if (p1.age==p2.age) return 0;  // order not important
  return 1;                      // p1 should be put after p2
}

// sort by age
p.sort(cmp);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timer&#34;&gt;Timer&lt;/h2&gt;

&lt;p&gt;Both browsers and Node.js support timers. Timers allow schedule of execution of a function in the future. There are two kinds of timers: one time (&lt;code&gt;setTimeout()&lt;/code&gt;), and periodic (&lt;code&gt;setInterval()&lt;/code&gt;). In either case, you pass the function to execute as a callback. Refer to the &lt;a href=&#34;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers&#34;&gt;online reference&lt;/a&gt; for detail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// say &#39;hello&#39; every 3 seconds
var id = setInterval(function() { console.log(&#39;hello&#39;);}, 3000);

// cancel the timer
//clearInterval(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is a countdown example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var n = 10;
function tick() {
  console.log(&#39;count down &#39;, n);
  n--;
  // if not down to 0, schedule myself to run 1s later
  if (n&amp;gt;0) { setTimeout(tick, 1000); }
}
// tick, the first time!
tick();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;arrow-functions&#34;&gt;Arrow functions&lt;/h2&gt;

&lt;p&gt;Anonymous functions are very common in JavaScript programming because of the asynchronous nature of client-side or server-side programming. (E.g. register a callback to handle mouse click). Therefore, ES6 defines a more concise syntax called &lt;dfn&gt;arrow functions&lt;/dfn&gt; to define anonymous function. Usually, arrow functions are defined and passed directly to another function.&lt;/p&gt;

&lt;p&gt;Compare the two ways to write functions below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var f1 = (a,b) =&amp;gt; { return a+b; };
var f2 = function (a,b) { return a+b; }

setTimeout(function() { console.log(&#39;hello&#39;);}, 2000);
setTimeout( () =&amp;gt; { console.log(&#39;hello&#39;);}, 2000 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although we&amp;rsquo;ll mainly use arrow functions in the same way as functions defined with &lt;code&gt;function&lt;/code&gt; keyword, there are in fact some technical differences. One important difference is about the &lt;code&gt;this&lt;/code&gt; pointer. Please refer to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;online reference&lt;/a&gt; for detail.&lt;/p&gt;

&lt;p&gt;Array functions also provide some shorthand notation when the function body only returns an expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var f1 = (a,b) =&amp;gt; a+b;  // same as below
var f2 = (a,b) =&amp;gt; { return a+b; }

var f3 = a =&amp;gt; a+1; // same as below
var f4 = (a) =&amp;gt; { return a+1; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are more examples to demonstrate the usage of arrow functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var a = [1/2, 1/3, 1/4, 1/5, 1/6];
var b = a.map(n =&amp;gt; Math.round(n*100) / 100);

var c = [3, 5, 2, 1];
c.sort((a,b)=&amp;gt;b-a); // sort in descending order

var e = [&#39;joy&#39;, &#39;sadness&#39;, &#39;anger&#39;, &#39;disgust&#39;, &#39;fear&#39;];
f = e.filter(s =&amp;gt; s.length&amp;lt;5);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;excersie&#34;&gt;Excersie&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Given an array &lt;code&gt;var N = [ 32, 53, 42, 25, 48, 10 ]&lt;/code&gt;, write a program to do the following. You should use callback functions. &lt;a href=&#34;http://philiplei.github.io/chap2/p211.js&#34;&gt;(sample answer)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obtain an array of hexadecimal representation of the numbers in &lt;code&gt;N&lt;/code&gt;. (Hints: use &lt;code&gt;n.toString(16)&lt;/code&gt; to convert a number &lt;code&gt;n&lt;/code&gt; to hexadecimal)&lt;/li&gt;
&lt;li&gt;Obtain an array of the numbers in &lt;code&gt;N&lt;/code&gt; between 20 and 40 inclusively&lt;/li&gt;
&lt;li&gt;Count how many of the numbers  in &lt;code&gt;N&lt;/code&gt; are odd&lt;/li&gt;
&lt;li&gt;Calculate the sum of the numbers in &lt;code&gt;N&lt;/code&gt;. Try to use &lt;code&gt;.reduce()&lt;/code&gt; in Array. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&#34;&gt;(online reference)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The variable &lt;code&gt;comp312&lt;/code&gt; is an array that contains records of student marks in the comp312 class. Each student record has three fields: name, test and exam. Write programs to do the following. Use an Array iteration method (i.e. &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.filter()&lt;/code&gt;, &lt;code&gt;.reduce()&lt;/code&gt;, etc) at least once in each case. &lt;a href=&#34;http://philiplei.github.io/chap2/p212.js&#34;&gt;(sample answer)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var comp312 = [
{ name: &#39;Peter&#39;, test: 80, exam: 70 },
{ name: &#39;John&#39;, test: 60, exam: 65 },
{ name: &#39;Mary&#39;, test: 90, exam: 85 },
{ name: &#39;Christine&#39;, test: 70, exam: 76 }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a list of student names in the comp312 class&lt;/li&gt;
&lt;li&gt;Get a list of student record with test mark &amp;gt;= 75&lt;/li&gt;
&lt;li&gt;Get a list of student name whose test mark is greater than exam mark&lt;/li&gt;
&lt;li&gt;Assume final mark = 0.6 * test + 0.4 * exam. Make an array with records showing the final mark and name for each student.&lt;/li&gt;
&lt;li&gt;Sort the list in descending order of exam mark&lt;/li&gt;
&lt;li&gt;Show the student record with the highest exam mark&lt;/li&gt;
&lt;li&gt;Calculate the average test mark&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>