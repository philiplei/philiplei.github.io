<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clients on My New Hugo Site</title>
    <link>http://comp312.ipm.mo/client/</link>
    <description>Recent content in Clients on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 May 2016 10:14:43 +0800</lastBuildDate>
    <atom:link href="http://comp312.ipm.mo/client/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Client-side programming</title>
      <link>http://comp312.ipm.mo/client/</link>
      <pubDate>Mon, 30 May 2016 10:14:43 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/</guid>
      <description>

&lt;h2 id=&#34;client-side-programming&#34;&gt;Client-side programming&lt;/h2&gt;

&lt;p&gt;This chapter goes through the basics of the JavaScript programming inside the Web browser environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3-1 quick start

&lt;ul&gt;
&lt;li&gt;document tree, first jQuery example&lt;/li&gt;
&lt;li&gt;select $(), change content .html(), .val(), event&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-2 select and change

&lt;ul&gt;
&lt;li&gt;select nodes in DOM tree. $(selector). jQuery collection&lt;/li&gt;
&lt;li&gt;read / change content .html() .text() .attr()  .css() .addClass()&lt;/li&gt;
&lt;li&gt;fine tune jQuery collection (.eq(), .slice())&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-3 create new content

&lt;ul&gt;
&lt;li&gt;add new HTML content  &lt;code&gt;$(&#39;&amp;lt;html code&amp;gt;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add new / move existing.  .append(), .before(), .after(), .clone()&lt;/li&gt;
&lt;li&gt;content prune and paste&lt;/li&gt;
&lt;li&gt;show JSON in HTML&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-4 handle events

&lt;ul&gt;
&lt;li&gt;mouse event: click, mousemove, mouseenter, mouseleave&lt;/li&gt;
&lt;li&gt;.on(&amp;lsquo;click&amp;rsquo;, (event)=&amp;gt; { })&lt;/li&gt;
&lt;li&gt;.data(), pass data to event handler when registering&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-5 form

&lt;ul&gt;
&lt;li&gt;text input, selection. get/set with .val()&lt;/li&gt;
&lt;li&gt;events: change, focusin, focusout&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-6 template

&lt;ul&gt;
&lt;li&gt;handlebars&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-7 Charts

&lt;ul&gt;
&lt;li&gt;charts.js&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3-8 advanced concepts

&lt;ul&gt;
&lt;li&gt;event loop&lt;/li&gt;
&lt;li&gt;page loading&lt;/li&gt;
&lt;li&gt;js closure&lt;/li&gt;
&lt;li&gt;bubbling&lt;/li&gt;
&lt;li&gt;default action&lt;/li&gt;
&lt;li&gt;event delegation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3-1 Quick start</title>
      <link>http://comp312.ipm.mo/client/3-1/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-1/</guid>
      <description>

&lt;h2 id=&#34;document-tree-and-javascript-libraries&#34;&gt;document tree and JavaScript libraries&lt;/h2&gt;

&lt;p&gt;When a web browser loads an HTML page from a web server, it converts the HTML code into a tree structured data structure known as &lt;dfn&gt;document tree&lt;/dfn&gt;. All user interaction in the client-side of a web app is done through this DOM tree.&lt;/p&gt;

&lt;p&gt;The Document Object Model [(online ref)][moz-dom] standard defines a programming interface to access the document tree. Each HTML element is represented by a node in the tree. DOM defines the properties, methods and events for these nodes, and the nodes are accessible to JavaScript as objects. In summary, DOM defines how JavaScript code can access and manipulate nodes in a document tree, and all dynamic effects in web pages are realized through document tree manipulation. Demo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;document tree as tree of elements&lt;/li&gt;
&lt;li&gt;node as JavaScript objects: properties and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, using DOM directly takes a lot of efforts. (DOM is complex and verbose.) Developers usually use some higher level JavaScript library to do client-side programming (e.g. &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;Facebook React&lt;/a&gt;, &lt;a href=&#34;https://angular.io/&#34;&gt;Google AngularJS&lt;/a&gt;)  In this chapter, we&amp;rsquo;ll use a popular library called &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A short description of the jQuery library from the &lt;a href=&#34;http://jquery.com/&#34;&gt;official site&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;first-example&#34;&gt;First example&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&#34;http://comp312.ipm.mo/chap3/p301.html&#34;&gt;example&lt;/a&gt; shows several features in client-side web app programming.
In this app, the user enters two numbers in text input boxes, presses a button to calculate the sum, and displays the result in the web page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;First example&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;This example adds two numbers.&amp;lt;/p&amp;gt;
  &amp;lt;!-- define user interface with HTML --&amp;gt;
  &amp;lt;p&amp;gt;a: &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;numA&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;b: &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;numB&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;button type=&#39;button&#39; id=&amp;quot;btnAdd&amp;quot;&amp;gt;Calculate!&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;a+b = &amp;lt;span id=&amp;quot;ans&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;!-- load the jQuery library --&amp;gt;
  &amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    // register event handler for &#39;click&#39; on the button
    $(&#39;#btnAdd&#39;).on(&#39;click&#39;, e =&amp;gt; {
      // read value in input boxes and convert to number
      var a = $(&#39;#numA&#39;).val();
      a = parseInt(a);
      var b = $(&#39;#numB&#39;).val();
      b = parseInt(b);
      // calculate sum and show answer in the &amp;lt;span&amp;gt; element
      $(&#39;#ans&#39;).html(a+b);
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the example shows, there are several common steps in the client-side web app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select elements in DOM tree. jQuery provides the function &lt;code&gt;$(CSS selector)&lt;/code&gt; to select elements with CSS selectors.&lt;/li&gt;
&lt;li&gt;read content of elements. The above example uses the method &lt;code&gt;$().val()&lt;/code&gt; to read input in text box.&lt;/li&gt;
&lt;li&gt;change content of elements. The example uses the method &lt;code&gt;$().html()&lt;/code&gt; to set the element content&lt;/li&gt;
&lt;li&gt;handle events. You can register event handlers for certain event with the method &lt;code&gt;.on(event, callback)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-note-on-loading-javascript-code&#34;&gt;A note on loading JavaScript code&lt;/h2&gt;

&lt;p&gt;In most of our examples, we put JavaScript code near the end of the HTML document. We typically put them before the end tag &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;. This makes sure that the DOM tree is complete when the JavaScript code runs.&lt;/p&gt;

&lt;p&gt;We use the following HTML code to load jQuery library from our local web site (same location as the HTML code). In a more complicated web app, it is better to put JavaScript libraries in their own folder. You can also load the jQuery library from one of the public CDN.  Refer to these pages for detail: &lt;a href=&#34;https://code.jquery.com/&#34;&gt;jQuery CDN&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/speed/libraries/&#34;&gt;Google Hosted Library&lt;/a&gt; and &lt;a href=&#34;https://cdnjs.com/libraries/jquery/&#34;&gt;cdnjs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After loading the jQuery library, we can load our own code. You can save the code in a separate &lt;code&gt;js&lt;/code&gt; file and load with a syntax similar to above. Alternatively, you can &lt;strong&gt;embed&lt;/strong&gt; the code within a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, as in our example.&lt;/p&gt;

&lt;p&gt;We embed JavaScript code in many of our example for sake of simplicity. However, in production code, it is generally recommended to remove JavaScript code from HTML file and move them to external JavaScript file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-2 Select and change</title>
      <link>http://comp312.ipm.mo/client/3-2/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-2/</guid>
      <description>

&lt;p&gt;This lab shows how to select elements in the document tree using the &lt;code&gt;$()&lt;/code&gt; jQuery function. You may then invoke methods on the resultant collection of elements.&lt;/p&gt;

&lt;h2 id=&#34;select-by-css-selectors&#34;&gt;Select by CSS selectors&lt;/h2&gt;

&lt;p&gt;This part uses the example file &lt;a href=&#34;http://comp312.ipm.mo/chap3/p302.html&#34;&gt;p302.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The jQuery library provides a powerful function to select elements from the document tree using CSS selectors. This function is sometimes known as the jQuery function &lt;code&gt;$()&lt;/code&gt;. When provided with a CSS selectors, it returns a collection of HTML elements that are matched by the CSS selector.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#mesg&#39;)&lt;/code&gt; selects the element with id = mesg&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;.big&#39;)&lt;/code&gt; selects all elements that belong to class &amp;lsquo;big&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;a&#39;)&lt;/code&gt; selects all elements of type &lt;code&gt;a&lt;/code&gt; (i.e. all hyperlinks)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;a[href^=&amp;quot;http&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements with &amp;lsquo;href&amp;rsquo; attribute that starts with &amp;ldquo;http&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;img[alt=&amp;quot;tiger&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with &amp;lsquo;alt&amp;rsquo; attribute that equals to &amp;ldquo;tiger&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;img[src$=&amp;quot;png&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with &amp;lsquo;src&amp;rsquo; attribute that ends with &amp;ldquo;png&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;img[src*=&amp;quot;tiger&amp;quot;]&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with &amp;lsquo;src&amp;rsquo; attribute that &lt;em&gt;contains&lt;/em&gt; &amp;ldquo;tiger&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;change-content-and-attributes&#34;&gt;Change content and attributes&lt;/h2&gt;

&lt;p&gt;The result of &lt;code&gt;$(selector)&lt;/code&gt; is a JavaScript object with many built-in methods. This is often called a jQuery collection. You typically use the methods to manipulate the HTML elements in a collection. The following retrieve or change the content of the selected elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).html()&lt;/code&gt; returns the HTML content of the first element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).html(value)&lt;/code&gt; sets the content of all the elements in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).text()&lt;/code&gt; concatenates and returns the text content of all the elements in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).text(value)&lt;/code&gt; sets the content of all the elements in the collection, and escapes the value with HTML entities, if required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access the attributes (e.g. src of &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;), use the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).attr(attrName)&lt;/code&gt; retrieves the attribute value of the named attribute of the first element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).attr(attrName, value)&lt;/code&gt; sets the attribute value of the named attribute of all elements in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Write a JavaScript program to display the Chinese birth sign for a given year birth. Start your work with &lt;a href=&#34;http://comp312.ipm.mo/chap3/p303.html&#34;&gt;p303.html&lt;/a&gt;. Refer to &lt;a href=&#34;http://comp312.ipm.mo/chap3/p303-done.html&#34;&gt;sample answer&lt;/a&gt; for a sample run.&lt;/p&gt;

&lt;p&gt;To make the problem simpler, assume that the birth sign for a whole year is the same. For example, the birth sign for the year 2008 is rat. (In case you don&amp;rsquo;t know what birth sign is, please try &lt;a href=&#34;https://www.travelchinaguide.com/intro/social_customs/zodiac/&#34;&gt;this web site&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;select-by-structure&#34;&gt;Select by structure&lt;/h2&gt;

&lt;p&gt;When the HTML elements you want to select are embedded in other elements, you can use descendant selector, child selector and pseudo-class like &lt;code&gt;:nth-child(n)&lt;/code&gt;. Test the following collection in the example file &lt;a href=&#34;http://comp312.ipm.mo/chap3/p304.html&#34;&gt;p304.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&#39;table#marks td.fail&#39;)&lt;/code&gt; selects some table cells &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; inside a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; with id = &amp;lsquo;marks&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;ol &amp;gt; li:first-child&#39;)&lt;/code&gt; selects the first child of &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;ol  li:first-child&#39;)&lt;/code&gt; selects all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; that is itself a first child. The element must be inside &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to do your own processing on the elements in a jQuery collection, iterate the collection with a &lt;code&gt;for .. of&lt;/code&gt; loop.  Notice that each element retrieved by &lt;code&gt;for .. of&lt;/code&gt; loop is a DOM element object. To use jQuery methods, convert the object into a jQuery collection with &lt;code&gt;$()&lt;/code&gt;.
Test the following in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p304.html&#34;&gt;p304.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// this example adds 1 mark to exam of everybody!
// first, select all cells in the table body
var $cells = $(&#39;table#marks tbody td:nth-child(3)&#39;);
// for each HTML element in the jQuery collection ...
for (var c of $cells) {
  // use $() to make the DOM node into a jQuery collection
  // then, we can use .text() to read content
  var mark = $(c).text();
  mark = parseInt(mark);
  $(c).text(mark+1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;$().each()&lt;/code&gt; method  (see &lt;a href=&#34;http://api.jquery.com/each/&#34;&gt;online reference&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// same effect as above, rewritten using $().each()
// first, select all cells in the table body
var $cells = $(&#39;table#marks tbody td:nth-child(3)&#39;);
// for each HTML element in the jQuery collection ...
$cells.each( (idx, c) =&amp;gt; {
  // use $() to make the DOM node into a jQuery collection
  // then, we can use .text() to read content
  var mark = $(c).text();
  mark = parseInt(mark);
  $(c).text(mark+1);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes, you want to search for elements under a subtree of the DOM tree.  You can use &lt;code&gt;$().find(selector)&lt;/code&gt; to search for elements under the current matched set. For example, &lt;code&gt;$(&#39;div#a&#39;).find(&#39;img&#39;)&lt;/code&gt; will return all &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; that are inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with id = a.  Notice that &lt;code&gt;$(&#39;div#a&#39;).find(&#39;img&#39;)&lt;/code&gt; gives the same jQuery collection as &lt;code&gt;$(&#39;div#a img&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$().find(selector)&lt;/code&gt; selects descendants under each element in the jQuery collection. The descendants must match the selector, if specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().children(selector)&lt;/code&gt; selects direct children under each element in the jQuery collection. The children must match the selector, if specified.&lt;/li&gt;
&lt;li&gt;Similarly, you can find the parents &lt;code&gt;$().parent()&lt;/code&gt; or siblings &lt;code&gt;$().next()&lt;/code&gt;, &lt;code&gt;$().prev()&lt;/code&gt;, &lt;code&gt;$().siblings()&lt;/code&gt; of elements in a jQuery collection.   See &lt;a href=&#34;https://api.jquery.com/category/traversing/tree-traversal/&#34;&gt;online reference&lt;/a&gt; for detail.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this example. We want to calculate the final mark for the students in &lt;code&gt;table#marks&lt;/code&gt;. Final mark = 40% x test mark + 60% x exam mark. Run this example in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p304.html&#34;&gt;p304.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// for each row in the table body
for (var row of $(&#39;#marks tbody tr&#39;)) {
  // get the test mark from the 2nd cell
  var testmark = $(row).find(&#39;td:nth-child(2)&#39;).text();
  testmark = parseFloat(testmark);
  // get the exam mark from the 3rd cell
  var exammark = $(row).find(&#39;td:nth-child(3)&#39;).text();
  exammark = parseFloat(exammark);
  // calculate final mark and show it in the 4th cell
  var final = testmark * 0.4 + exammark * 0.6;
  $(row).find(&#39;td:nth-child(4)&#39;).text(Math.round(final));  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;select-by-position&#34;&gt;Select by position&lt;/h2&gt;

&lt;p&gt;You can select elements in a jQuery collection by position.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).eq(n)&lt;/code&gt; selects a single element at position &lt;code&gt;n&lt;/code&gt; from the jQuery collection. &lt;code&gt;n&lt;/code&gt; starts from 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).length&lt;/code&gt; returns the number of elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).slice(m,n)&lt;/code&gt; selects a range of elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercise-1&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add JavaScript code to &lt;a href=&#34;http://comp312.ipm.mo/chap3/p305.html&#34;&gt;p305.html&lt;/a&gt; to fill in the numbers in the multiplication table &lt;code&gt;table#multitable&lt;/code&gt; when the user clicks the button below the table. You can refer to the output of the &lt;a href=&#34;http://comp312.ipm.mo/chap3/p305-done.html&#34;&gt;sample answer&lt;/a&gt;. However, before attempting to solve the questions, don&amp;rsquo;t read the source code of the answer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is a tic tac toe game board in the file &lt;a href=&#34;http://comp312.ipm.mo/chap3/p306.html&#34;&gt;p306.html&lt;/a&gt;. Write a function &lt;code&gt;show(stones)&lt;/code&gt; to set the game board according to the parameter, which is an array of 9 elements. An element of 0 corresponds to a circle, an element of 1 corresponds to a cross, and an element of 9 corresponds to an empty cell. Refer to the &lt;a href=&#34;http://comp312.ipm.mo/chap3/p306-done.html&#34;&gt;sample answer&lt;/a&gt; for a sample run.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;change-css-styles&#34;&gt;Change CSS styles&lt;/h2&gt;

&lt;p&gt;There are two ways to change the CSS styles of elements. The first method is to add inline style with &lt;code&gt;$().css()&lt;/code&gt;. Try the examples in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p307.html&#34;&gt;p307.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).css(property, value)&lt;/code&gt; sets the CSS property to the specified value for all elements in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you need to set many CSS properties, a more organized method is to write the style change as style rules in CSS style sheet. Assign the style rules to a class, and add the class to the element in runtime. This approach also makes it easy to &amp;lsquo;undo&amp;rsquo; the style change by removing the class from the element. Try the examples in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p308.html&#34;&gt;p308.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(selector).addClass(className)&lt;/code&gt; adds the specified class to the elements in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(selector).removeClass(className)&lt;/code&gt; removes the specified class from the elements in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, define a style rule for the table content and apply the rule to the table element in JavaScript. You may use the following sample.  When you&amp;rsquo;re done, your answer should &lt;a href=&#34;http://comp312.ipm.mo/chap3/p308-done.html&#34;&gt;look like this&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.mystyle tr:nth-child(even) {
  background-color: rgba(50,90,200,0.9);
}
.mystyle tbody td:nth-child(1) { font-weight: bold; }
.mystyle td:nth-child(2) { width: 100px; }
.mystyle td { border: none !important; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(&#39;table#z&#39;).addClass(&#39;mystyle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise-2&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Add JavaScript code to &lt;a href=&#34;http://comp312.ipm.mo/chap3/p309.html&#34;&gt;p309.html&lt;/a&gt; to show student&amp;rsquo;s name and mark. Complete the function &lt;code&gt;show()&lt;/code&gt; according to the comment. You can refer to the output of the &lt;a href=&#34;http://comp312.ipm.mo/chap3/p309-done.html&#34;&gt;sample answer&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function show(name, mark) {
  // display the name in span#name
  // display the mark in span#mark
  // set the width of div#bar to the 2 * mark pixel
  // set its color to
  //    &#39;red&#39; if mark&amp;lt;50,
  //    &#39;yellow&#39; if it is between 50 and 80, and
  //    &#39;green&#39; if it is over 80.
  // your work ...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3-3 Creating new content</title>
      <link>http://comp312.ipm.mo/client/3-3/</link>
      <pubDate>Tue, 31 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-3/</guid>
      <description>

&lt;p&gt;This lab covers how to create new content into the document tree using &lt;code&gt;$()&lt;/code&gt; jQuery functions and methods.&lt;/p&gt;

&lt;h2 id=&#34;create-new-html-content&#34;&gt;Create new HTML content&lt;/h2&gt;

&lt;p&gt;You can create new HTML content by passing HTML code to the jQuery function &lt;code&gt;$(htmlCode)&lt;/code&gt;.  The newly created elements are detached from the current document tree, and not displayed.  To show the content, you have to attach the elements to the document tree.  Run the following code in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p311.html&#34;&gt;p311.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var p = $(&#39;&amp;lt;p&amp;gt;A new paragraph &amp;lt;em&amp;gt;created&amp;lt;/em&amp;gt; by jQuery&amp;lt;/p&amp;gt;&#39;);
dir(p);
// append to the document body to show this element
$(&#39;body&#39;).append(p);
// now you can see it
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you supply HTML code to jQuery function, it returns a jQuery collection, just like the collection returned when you supply a CSS selector. Therefore, you can use the jQuery methods like &lt;code&gt;$().html()&lt;/code&gt; or &lt;code&gt;$().attr()&lt;/code&gt; to configure the newly created elements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var img = $(&#39;&amp;lt;img&amp;gt;&#39;).attr(&#39;src&#39;, &#39;ani/dragon.png&#39;);
$(&#39;body&#39;).append(img);

var link = $(&#39;&amp;lt;a&amp;gt;&#39;).html(&#39;Macao Poly&#39;).attr(&#39;href&#39;, &#39;http://www.ipm.edu.mo&#39;);
// this is the same as $(&#39;&amp;lt;a href=&amp;quot;http://www.ipm.edu.mo&amp;quot;&amp;gt;Macao Poly&amp;lt;/a&amp;gt;&#39;);
$(&#39;body&#39;).append(link);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, you can detach an element from the document tree with &lt;code&gt;$().detach()&lt;/code&gt; or &lt;code&gt;$().remove&lt;/code&gt;, and reinsert it later. To remove all content inside an element, use &lt;code&gt;$(selector).empty()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// move all images to the end of the document
var img = $(&#39;img&#39;).detach();
$(&#39;body&#39;).append(img);

// make the document body empty
$(&#39;body&#39;).empty();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;insert-content-to-document-tree&#34;&gt;Insert content to document tree&lt;/h2&gt;

&lt;p&gt;There are several methods you can use to insert new / existing content into the current document tree.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$().append(content)&lt;/code&gt; - adds the content at the end of each element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().prepend(content)&lt;/code&gt; - adds the content at the start of each element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().after(content)&lt;/code&gt; - adds the content after each element in the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$().before(content)&lt;/code&gt; - adds the content before each element in the collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the source content is already attached to the current document, the content is removed first, and then attached at the target location.  If you want to keep the source content at the original position, clone the source content before inserting with &lt;code&gt;$().clone()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, go through the examples in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p312.html&#34;&gt;p312.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The four insertion methods have a counterpart version that reverse the order of source and target.  (&lt;code&gt;$().appendTo()&lt;/code&gt;, &lt;code&gt;$().prependTo()&lt;/code&gt;, &lt;code&gt;$().insertBefore()&lt;/code&gt; and &lt;code&gt;$().insertAfter()&lt;/code&gt;) They are useful if you want to chain other methods on the source.  See &lt;a href=&#34;https://api.jquery.com/category/manipulation/dom-insertion-inside/&#34;&gt;online reference&lt;/a&gt; or more detail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(&#39;#rooster&#39;).after($(&#39;#tiger&#39;))
// is the same as ...
$(&#39;#tiger&#39;).insertAfter($(&#39;#rooster&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following creates new rows and inserts into the table. See the demo &lt;a href=&#34;http://comp312.ipm.mo/chap3/p313.html&#34;&gt;p313.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var $t = $(&#39;table tbody&#39;);
// clear the table body
$t.empty();
for (var k=16; k&amp;lt;32; k++) {
  // create a new row
  var $r = $(&#39;&amp;lt;tr&amp;gt;&#39;);
  // and append three cells to the row
  $(&#39;&amp;lt;td&amp;gt;&#39;).html(k).appendTo($r);
  $(&#39;&amp;lt;td&amp;gt;&#39;).html(k.toString(2)).appendTo($r);
  $(&#39;&amp;lt;td&amp;gt;&#39;).html(k.toString(16)).appendTo($r);
  // append the row to the table body
  $t.append($r);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;In this exercise, you have to populate an HTML table with JSON data in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p314.html&#34;&gt;p314.html&lt;/a&gt;.  Refer to the &lt;a href=&#34;http://comp312.ipm.mo/chap3/p314-done.html&#34;&gt;sample answer&lt;/a&gt; for the required output format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-4 Handling events</title>
      <link>http://comp312.ipm.mo/client/3-4/</link>
      <pubDate>Wed, 08 Jun 2016 15:46:00 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-4/</guid>
      <description>

&lt;p&gt;This lab covers how to handle events with event handlers using the jQuery library.&lt;/p&gt;

&lt;h2 id=&#34;basic-event-handling&#34;&gt;Basic event handling&lt;/h2&gt;

&lt;p&gt;The basic function to register event handler is &lt;code&gt;$().on(events, handler)&lt;/code&gt; &lt;a href=&#34;https://api.jquery.com/on/&#34;&gt;(online reference)&lt;/a&gt; This method attaches the event handler (a function) to handle the events (e.g &amp;lsquo;click&amp;rsquo;, &amp;lsquo;mousemove&amp;rsquo;) to each element in the jQuery collection. There are different ways to attach event handlers, as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(&#39;button#btn1&#39;).on(&#39;click&#39;, function(event) {
  // do something when the button with id=btn1 is clicked
});

// rewrite using arrow function
$(&#39;button#btn1&#39;).on(&#39;click&#39;, (event) =&amp;gt; {
  // ...
});

// shorthand notation is available for common events
// .. but this is not recommended in this course
$(&#39;button#btn1&#39;).click( (event) =&amp;gt; {
  // ...
});

// your can also define a standalone function and later use it as event handler
function btn1_click (event) {
  // ...
}

$(&#39;button#btn1&#39;).on(&#39;click&#39;, btn1_click);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mouse-event-and-event-object&#34;&gt;Mouse event and event object&lt;/h2&gt;

&lt;p&gt;The browser triggers several mouse-related events when the user interacts with the HTML elements using the mouse. Some common mouse events are: &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;mouseenter&lt;/code&gt;, &lt;code&gt;mouseleave&lt;/code&gt; and &lt;code&gt;mousemove&lt;/code&gt;.
The first parameter of an event handler is an &lt;a href=&#34;http://api.jquery.com/category/events/event-object/&#34;&gt;Event object&lt;/a&gt;.
This object includes several useful properties and methods. One of them is the property &lt;code&gt;.target&lt;/code&gt;, which is the HTML element that triggers the event. The event type is given in the property &lt;code&gt;.type&lt;/code&gt;. The location of the mouse cursor is given in the properties &lt;code&gt;.pageX&lt;/code&gt; and &lt;code&gt;.pageY&lt;/code&gt;. The following code shows how to handle common mouse events. Check a live demo at &lt;a href=&#34;http://comp312.ipm.mo/chap3/p321.html&#34;&gt;p321.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// this event handler handles &#39;click&#39;
$(&#39;#box1&#39;).on(&#39;click&#39;, event =&amp;gt; {
  var x = event.pageX;
  var y = event.pageY;
  console.log(`click: #box1 at (${x}, ${y})`);
});

// this event handler handles both &#39;mouseenter&#39; and &#39;mouseleave&#39;
$(&#39;#box1&#39;).on(&#39;mouseenter mouseleave&#39;, event =&amp;gt; {
  var x = event.pageX;
  var y = event.pageY;
  var type = event.type;
  console.log(`${type}: #box1 at (${x}, ${y})`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In some cases, we need to handle the same event type triggered at many elements. For example,
in &lt;a href=&#34;http://comp312.ipm.mo/chap3/p322.html&#34;&gt;p322.html&lt;/a&gt;, when the user clicks at one of the 12 images, it slowly fades out (to 0.1 opacity), and then slowly fades in (back to 1.0 opacity). (This example uses the jQuery method &lt;code&gt;$().fadeTo&lt;/code&gt; &lt;a href=&#34;http://api.jquery.com/fadeTo/&#34;&gt;(online reference)&lt;/a&gt; to do the animation.)
This animation is done with one event handler, which needs to find out which image is clicked via &lt;code&gt;event.target&lt;/code&gt;. Notice that in order to apply jQuery methods, we have to wrap the DOM element &lt;code&gt;event.target&lt;/code&gt; as a jQuery collection &lt;code&gt;$(event.target)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// register the same event handler function to the 12 images
$(&#39;#zodiac img&#39;).on(&#39;click&#39;, event =&amp;gt; {
  // use event.target to find out which image is clicked
  // do something on it, e.g. $(event.target).fadeOut();
  $(event.target).fadeTo(1000, 0.1,
    ()=&amp;gt;{$(event.target).fadeTo(3000, 1)});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;attach-data-to-dom-elements&#34;&gt;Attach data to DOM elements&lt;/h2&gt;

&lt;p&gt;Although we can distinguish which element triggers an event with &lt;code&gt;event.target&lt;/code&gt;, usually it is more convenient if we can pass some application specific information (e.g. record id) to the event handler.  There are several ways to do this.  The code below are extracted from a simple Tic-tac-toe example &lt;a href=&#34;http://comp312.ipm.mo/chap3/p323.html&#34;&gt;p323.html&lt;/a&gt; and uses the jQuery method &lt;code&gt;$().data(name, value)&lt;/code&gt; to attach any JavaScript data to a DOM element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- the tic tac toe game board is a 3x3 table --&amp;gt;
&amp;lt;table id=&#39;tic&#39; class=&#39;gameboard&#39;&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;script&amp;gt;
// attach pos=0, pos=1, .., pos=8 to the 9 table cells
for (var k=0; k&amp;lt;$(&#39;#tic td&#39;).length; k++) {
  $(&#39;#tic td&#39;).eq(k).data(&#39;pos&#39;, k);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the event handler for click on the table cells &lt;code&gt;#tic td&lt;/code&gt;, we use &lt;code&gt;$(event.target).data(&#39;pos&#39;)&lt;/code&gt; to retrieve the position (0-8) of the clicked cell, and update the game board data structure accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var board = [9,9,9,9,9,9,9,9,9];
// player &#39;circle&#39; plays first
var current = 0;

$(&#39;#tic td&#39;).on(&#39;click&#39;, (event)=&amp;gt;{
  // which position (0-8) is clicked?
  var pos = $(event.target).data(&#39;pos&#39;);
  // update the game board data structure
  board[pos] = current;
  // display a circle or cross
  var image = (current==0) ? &#39;url(circle.png)&#39; : &#39;url(cross.png)&#39;;
  $(event.target).css(&#39;background-image&#39;, image);
  // change player
  current = (current==0) ? 1 : 0;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pass-data-to-event-handler&#34;&gt;Pass data to event handler&lt;/h2&gt;

&lt;p&gt;Instead of attaching JavaScript data to DOM element, you can specify these JavaScript data when registering an event handler. When the event triggers, jQuery passes the specified data to the event handler as &lt;code&gt;event.data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This example (&lt;a href=&#34;http://comp312.ipm.mo/chap3/p324.html&#34;&gt;p324.html&lt;/a&gt;) specifies a row number while it registers an event handler for each row in an existing HTML table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var $rows = $(&#39;#marks tbody tr&#39;);
for (var i=0; i&amp;lt;$rows.length; i++) {
  $rows.eq(i).on(&#39;click&#39;, { rowNum: i }, (event) =&amp;gt; {
    var n = event.data.rowNum;
    console.log(`click row ${n}`);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following code snippet comes from the example (&lt;a href=&#34;http://comp312.ipm.mo/chap3/p325.html&#34;&gt;p325.html&lt;/a&gt;). This app populates an HTML table with some mark data for students in runtime, and attaches the event handler to a newly created table row for each student.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function populateMarkTable (marks) {
  $(&#39;#marks caption&#39;).text(`Marks for ${marks.courseCode}`);
  $(&#39;#marks tbody&#39;).empty();
  for (var k=0; k&amp;lt;marks.student.length; k++) {
    var stud=marks.student[k];
    // calculate course, exam and final for this student
    // ...
    var $r = $(&#39;&amp;lt;tr&amp;gt;&#39;);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(stud.name).appendTo($r);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(course).appendTo($r);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(exam).appendTo($r);
    $(&#39;&amp;lt;td&amp;gt;&#39;).text(final).appendTo($r);
    // pass a student record to the event handler
    // when the mouse is over this row
    $r.on(&#39;mouseenter&#39;, { stud: stud }, displayMarkDetail);
    $(&#39;#marks tbody&#39;).append($r);
  }
}

function displayMarkDetail (event) {
  // event.data.stud is the record of the student selected
  var stud = event.data.stud;
  var s = `The student ${stud.name} has got ${stud.hw.join(&#39;,&#39;)} in assignments, `;
  s += `${stud.test.join(&#39;,&#39;)} in tests, and ${stud.exam} in exam.`;
  $(&#39;p#detail&#39;).text(s);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3-5 Form controls</title>
      <link>http://comp312.ipm.mo/client/3-5/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-5/</guid>
      <description>

&lt;p&gt;This lab covers jQuery methods and events related to form control.&lt;/p&gt;

&lt;h2 id=&#34;text-input&#34;&gt;Text input&lt;/h2&gt;

&lt;p&gt;The basic control for entering text is text input boxes. Use the method &lt;code&gt;$().val()&lt;/code&gt; to get / set the value of a text input box.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;input type=&#39;text&#39; name=&#39;email&#39; value=&#39;initial value&#39;/&amp;gt;

&amp;lt;script&amp;gt;
  // use attribute &#39;name&#39; to select the input control
  // use .val() to read the text value
  var s = $(&#39;input[name=&amp;quot;email&amp;quot;]&#39;).val();

  // change the text value of the text input box
  $(&#39;input[name=&amp;quot;email&amp;quot;]&#39;).val(&#39;peter@ipm.edu.mo&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the input box gains the input focus, keyboard input changes its value. Try the demo
&lt;a href=&#34;http://comp312.ipm.mo/chap3/p341.html&#34;&gt;p341.html&lt;/a&gt; and examine when the events &lt;code&gt;focusin&lt;/code&gt;, &lt;code&gt;focusout&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt;
occur.&lt;/p&gt;

&lt;h2 id=&#34;selection&#34;&gt;Selection&lt;/h2&gt;

&lt;p&gt;There are several form controls that allow the user to select one out of several options. The HTML &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element is the easiest to work with using jQuery. The following code snippet from the demo
&lt;a href=&#34;http://comp312.ipm.mo/chap3/p342.html&#34;&gt;p342.html&lt;/a&gt; demonstrates how to set/change the selection. The demo also shows some events that the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element fires.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;select name=&amp;quot;program&amp;quot;&amp;gt;
  &amp;lt;option value=&#39;computing&#39;&amp;gt;Computing&amp;lt;/option&amp;gt;
  &amp;lt;option value=&#39;social&#39;&amp;gt;Social works&amp;lt;/option&amp;gt;
  &amp;lt;option value=&#39;pa&#39;&amp;gt;Public admin&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;

&amp;lt;script&amp;gt;
  // use attribute &#39;name&#39; to select the select control
  // use .val() to read the value of the selected option
  var s = $(&#39;select[name=&amp;quot;program&amp;quot;]&#39;).val();
  // s is either &#39;computing&#39;, &#39;social&#39; or &#39;pa&#39;

  // change the selected option
  $(&#39;select[name=&amp;quot;program&amp;quot;]&#39;).val(&#39;computing&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another common control to capture user selection is radio button groups.
They are more tricky to work with because the radio buttons in a group share the same &lt;code&gt;name&lt;/code&gt;.
To find out which button is checked, use the pseudo class &lt;code&gt;$(&#39;input[ ]:checked&#39;)&lt;/code&gt;.
It is also tricky to check an option in a radio button group: you have to put the value inside an array. Try the demo
&lt;a href=&#34;http://comp312.ipm.mo/chap3/p343.html&#34;&gt;p343.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;IQ&amp;quot; value=&amp;quot;low&amp;quot;/&amp;gt;&amp;amp;lt;80
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;IQ&amp;quot; value=&amp;quot;normal&amp;quot;/&amp;gt;80-120
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;IQ&amp;quot; value=&amp;quot;high&amp;quot;/&amp;gt;&amp;amp;gt;120

&amp;lt;script&amp;gt;
  // find out which radio button is selected
  var s = $(&#39;input[name=IQ]:checked&#39;).val();

  // to select an option. notice that you need to put the value in array
  $(&amp;quot;input[name=IQ]&amp;quot;).val([&#39;high&#39;]);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A special case of selection is to ask a yes/no question. Usually, you would use a checkbox to ask a yes/no question. Although you can still use selector and methods similar to those of radio button groups to handle checkbox, it is usually easier to use the DOM property &lt;code&gt;checked&lt;/code&gt; directly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Real? &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;real&amp;quot; value=&#39;yes&#39;/&amp;gt;

&amp;lt;script&amp;gt;
  // to find out whether the checkbox is checked
  var checked = $(&#39;input[name=&amp;quot;real&amp;quot;]&#39;).prop(&#39;checked&#39;);
  // true or false

  // to check the checkbox
  $(&#39;input[name=&amp;quot;real&amp;quot;]&#39;).prop(&#39;checked&#39;, true);

  // to uncheck the checkbox
  $(&#39;input[name=&amp;quot;real&amp;quot;]&#39;).prop(&#39;checked&#39;, false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above form controls to make selection may trigger several events: &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt;. The most commonly used is perhaps &lt;code&gt;change&lt;/code&gt;, which fires when the selection changes. It fires before the control loses focus. (change event in text input box fires after the control loses focus.) The following code snippet comes from the demo
&lt;a href=&#34;http://comp312.ipm.mo/chap3/p344.html&#34;&gt;p344.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;Which OS are you running?
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;os&amp;quot; value=&amp;quot;windows&amp;quot;&amp;gt; Windows
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;os&amp;quot; value=&amp;quot;macos&amp;quot;&amp;gt; macOS
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;os&amp;quot; value=&amp;quot;other&amp;quot;&amp;gt; Other:
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;otheros&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;
$(&#39;input[name=&amp;quot;os&amp;quot;]&#39;).on(&#39;change&#39;, (event)=&amp;gt;{
  // the radio button that the user checks
  if ($(event.target).val()===&#39;other&#39;) {
    $(&#39;input[name=&amp;quot;otheros&amp;quot;]&#39;).prop(&#39;disabled&#39;, false);
  } else {
    // disable the input text box, and clear its content
    $(&#39;input[name=&amp;quot;otheros&amp;quot;]&#39;).prop(&#39;disabled&#39;, true).val(&#39;&#39;);
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;!--
```JavaScript
// Disable #x
$( &#34;#x&#34; ).prop( &#34;disabled&#34;, true );
// disabled attribute in HTML

// readOnly
```

## form submission ##

event. default action
--&gt;
</description>
    </item>
    
    <item>
      <title>3-6 Template</title>
      <link>http://comp312.ipm.mo/client/3-6/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-6/</guid>
      <description>

&lt;p&gt;When you need to display complicated JSON data in HTML with some repetitive parts, it is often more convenient to use a template library. This lab demonstrates how to use a template library called Handlebars. &lt;a href=&#34;http://handlebarsjs.com/&#34;&gt;online reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://comp312.ipm.mo/chap3/p361.html&#34;&gt;p361.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Writing plan:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;template + context (data object) =&amp;gt; html code&lt;/li&gt;
&lt;li&gt;setup: load handlebars.js, embed template in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, functions call&lt;/li&gt;
&lt;li&gt;{{}} handlebars expression&lt;/li&gt;
&lt;li&gt;{{#each array}}&lt;/li&gt;
&lt;li&gt;{{#if}}&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;basic-operation&#34;&gt;Basic operation&lt;/h2&gt;

&lt;p&gt;There are many HTML template systems. While their syntax can be quite different, the basic operation remains similar. First, a template defines the presentation of some data in some format. Handlebars uses HTML code directly in the template. In the template, there are some placeholders, to be replaced by some data later. In Handlebars, these placeholders use the expression &lt;code&gt;{{ }}&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- a handlerbars template with two placeholders --&amp;gt;
&amp;lt;div class=&amp;quot;entry&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;
  &amp;lt;div class=&amp;quot;body&amp;quot;&amp;gt;
    {{body}}
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data used to fill in the template is often called the context object. It is a JavaScript object whose properties have names corresponding to the placeholders in the template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var context = { title: &#39;My first post&#39;, body: &amp;quot;This is my first post!&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to fill in the placeholders in the template with the data in the context. &lt;em&gt;(template + context =&amp;gt; html code)&lt;/em&gt; The JavaScript code to do this is &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// the template as string
var source = &amp;quot;&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;&amp;quot;;
// compile the template string into a function
// this function can be used multiple times
var template = Handlebars.compile(source);
// put data in context object
var context = {title: &amp;quot;My First Post&amp;quot;, body: &amp;quot;This is my first post!&amp;quot;};
// call the template function to render the data
var html = template(context);
// the function returns the following HTML code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The template function in the last line returns the following HTML code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- the placeholders are replaced by data in the context --&amp;gt;
&amp;lt;div class=&amp;quot;entry&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;My First Post&amp;lt;/h1&amp;gt;
  &amp;lt;div class=&amp;quot;body&amp;quot;&amp;gt;
    This is my first post!
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are some technical detail to embed the template in the HTML file and load the Handlebars library. Please refer to source code of &lt;a href=&#34;http://comp312.ipm.mo/chap3/p361.html&#34;&gt;p361.html&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;loop&#34;&gt;Loop&lt;/h2&gt;

&lt;p&gt;Handlebars provides the block helper &lt;code&gt;{{#each property}} ... {{/each}}&lt;/code&gt; to
repeat part of the template for each element in the named property, which is an array.
For example, we have an array of color in this context object in the example &lt;a href=&#34;http://comp312.ipm.mo/chap3/p362.html&#34;&gt;p362.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var palette = { color: [
  { name: &#39;purple&#39;,  hexrgb: &#39;#800080&#39;, decrgb: [128,0,128]},
  { name: &#39;fuchsia&#39;, hexrgb: &#39;#FF00FF&#39;, decrgb: [255,0,255]},
  { name: &#39;lime&#39;,    hexrgb: &#39;#00FF00&#39;, decrgb: [0, 255, 0]},
  { name: &#39;teal&#39;,    hexrgb: &#39;#008080&#39;, decrgb: [0,128,128]},
  { name: &#39;aqua&#39;,    hexrgb: &#39;#00FFFF&#39;, decrgb: [0,255,255]},
  { name: &#39;blue&#39;,    hexrgb: &#39;#0000FF&#39;, decrgb: [0,0,255]}
]};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the following template to display the context object. The template generates one row for each element in the array &lt;code&gt;color&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;table class=&amp;quot;color-table&amp;quot;&amp;gt;
&amp;lt;thead&amp;gt;
  &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Color Name&amp;lt;td&amp;gt;Hex Code RGB&amp;lt;td&amp;gt;Decimal Code RGB&amp;lt;/tr&amp;gt;
&amp;lt;tbody&amp;gt;
  {{#each color}}
  &amp;lt;tr style=&amp;quot;background-color: {{name}}; color: white&amp;quot;&amp;gt;
    &amp;lt;td&amp;gt;{{name}}
    &amp;lt;td&amp;gt;{{hexrgb}}
    &amp;lt;td&amp;gt;{{decrgb}}
  &amp;lt;/tr&amp;gt;
  {{/each}}
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the pair &lt;code&gt;{{#each color}}&lt;/code&gt; and &lt;code&gt;{{/each}}&lt;/code&gt;, the placeholders refer to each element in the array. Notice that we can also interpolate value in HTML attribute.&lt;/p&gt;

&lt;h2 id=&#34;condition&#34;&gt;Condition&lt;/h2&gt;

&lt;p&gt;Suppose you have some objects that represent email. You want to show different icons to distinguish read email from unread email.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var email1 = { read: true, sender: &#39;Peter&#39;, subject: &#39;..&#39; };
var email2 = { read: false, sender: &#39;John&#39;, subject: &#39;..&#39; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The block helper &lt;code&gt;{{#if}}&lt;/code&gt; supports simple conditional display of template content. In the following template, the first image is only shown when &lt;code&gt;read===true&lt;/code&gt;. Otherwise, only the second image is shown. See &lt;a href=&#34;http://comp312.ipm.mo/chap3/p363.html&#34;&gt;p363.html&lt;/a&gt; for the source code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;p&amp;gt;
  {{#if read}}
  &amp;lt;img src=&amp;quot;mail-read.png&amp;quot;/&amp;gt;
  {{else}}
  &amp;lt;img src=&amp;quot;mail-unread.png&amp;quot;/&amp;gt;
  {{/if}}
  &amp;lt;span class=&#39;sender&#39;&amp;gt;{{sender}}&amp;lt;/span&amp;gt;
  &amp;lt;span class=&#39;subject&#39;&amp;gt;{{subject}}&amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;advanced-example&#34;&gt;Advanced example&lt;/h2&gt;

&lt;p&gt;We end this lab with an advanced example &lt;a href=&#34;http://comp312.ipm.mo/chap3/p364.html&#34;&gt;p364.html&lt;/a&gt;. This example uses
template to show lecture time table. The template uses both &lt;code&gt;{{#each}}&lt;/code&gt; and &lt;code&gt;{{#if}}&lt;/code&gt;.
Notice that you cannot include JavaScript code in the template. Therefore, you need to add properties to the context object in JavaScript before passing the context to the template.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-7 Charts</title>
      <link>http://comp312.ipm.mo/client/3-7/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-7/</guid>
      <description>

&lt;p&gt;This lab is about a JavaScript charting library called &lt;a href=&#34;http://www.chartjs.org/&#34;&gt;Chart.js&lt;/a&gt;. You can use charts to visualize complicated data. In addition, this library also demonstrate a common design in JavaScript API: using JSON data to provide complex options.&lt;/p&gt;

&lt;h2 id=&#34;basic-operation&#34;&gt;Basic operation&lt;/h2&gt;

&lt;p&gt;We call the constructor of class &lt;code&gt;Chart&lt;/code&gt; to create a chart. The constructor accepts two parameters: the first is a canvas element, and the second is a JSON data object (a JavaScript object) which has at least three properties: chart type, data to be plotted, and options. Try the demo &lt;a href=&#34;http://comp312.ipm.mo/chap3/p371.html&#34;&gt;p371.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- a canvas where we&#39;ll draw a bar chart --&amp;gt;
&amp;lt;canvas id=&amp;quot;myChart&amp;quot; width=&amp;quot;400&amp;quot; height=&amp;quot;400&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;

&amp;lt;!-- load the Chart.js library --&amp;gt;
&amp;lt;script src=&amp;quot;Chart.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
// search for the canvas element, and
// pass as 1st parameter to the constructor
var canvas = $(&amp;quot;#myChart&amp;quot;);
// the 2nd parameter is JSON data
var myChart = new Chart(canvas, {
    type: &#39;bar&#39;,
    data: data,
    options: options
  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, &lt;code&gt;chart&lt;/code&gt; is an object. You can check its structure in the browser. You can even change the data and update the chart.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;dir(chart); // check object structure
// change the data in the 1st dataset
chart.data.datasets[0].data = [ 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];
chart.update();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let&amp;rsquo;s examine the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; properties. They are JSON data object, and
can get quite complicated. So let&amp;rsquo;s start with a simpler version. Below is a simplified version of &lt;a href=&#34;http://comp312.ipm.mo/chap3/p371.html&#34;&gt;p371.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var chart = new Chart(canvas, {
  type: &#39;bar&#39;,
  data: {
    labels: [ &#39;A&#39;, &#39;A-&#39;, &#39;B+&#39;, &#39;B&#39;, &#39;B-&#39;, &#39;C+&#39;, &#39;C&#39;, &#39;C-&#39;, &#39;D+&#39;, &#39;D&#39;, &#39;F&#39; ],
    datasets: [{
      label: &#39;#students&#39;,
      data: [ 3, 3, 5, 6, 4, 4, 7, 4, 2, 5, 5 ],
    }]
  },
  options: { }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;more-datasets-and-options&#34;&gt;More datasets and options&lt;/h2&gt;

&lt;p&gt;Notice that the property &lt;code&gt;datasets&lt;/code&gt; has array value, because the chart can display more than one dataset. See &lt;a href=&#34;http://comp312.ipm.mo/chap3/p372.html&#34;&gt;p372.html&lt;/a&gt; for an example of two datasets. This example also shows how the options object groups various settings. Please refer to &lt;a href=&#34;http://www.chartjs.org/docs/&#34;&gt;Chart.js online reference&lt;/a&gt; for detail.&lt;/p&gt;

&lt;p&gt;We end this lab with an example of line chart with 4 datasets. See
&lt;a href=&#34;http://comp312.ipm.mo/chap3/p373.html&#34;&gt;p373.html&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3-8 Page load and others</title>
      <link>http://comp312.ipm.mo/client/3-8/</link>
      <pubDate>Fri, 24 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://comp312.ipm.mo/client/3-8/</guid>
      <description>

&lt;p&gt;Writing plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;page load: two events: DOM ready, page load done.&lt;/li&gt;
&lt;li&gt;most resources are loaded in parallel to DOM building&lt;/li&gt;
&lt;li&gt;exception: &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;error in the middle of script element&lt;/li&gt;
&lt;li&gt;long load time of &lt;code&gt;&amp;lt;script src=..&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DOM tree is incomplete when the browser is blocked by &lt;code&gt;script&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;so &amp;hellip; defer loading of script at the end of body&lt;/li&gt;
&lt;li&gt;or &amp;hellip; $(function() { &amp;hellip; })&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asynchronous programming&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;callback, 2 kinds: synchronous and asynchronous.&lt;/li&gt;
&lt;li&gt;.. [].map(x=&amp;gt;x+1) vs. $().on(&amp;lsquo;click&amp;rsquo;, (e)=&amp;gt;{ }) or setTimeOut()&lt;/li&gt;
&lt;li&gt;JS is single threaded&lt;/li&gt;
&lt;li&gt;event loop runs while DOM is loading? i believe NO&lt;/li&gt;
&lt;li&gt;experiment: setTimeOut(), then alert() to block the thread&lt;/li&gt;
&lt;li&gt;dispatch event handler 1 by 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Event delegation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$().on( ) does not bind to new elements&lt;/li&gt;
&lt;li&gt;bubbling&lt;/li&gt;
&lt;li&gt;delegation. event.target, event.currentTarget&lt;/li&gt;
&lt;li&gt;handle in ancestor&lt;/li&gt;

&lt;li&gt;&lt;p&gt;stop propagation&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;register at an ancestor&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add selector in &lt;code&gt;$().on()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;works for newly added elements&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.. but cannot add instance specific data in &lt;code&gt;.on()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.. solution: attach data to the instance with &lt;code&gt;$().data()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make an example of dynamically added elements&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-operation&#34;&gt;Basic operation&lt;/h2&gt;

&lt;p&gt;We call the constructor of class &lt;code&gt;Chart&lt;/code&gt; to create a chart. The constructor accepts two parameters: the first is a canvas element, and the second is a JSON data object (a JavaScript object) which has at least three properties: chart type, data to be plotted, and options. Try the demo &lt;a href=&#34;http://comp312.ipm.mo/chap3/p371.html&#34;&gt;p371.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!-- a canvas where we&#39;ll draw a bar chart --&amp;gt;
&amp;lt;canvas id=&amp;quot;myChart&amp;quot; width=&amp;quot;400&amp;quot; height=&amp;quot;400&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>