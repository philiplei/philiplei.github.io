<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Client-side programming on COMP312 labs</title>
    <link>http://philiplei.github.io/client/</link>
    <description>Recent content in Client-side programming on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 May 2016 10:14:43 +0800</lastBuildDate>
    
	<atom:link href="http://philiplei.github.io/client/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3-1 Quick start</title>
      <link>http://philiplei.github.io/client/3-1/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-1/</guid>
      <description>document tree and JavaScript libraries When a web browser loads an HTML page from a web server, it converts the HTML code into a tree formed data structure known as document tree. All user interactions in the client-side of a web app are done through this DOM tree.
The Document Object Model standard (online ref) defines a programming interface to access the document tree. Each HTML element is represented by a node in the tree.</description>
    </item>
    
    <item>
      <title>3-2 Select and change</title>
      <link>http://philiplei.github.io/client/3-2/</link>
      <pubDate>Mon, 30 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-2/</guid>
      <description>This lab shows how to select elements in the document tree using the $() jQuery function. You may then invoke methods on the resultant collection of elements.
Select by CSS selectors This part uses the example file p302.html.
The jQuery library provides a powerful function to select elements from the document tree using CSS selectors. This function is sometimes known as the jQuery function $(). When provided with a CSS selectors, it returns a collection of HTML elements that are matched by the CSS selector.</description>
    </item>
    
    <item>
      <title>3-3 Creating new content</title>
      <link>http://philiplei.github.io/client/3-3/</link>
      <pubDate>Tue, 31 May 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-3/</guid>
      <description>This lab covers how to create new content into the document tree using $() jQuery functions and methods.
Create new HTML content You can create new HTML content by passing HTML code to the jQuery function $(htmlCode). The newly created elements are detached from the current document tree, and not displayed. To show the content, you have to attach the elements to the document tree. Run the following code in p311.</description>
    </item>
    
    <item>
      <title>3-4 Handling events</title>
      <link>http://philiplei.github.io/client/3-4/</link>
      <pubDate>Wed, 08 Jun 2016 15:46:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-4/</guid>
      <description>This lab covers how to handle events with event handlers using the jQuery library.
Basic event handling The basic function to register event handler is $().on(events, handler) (online reference) This method attaches the event handler (a function) to handle the events (e.g &amp;lsquo;click&amp;rsquo;, &amp;lsquo;mousemove&amp;rsquo;) to each element in the jQuery collection. There are different ways to attach event handlers, as shown below.
$(&#39;button#btn1&#39;).on(&#39;click&#39;, function(event) { // do something when the button with id=btn1 is clicked }); // rewrite using arrow function $(&#39;button#btn1&#39;).</description>
    </item>
    
    <item>
      <title>3-5 Form controls</title>
      <link>http://philiplei.github.io/client/3-5/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-5/</guid>
      <description>This lab covers jQuery methods and events related to form control.
Text input The basic control for entering text is text input boxes. Use the method $().val() to get / set the value of a text input box.
&amp;lt;input type=&#39;text&#39; name=&#39;email&#39; value=&#39;initial value&#39;/&amp;gt; &amp;lt;script&amp;gt; // use attribute &#39;name&#39; to select the input control // use .val() to read the text value var s = $(&#39;input[name=&amp;quot;email&amp;quot;]&#39;).val(); // change the text value of the text input box $(&#39;input[name=&amp;quot;email&amp;quot;]&#39;).</description>
    </item>
    
    <item>
      <title>3-6 Templates</title>
      <link>http://philiplei.github.io/client/3-6/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-6/</guid>
      <description>When you need to display complicated JSON data in HTML with some repetitive parts, it is often more convenient to use a template library. This lab demonstrates how to use a template library called Handlebars (online reference)
Basic operation There are many HTML template systems. While their syntax can be quite different, the basic operation remains similar. It can be described as &amp;ldquo;template + context (data object) =&amp;gt; html code&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>3-7 Charts</title>
      <link>http://philiplei.github.io/client/3-7/</link>
      <pubDate>Fri, 10 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-7/</guid>
      <description>This lab is about a JavaScript charting library called Chart.js. You can use charts to visualize complicated data. In addition, this library also demonstrates a common design pattern in JavaScript: using JSON data to provide complex options.
Basic operation We call the constructor of class Chart to create a chart. The constructor accepts two parameters: the first is a &amp;lt;canvas&amp;gt; element, and the second is a JSON data object (a JavaScript object) which has at least three properties: chart type, data to be plotted, and options.</description>
    </item>
    
    <item>
      <title>3-8 Script execution in browsers</title>
      <link>http://philiplei.github.io/client/3-8/</link>
      <pubDate>Fri, 24 Jun 2016 12:40:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/client/3-8/</guid>
      <description>In all previous example in this chapter, we put &amp;lt;script&amp;gt; elements near the end of an HTML document. The reason is that the document tree is (almost) complete when these &amp;lt;script&amp;gt; executes. Now, we&amp;rsquo;ll explain the rationale for this scheme and discuss the JavaScript execution in browsers.
&amp;lt;!doctype html&amp;gt; ... &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;content for building document tree&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt; &amp;lt;!-- load external script library --&amp;gt; &amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // embedded script &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;  Page load Page loading refers to the steps that a browser performs to load the various components of a web page.</description>
    </item>
    
  </channel>
</rss>