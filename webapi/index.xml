<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webapis on COMP312 labs</title>
    <link>http://philiplei.github.io/webapi/</link>
    <description>Recent content in Webapis on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Oct 2016 08:36:00 +0800</lastBuildDate>
    <atom:link href="http://philiplei.github.io/webapi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ajax and Web API</title>
      <link>http://philiplei.github.io/webapi/</link>
      <pubDate>Wed, 26 Oct 2016 08:36:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/</guid>
      <description>

&lt;h2 id=&#34;ajax-and-web-api&#34;&gt;Ajax and Web API&lt;/h2&gt;

&lt;p&gt;This chapter goes through the design, implementation and consumption of a Web API. We conclude this chapter with an Ajax web app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5-1. Desigining a Web API

&lt;ul&gt;
&lt;li&gt;URL as operation, GET vs. POST&lt;/li&gt;
&lt;li&gt;input parameters as urlencoded or JSON&lt;/li&gt;
&lt;li&gt;output payload as urlencoded or JSON&lt;/li&gt;
&lt;li&gt;RPC-style&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5-2. Implementing a Web API

&lt;ul&gt;
&lt;li&gt;Implement using Express&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5-3. A client that consumes the Web API

&lt;ul&gt;
&lt;li&gt;Implement using jQuery&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>5-1 Designing a Web API</title>
      <link>http://philiplei.github.io/webapi/5-1/</link>
      <pubDate>Wed, 26 Oct 2016 08:23:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/5-1/</guid>
      <description>

&lt;p&gt;In an Ajax web app, the application server implements a Web API that provides service to the front-end JavaScript code.&lt;/p&gt;

&lt;p&gt;A &lt;dfn&gt;Web API&lt;/dfn&gt; is a defined set of HTTP request messages along with a definition of the structure of response messages, usually expressed in an XML or JSON format (from &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_API&#34;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;rpc-style-web-api&#34;&gt;RPC-style Web API&lt;/h2&gt;

&lt;p&gt;A common design style of Web API is RPC-style (Remote Procedure Call). A RPC-style Web API allocates &lt;em&gt;one URL for each function or operation&lt;/em&gt;.  These URLs represent an action and are usually named with a verb.  The following table shows the five endpoints in the Web API of our sample web app. They implement four common operations on data known as CRUD (Create, Retrieve, Update and Delete).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/getTodo&lt;/td&gt;
&lt;td&gt;List all tasks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/searchTodo&lt;/td&gt;
&lt;td&gt;Search tasks that are due before the given date.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/addTodo&lt;/td&gt;
&lt;td&gt;Add a new task&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/updateTodo&lt;/td&gt;
&lt;td&gt;Update a task&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/deleteTodo&lt;/td&gt;
&lt;td&gt;Delete a task&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each endpoint is identified with the HTTP method (either GET or POST) and an URL.
An endpoint uses &lt;strong&gt;GET&lt;/strong&gt; if the operation is &lt;em&gt;read-only&lt;/em&gt;. If the operation may causes some action or side-effect on the server side, the endpoint must use &lt;strong&gt;POST&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In addition, when you design a Web API, you also need to specify:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;input parameters, whether they are urlencoded or json format, and whether to pass them in URL query or request message body&lt;/li&gt;
&lt;li&gt;results, whether they are urlencoded or json format&lt;/li&gt;
&lt;li&gt;error reporting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;read-only-operations&#34;&gt;Read-only operations&lt;/h3&gt;

&lt;p&gt;A Web API may return result in either key-value pairs (www-url-encoded) or JSON.
Key-value pairs are only suitable for simple values. JSON is more flexible in representing data structure. Therefore, we&amp;rsquo;ll use JSON payload as result in responses of Web API.&lt;/p&gt;

&lt;p&gt;Sample request message to retrieve tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;GET /getTodo HTTP/1.1
Host: example.com

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a sample response message returned by the Web API. The JSON payload has &lt;code&gt;Content-type: applicatin/json&lt;/code&gt;. The &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON data format&lt;/a&gt; is mostly the same as JavaScript object syntax. But it can only contain simple values (namely numbers, strings and boolean) and all property names must be quoted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 200 Ok
Content-type: application/json
Content-length: 234

{
  &amp;quot;count&amp;quot;: 2,
  &amp;quot;task&amp;quot;: [     
    { &amp;quot;id&amp;quot;: 1, &amp;quot;due&amp;quot;: &amp;quot;2016-11-11&amp;quot;, &amp;quot;what&amp;quot;: &amp;quot;Test&amp;quot;,
      &amp;quot;category&amp;quot;: &amp;quot;study&amp;quot;, &amp;quot;done&amp;quot;: 0 },
    { &amp;quot;id&amp;quot;: 2, &amp;quot;due&amp;quot;: &amp;quot;2016-12-13&amp;quot;, &amp;quot;what&amp;quot;: &amp;quot;Final exam&amp;quot;,
      &amp;quot;category&amp;quot;: &amp;quot;study&amp;quot;, &amp;quot;done&amp;quot;: 0 }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A client may pass simple parameters to the Web API using &lt;em&gt;query&lt;/em&gt;. This is similar to web search form submission. Below is a request for the endpoint &lt;code&gt;GET /searchTodo&lt;/code&gt; to search tasks that are due before a given date. Note that HTTP GET requests &lt;em&gt;cannot&lt;/em&gt; contain a body, so any data must be passed in the URL. We cannot use JSON format for input parameters to GET endpoints.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;GET /searchTodo?before=2016-12-01 HTTP/1.1
Host: example.com

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some designers use HTTP status codes like &lt;code&gt;400&lt;/code&gt; and &lt;code&gt;500&lt;/code&gt; to report runtime error. Other designers choose to use the JSON payload to report error. What is important is that you should be consistent.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 400 Bad Request
Content-type: application/json
Content-length: 62

{ &amp;quot;errorCode&amp;quot;: 1001, &amp;quot;message&amp;quot;: &amp;quot;Date format error in input&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 500 Internal Server Error
Content-type: application/json
Content-length: 63

{ &amp;quot;errorCode&amp;quot;: 1002, &amp;quot;message&amp;quot;: &amp;quot;Database connection problem&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 200 Ok
Content-type: application/json
Content-length: 63

{ &amp;quot;errorCode&amp;quot;: 1002, &amp;quot;message&amp;quot;: &amp;quot;Database connection problem&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-operations&#34;&gt;Update operations&lt;/h3&gt;

&lt;p&gt;The endpoints of any update operations &lt;strong&gt;must use POST&lt;/strong&gt;. It informs that any web proxy servers between the client and the Web API should not cache responses of the operations. In update operations, there are usually some input parameters. You can pass simple parameters as key-value pairs (i.e. &lt;code&gt;www-form-urlencoded&lt;/code&gt;) in the request message body.&lt;/p&gt;

&lt;p&gt;Below is a sample request for adding a task in the Web API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;POST /addTodo HTTP/1.1
Host: example.com
Content-type: application/x-www-form-urlencoded
Content-length: 53

due=2017-01-06&amp;amp;what=Makeup+exam&amp;amp;category=study&amp;amp;done=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more complicated data, use JSON data format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;POST /addTodo HTTP/1.1
Host: example.com
Content-type: application/json
Content-length: 80

{ &amp;quot;due&amp;quot;: &amp;quot;2017-01-06&amp;quot;, &amp;quot;what&amp;quot;: &amp;quot;Makeup exam&amp;quot;,
  &amp;quot;category&amp;quot;: &amp;quot;study&amp;quot;, &amp;quot;done&amp;quot;: 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Urlencoded payload is usually preferred for Web APIs in an Ajax web app. First, the input parameters are usually simple. Furthermore, it is easier to work with
key-value pairs in client-side programming (e.g. using jQuery).&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;successful response&lt;/em&gt; from an update operation may provide some info about the update operation, e.g. the id of the newly created record.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 200 Ok
Content-type: application/json
Content-length: 11

{ &amp;quot;id&amp;quot;:21 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the delete operation, the client must specify the &lt;code&gt;id&lt;/code&gt; of the task to delete.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;POST /deleteTodo HTTP/1.1
Host: example.com
Content-type: application/x-www-form-urlencoded
Content-length: 4

id=3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;successful&lt;/em&gt; response for the delete operation may have empty body. In this case, use HTTP status code &lt;code&gt;204&lt;/code&gt; instead of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 204 No content

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the updateTodo operation, the client must specify the &lt;code&gt;id&lt;/code&gt; of the task to change, and then list the properties and their new values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;POST /updateTodo HTTP/1.1
Host: example.com
Content-type: application/x-www-form-urlencoded
Content-length: 53

id=21&amp;amp;what=Makeup+exam+COMP312
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write sample response messages for the &lt;code&gt;POST /updateTodo&lt;/code&gt; endpoint for successful update, and unsuccessful update because the record with the given id does not exist.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Design a new endpoint &lt;code&gt;GET /getTodoWithId&lt;/code&gt;, to retrieve a task with a given &lt;code&gt;id&lt;/code&gt;. Write sample response messages for successful and unsuccessful retrieval.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Design a new endpoint for the Web API for the operation of marking a task as done (i.e. set the done property to 1 in the server database.) Write sample response messages for successful and unsuccessful operation. In your answer, describe what input parameters are required.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>5-2 Implementing a Web API</title>
      <link>http://philiplei.github.io/webapi/5-2/</link>
      <pubDate>Wed, 26 Oct 2016 13:43:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/5-2/</guid>
      <description>

&lt;p&gt;In this lab, we&amp;rsquo;ll discuss implementation of the Web API in last section using Express framework.&lt;/p&gt;

&lt;h2 id=&#34;endpoints-with-get-method&#34;&gt;Endpoints with GET method&lt;/h2&gt;

&lt;p&gt;This section discusses the implementation of two endpoints of the Web API. Both are read-only and use GET method. They return the result in JSON data format.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/getTodo&lt;/td&gt;
&lt;td&gt;List all tasks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/searchTodo&lt;/td&gt;
&lt;td&gt;Search tasks that are due before the given date.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Typically, we define a route in an Express app to implement an endpoint in a Web API.
Below is a simple implementation of retrieval of all tasks from a database.  You can easily test this route by loading an URL like &lt;code&gt;http://localhost:3000/getTodo&lt;/code&gt; in a browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;app.get(&#39;/getTodo&#39;, (req, res) =&amp;gt; {
  db.all(&amp;quot;SELECT * FROM task ORDER BY due DESC&amp;quot;, function(err, rows) {
    if (err) {
      // return HTTP status code 500 to report internal server error
      res.status(500).send(err);
    } else {
      // sending JavaScript object creates a JSON response
      res.send({ count: rows.length, task: rows });
    }
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Web API endpoint with GET method may take input parameters in query part of the URL. These parameters are available in &lt;code&gt;req.query&lt;/code&gt; in an Express route. When the app server receives a request for &lt;code&gt;/searchTodo?before=2016-10-27&lt;/code&gt;, it sets the query object &lt;code&gt;req.query = { before: &#39;2016-10-27&#39; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following code implements this endpoint. This example also demonstrates sanity check of input parameters and error reporting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;app.get(&#39;/searchTodo&#39;, (req, res) =&amp;gt; {
  // parameter sanity check
  var before = req.query.before;
  if (/^\d\d\d\d-\d\d-\d\d$/.test(before)===false) {
    // error in input parameters
    res.status(400).end();
    return;
  }
  db.all(&amp;quot;SELECT * FROM task WHERE due &amp;lt;= ? ORDER BY due DESC&amp;quot;,
    [ before ],
    function(err, rows) {
      if (err) {
        // internal server error
        res.status(500).send(err);
      } else {
        // sending JavaScript object creates a JSON response
        res.send({ count: rows.length, task: rows });
      }
    }
  );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;endpoints-with-post-method&#34;&gt;Endpoints with POST method&lt;/h2&gt;

&lt;p&gt;This section discusses implementation of three endpoints (listed below) that use POST method.
They take input parameters in &lt;em&gt;urlencoded&lt;/em&gt; format which are enclosed in the message body of the requests.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/addTodo&lt;/td&gt;
&lt;td&gt;Add a task. Message body contains properties of the new task, except id.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/updateTodo&lt;/td&gt;
&lt;td&gt;Update a task. Message body contains id of the updated todo and properties with new value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/deleteTodo&lt;/td&gt;
&lt;td&gt;Delete the task with id included in message body&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The route below is a simple implementation of adding a new task to the database.
The route obtains the input parameters from &lt;code&gt;req.body&lt;/code&gt; instead of &lt;code&gt;req.query&lt;/code&gt; because the input parameters are passed in the request message body. After error checking of input parameters, the code executes &lt;code&gt;INSERT&lt;/code&gt; SQL statement to add a task to the database. It returns HTTP status code &lt;code&gt;200&lt;/code&gt; and the id of the new record in JSON format if &lt;code&gt;INSERT&lt;/code&gt; is successful. Otherwise, it returns status code &lt;code&gt;500&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;app.post(&#39;/addTodo&#39;, (req, res) =&amp;gt; {
  // obtain the input parameters from the message body
  var due = req.body.due;
  var what = req.body.what;
  var category = req.body.category;
  var done = req.body.done;
  if (done==undefined) done = 0;  // default value

  // sanity check of input parameters
  if (due===undefined || what===undefined || category===undefined) {
    res.status(400).send(&#39;Cannot add new. &#39;+&#39;content &#39;+JSON.stringify(req.body));
    // console.log(req.body);
    return;
  }

  db.run(&amp;quot;INSERT INTO task (due, what, category, done) VALUES (?,?,?,?)&amp;quot;,
    [due, what, category, done],
    function(err) {
      if (err) {
        res.status(500).send(err);
      } else {
        res.send({ id: this.lastId });
      }
  });

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An endpoint may have no data to return in case of successful operation. For example, the endpoint &lt;code&gt;POST /deleteTodo&lt;/code&gt; returns a response with empty body in successful deletion. In this case, the route can return a &lt;code&gt;204&lt;/code&gt; response with the following line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;res.status(204).end();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;http://philiplei.github.io/chap5-app/app.js&#34;&gt;source code&lt;/a&gt; of &lt;code&gt;app.js&lt;/code&gt; in the Ajax web app for the implementation of the endpoints &lt;code&gt;POST /updateTodo&lt;/code&gt; and &lt;code&gt;POST /deleteTodo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Implement the endpoint for the operation of marking a task as done (the last question in the previous section).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5-3 Consuming a Web API</title>
      <link>http://philiplei.github.io/webapi/5-3/</link>
      <pubDate>Thu, 27 Oct 2016 08:43:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/webapi/5-3/</guid>
      <description>

&lt;p&gt;In this lab, we&amp;rsquo;ll write &lt;em&gt;client-side&lt;/em&gt; JavaScript to consume a Web API. We&amp;rsquo;ll use jQuery library to send GET and POST requests to the Web API.&lt;/p&gt;

&lt;h2 id=&#34;endpoints-with-get-method&#34;&gt;Endpoints with GET method&lt;/h2&gt;

&lt;p&gt;There are two endpoints with GET method in our sample app.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/getTodo&lt;/td&gt;
&lt;td&gt;List all tasks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/searchTodo&lt;/td&gt;
&lt;td&gt;Search tasks that are due before the given date.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In jQuery, the basic method to send Ajax call with GET method is &lt;code&gt;$.get(url, callback)&lt;/code&gt;. The callback runs if the browser receives a successful response (with status code 200 or other 2xx values). If the response message body has &lt;code&gt;Content-type: application/json&lt;/code&gt;, jQuery will convert the message body into a JavaScript object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$.get(&#39;/getTodo&#39;, (data) =&amp;gt; {
  // data is JavaScript object derived from the JSON payload in response
  console.dir(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding input parameters to GET requests is also simple. Use a JavaScript object to encode key-value pairs. The following code sends a GET request to the URL &lt;code&gt;/searchTodo?before=2016-10-10&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$.get(&#39;/searchTodo&#39;, { before: &#39;2016-10-10&#39; }, (data) =&amp;gt; {
  // data is JavaScript object derived from the JSON payload in response
  console.dir(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;endpoints-with-post-method&#34;&gt;Endpoints with POST method&lt;/h2&gt;

&lt;p&gt;One of the endpoint that use POST method in our sample app is &lt;code&gt;/addTodo&lt;/code&gt;. The following code sends a POST request to the URL. The request body encodes the properties &lt;code&gt;due&lt;/code&gt;, &lt;code&gt;what&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt; in urlencoded format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$.post(&#39;/addTodo&#39;,
   { due: &#39;2016-12-12&#39;, what: &#39;comp312 final exam&#39;, category: &#39;study&#39; },
   (data) =&amp;gt; {
      // data is JavaScript object derived from the JSON payload in response
      // in this case, it is something like { id: 123 }
      console.dir(data);
   }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a sample HTTP request that the above code sends.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;POST /addTodo HTTP/1.1
Host: example.com
Content-type: application/x-www-form-urlencoded
Content-length: 53

due=2016-12-12&amp;amp;what=comp312+final+exam&amp;amp;category=study
&lt;/code&gt;&lt;/pre&gt;

&lt;!--
```JavaScript
$.post(&#39;/updateTodo&#39;,
   { id: 3, what: &#39;An very important task..&#39; },
   (data) =&gt; {
      // data is JavaScript object derived from the JSON payload in response
      console.dir(data);
   }
);
```
--&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;http://philiplei.github.io/chap5-app/public/logic.js&#34;&gt;source code&lt;/a&gt; of &lt;code&gt;logic.js&lt;/code&gt; in the Ajax web app for how to use jQuery &lt;code&gt;$.post()&lt;/code&gt; to consume the other endpoints in the web app.&lt;/p&gt;

&lt;h2 id=&#34;advanced-topics&#34;&gt;Advanced topics&lt;/h2&gt;

&lt;p&gt;The following advanced examples are included for your information only. They are  not used in our sample app.&lt;/p&gt;

&lt;h3 id=&#34;error-handling&#34;&gt;Error handling&lt;/h3&gt;

&lt;p&gt;The callback as the second parameter of &lt;code&gt;$.get()&lt;/code&gt; and &lt;code&gt;$.post()&lt;/code&gt; only runs when the browser receives a successful response (usually with status code 200 or 204). To handle a response with error status code (e.g. 400, 404 and 500), you can register a callback with the method &lt;code&gt;.fail()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$.post(&#39;/updateTodo&#39;,
  // &#39;xxid&#39; should be &#39;id&#39;
  { xxid: 3, what: &#39;Woow!&#39; },
  (data) =&amp;gt; {
    console.log(&#39;success&#39;);  // data is undefined for 204 responses
  }
).fail( (jqXHR) =&amp;gt; {
  console.log(&#39;error&#39;);
  console.log(jqXHR.status);
  console.log(jqXHR.statusText);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter of the callback is a &lt;a href=&#34;http://api.jquery.com/jQuery.ajax/#jqXHR&#34;&gt;jqXHR&lt;/a&gt; object, which provides various information about the Ajax call. In case of &lt;code&gt;400&lt;/code&gt; response, &lt;code&gt;jqXHR.status = 400&lt;/code&gt; and &lt;code&gt;jqXHR.statusText = &#39;Bad Request&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sending-json-data-in-post-request&#34;&gt;Sending JSON data in POST request&lt;/h3&gt;

&lt;p&gt;You have to use the low-level jQuery Ajax function &lt;code&gt;$.ajax()&lt;/code&gt; to send JSON format data in POST requests. For example, to send the following HTTP request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;POST /addTodo HTTP/1.1
Host: example.com
Content-type: application/json
Content-length: 80

{ &amp;quot;due&amp;quot;: &amp;quot;2017-01-06&amp;quot;, &amp;quot;what&amp;quot;: &amp;quot;Makeup exam&amp;quot;,
  &amp;quot;category&amp;quot;: &amp;quot;study&amp;quot;, &amp;quot;done&amp;quot;: 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; use the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var query = { due: &#39;2017-01-06&#39;, task: &#39;Makeup exam&#39;,
     category: &#39;study&#39;, done: 0 };

$.ajax(&#39;/addTodo&#39;, {
   type: &#39;POST&#39;,
   data: JSON.stringify(query),
   contentType: &#39;application/json&#39;,
   success: (data) =&amp;gt; {
      // ...
   }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>