<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Servers on COMP312 labs</title>
    <link>http://philiplei.github.io/server/</link>
    <description>Recent content in Servers on COMP312 labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2016 10:36:44 +0800</lastBuildDate>
    
	<atom:link href="http://philiplei.github.io/server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4-1 Node.js primer</title>
      <link>http://philiplei.github.io/server/4-1/</link>
      <pubDate>Thu, 30 Jun 2016 10:36:44 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-1/</guid>
      <description>This lab goes through the basics of the Node.js platform.
Quick start Node.js (https://nodejs.org) is a platform built on Chrome&amp;rsquo;s JavaScript runtime V8 for easily building fast, scalable network applications. Node.js supports the same basic JavaScript programming language as web browsers. As the first example, let&amp;rsquo;s run the following program p101.js in both browser and Node. (Follow instruction to install Node.)
// p101.js // return the largest number in an array // assume at least 1 entry, and all entries are numbers function largest (A) { var big=A[0]; for (var i=1; i&amp;lt;A.</description>
    </item>
    
    <item>
      <title>4-2 NPM modules</title>
      <link>http://philiplei.github.io/server/4-2/</link>
      <pubDate>Mon, 25 Jul 2016 10:05:01 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-2/</guid>
      <description>In this lab, we will
 install module with npm install demonstrate how send HTTP requests using the request modules. cover the concept of a Node app and dependency management in package.json  Installing Modules Node.js has a built-in module called http and https for making HTTP clients and servers. They are efficient implementation of the HTTP protocol. However, the modules are low-level and not convenient to use. Therefore, the Node community has developed several modules for writing HTTP clients and servers.</description>
    </item>
    
    <item>
      <title>4-3 Web app routing</title>
      <link>http://philiplei.github.io/server/4-3/</link>
      <pubDate>Wed, 27 Jul 2016 10:29:04 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-3/</guid>
      <description>Express.js (official website) is a web framework to simplify development of Web applications. It supports:
 Routing – different request processing based on URL patterns Middleware – chainable processing of requests and responses Template – generate HTML output from variables  This lab covers how to define routes to capture HTTP requests for a web app / service endpoints. In addition, we&amp;rsquo;ll discuss how to generate simple HTTP responses.</description>
    </item>
    
    <item>
      <title>4-4 Web app middlewares</title>
      <link>http://philiplei.github.io/server/4-4/</link>
      <pubDate>Tue, 09 Aug 2016 15:10:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-4/</guid>
      <description>This lab demonstrates how to use middleware in general. It introduces a few common middleware, and also covers a middleware that handles form submit using GET and POST.
Middlewares In the previous lab, we saw that an Express app is essentially a sequence of routes. When a request arrives at an Express app, the app tries to find a match of the path in the order of routes in the sequence.</description>
    </item>
    
    <item>
      <title>Server-side programming</title>
      <link>http://philiplei.github.io/server/</link>
      <pubDate>Thu, 30 Jun 2016 10:14:43 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/</guid>
      <description>Server-side programming This chapter goes through the basics of the JavaScript programming on the server side using Node.js.
 4-1. Node primer  compare node.js and browser env install, run *.js require module event loop. timer built-in modules file I/O. fs.readFile, fs.writeFile. callback: (err, result) =&amp;gt; { } how to manage control flow. sequential.  4-2. NPM modules  npm install module request sending GET and POST. options object pattern Node app.</description>
    </item>
    
    <item>
      <title>4-5 Templates and file modules</title>
      <link>http://philiplei.github.io/server/4-5/</link>
      <pubDate>Wed, 10 Aug 2016 16:21:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-5/</guid>
      <description>This lab demonstrates how to use templates in Express app. In addition, it shows how to break a JavaScript program into modules by using &amp;lsquo;file modules&amp;rsquo;.
Template engine In previous lab, we embedded HTML template inside JavaScript code to render data. This approach becomes impractical when the HTML code or the data become more complicated. A better approach is to use some template system to render data in the server side.</description>
    </item>
    
    <item>
      <title>4-6 Database access</title>
      <link>http://philiplei.github.io/server/4-6/</link>
      <pubDate>Wed, 10 Aug 2016 09:14:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-6/</guid>
      <description>This lab demonstrates how to use a file-based database sqlite.
SQLite SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine (from https://www.sqlite.org/). The whole database is stored in a file, and an application can open this database directly without connecting to any server.
A popular module to access SQLite in Node is sqlite3. Install this module and update package.json with the command npm install sqlite3 --save.</description>
    </item>
    
    <item>
      <title>4-7 A sample web app</title>
      <link>http://philiplei.github.io/server/4-7/</link>
      <pubDate>Thu, 20 Oct 2016 08:25:00 +0800</pubDate>
      
      <guid>http://philiplei.github.io/server/4-7/</guid>
      <description>We&amp;rsquo;ll end this chapter with the implementation of a classic web app. The app folder is /chap4-7. Copy it to a local folder, and install dependencies with the command npm install. Then run the app with the command node app.js.
The app has the following views. These views contain buttons or links to initiate actions through controllers. E.g. the view GET /list.html has a link to delete the todos.
 GET /list.</description>
    </item>
    
  </channel>
</rss>